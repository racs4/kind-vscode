module.exports = (function (){
  function word_to_u16(w) {
    var u = 0;
    for (var i = 0; i < 16; ++i) {
      u = u | (w._ === 'Word.i' ? 1 << i : 0);
      w = w.pred;
    };
    return u;
  };
  function u16_to_word(u) {
    var w = {_: 'Word.e'};
    for (var i = 0; i < 16; ++i) {
      w = {_: (u >>> (16-i-1)) & 1 ? 'Word.i' : 'Word.o', pred: w};
    };
    return w;
  };
  function u16_to_bits(x) {
    var s = '';
    for (var i = 0; i < 16; ++i) {
      s = (x & 1 ? '1' : '0') + s;
      x = x >>> 1;
    }
    return s;
  };
  function word_to_u32(w) {
    var u = 0;
    for (var i = 0; i < 32; ++i) {
      u = u | (w._ === 'Word.i' ? 1 << i : 0);
      w = w.pred;
    };
    return u;
  };
  function u32_to_word(u) {
    var w = {_: 'Word.e'};
    for (var i = 0; i < 32; ++i) {
      w = {_: (u >>> (32-i-1)) & 1 ? 'Word.i' : 'Word.o', pred: w};
    };
    return w;
  };
  function u32_for(state, from, til, func) {
    for (var i = from; i < til; ++i) {
      state = func(i)(state);
    }
    return state;
  };
  var list_for = list => nil => cons => {
    while (list._ !== 'List.nil') {
      nil = cons(list.head)(nil);
      list = list.tail;
    }
    return nil;
  };  var list_length = list => {
    var len = 0;
    while (list._ === 'List.cons') {
      len += 1;
      list = list.tail;
    };
    return BigInt(len);
  };var nat_to_bits = n => {
  return n === 0n ? '' : n.toString(2);
};var kind_name_to_bits = name => {
  const TABLE = {
    'A': '000000', 'B': '100000', 'C': '010000', 'D': '110000',
    'E': '001000', 'F': '101000', 'G': '011000', 'H': '111000',
    'I': '000100', 'J': '100100', 'K': '010100', 'L': '110100',
    'M': '001100', 'N': '101100', 'O': '011100', 'P': '111100',
    'Q': '000010', 'R': '100010', 'S': '010010', 'T': '110010',
    'U': '001010', 'V': '101010', 'W': '011010', 'X': '111010',
    'Y': '000110', 'Z': '100110', 'a': '010110', 'b': '110110',
    'c': '001110', 'd': '101110', 'e': '011110', 'f': '111110',
    'g': '000001', 'h': '100001', 'i': '010001', 'j': '110001',
    'k': '001001', 'l': '101001', 'm': '011001', 'n': '111001',
    'o': '000101', 'p': '100101', 'q': '010101', 'r': '110101',
    's': '001101', 't': '101101', 'u': '011101', 'v': '111101',
    'w': '000011', 'x': '100011', 'y': '010011', 'z': '110011',
    '0': '001011', '1': '101011', '2': '011011', '3': '111011',
    '4': '000111', '5': '100111', '6': '010111', '7': '110111',
    '8': '001111', '9': '101111', '.': '011111', '_': '111111',
  }
  var a = '';
  for (var i = name.length - 1; i >= 0; --i) {
    a += TABLE[name[i]];
  }
  return a;
};  const inst_unit = x=>x(1);
  const elim_unit = (x=>{var $1 = (()=>c0=>{var self = x;switch("unit"){case 'unit':var $0 = c0;return $0;};})();return $1;});
  const inst_bool = x=>x(true)(false);
  const elim_bool = (x=>{var $4 = (()=>c0=>c1=>{var self = x;if (self) {var $2 = c2;return $2;} else {var $3 = c2;return $3;};})();return $4;});
  const inst_nat = x=>x(0n)(x0=>1n+x0);
  const elim_nat = (x=>{var $8 = (()=>c0=>c1=>{var self = x;if (self===0n) {var $5 = c2;return $5;} else {var $6=(self-1n);var $7 = c2($6);return $7;};})();return $8;});
  const inst_bits = x=>x('')(x0=>x0+'0')(x0=>x0+'1');
  const elim_bits = (x=>{var $14 = (()=>c0=>c1=>c2=>{var self = x;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $9=self.slice(0,-1);var $10 = c1($9);return $10;case 'i':var $11=self.slice(0,-1);var $12 = c2($11);return $12;case 'e':var $13 = c0;return $13;};})();return $14;});
  const inst_u16 = x=>x(x0=>word_to_u16(x0));
  const elim_u16 = (x=>{var $17 = (()=>c0=>{var self = x;switch('u16'){case 'u16':var $15=u16_to_word(self);var $16 = c0($15);return $16;};})();return $17;});
  const inst_u32 = x=>x(x0=>word_to_u32(x0));
  const elim_u32 = (x=>{var $20 = (()=>c0=>{var self = x;switch('u32'){case 'u32':var $18=u32_to_word(self);var $19 = c0($18);return $19;};})();return $20;});
  const inst_string = x=>x('')(x0=>x1=>(String.fromCharCode(x0)+x1));
  const elim_string = (x=>{var $25 = (()=>c0=>c1=>{var self = x;if (self.length===0) {var $21 = c2;return $21;} else {var $22=self.charCodeAt(0);var $23=self.slice(1);var $24 = c2($22)($23);return $24;};})();return $25;});
  var run = (p) => {
    if (typeof window === 'undefined') {      var rl = eval("require('readline')").createInterface({input:process.stdin,output:process.stdout,terminal:false});
      var fs = eval("require('fs')");
      var pc = eval("process");
    } else {
      var rl = {question: (x,f) => f(''), close: () => {}};
      var fs = {readFileSync: () => ''};
      var pc = {exit: () => {}, argv: []};
    };
    return run_io({rl,fs,pc},p).then((x) => { rl.close(); return x; }).catch((e) => { rl.close(); throw e; });
  };
  var get_file = (lib, param) => {
    return lib.fs.readFileSync(param, 'utf8');
  }
  var set_file = (lib, param) => {
    var path = '';
    for (var i = 0; i < param.length && param[i] !== '='; ++i) {
      path += param[i];
    };
    var data = param.slice(i+1);
    lib.fs.mkdirSync(path.split('/').slice(0,-1).join('/'),{recursive:true});
    lib.fs.writeFileSync(path,data);
    return '';
  };
  var del_file = (lib, param) => {
    try {
      lib.fs.unlinkSync(param);
      return '';
    } catch (e) {
      if (e.message.indexOf('EPERM') !== -1) {
        lib.fs.rmdirSync(param);
        return '';
      } else {
        throw e;
      }
    }
  };
  var get_dir = (lib, param) => {
    return lib.fs.readdirSync(param).join(';');
  };
  var run_io = (lib, p) => {
    switch (p._) {
      case 'IO.end': return Promise.resolve(p.value);
      case 'IO.ask': return new Promise((res, err) => {
        switch (p.query) {
          case 'print': console.log(p.param); run_io(lib, p.then(1)).then(res).catch(err); break;
          case 'put_string': process.stdout.write(p.param); run_io(lib, p.then(1)).then(res).catch(err); break;
          case 'exit': lib.pc.exit(); break;
          case 'get_line': lib.rl.question('', (line) => run_io(lib, p.then(line)).then(res).catch(err)); break;
          case 'get_file': try { run_io(lib, p.then(get_file(lib,p.param))).then(res).catch(err); } catch (e) { if (e.message.indexOf('NOENT') !== -1) { run_io(lib, p.then('')).then(res).catch(err); } else { err(e); } }; break;
          case 'set_file': try { run_io(lib, p.then(set_file(lib,p.param))).then(res).catch(err); } catch (e) { if (e.message.indexOf('NOENT') !== -1) { run_io(lib, p.then('')).then(res).catch(err); } else { err(e); } }; break;
          case 'del_file': try { run_io(lib, p.then(del_file(lib,p.param))).then(res).catch(err); } catch (e) { if (e.message.indexOf('NOENT') !== -1) { run_io(lib, p.then('')).then(res).catch(err); } else { err(e); } }; break;
          case 'get_dir': try { run_io(lib, p.then(get_dir(lib,p.param))).then(res).catch(err); } catch (e) { if (e.message.indexOf('NOENT') !== -1) { run_io(lib, p.then('')).then(res).catch(err); } else { err(e); } }; break;
          case 'get_args': run_io(lib, p.then(lib.pc.argv[2]||'')).then(res).catch(err); break;
         }
      });
    }
  };
function IO$(_A$1){var $26 = null;return $26;};
 const IO = x0=>IO$(x0);function IO$ask$(_query$2,_param$3,_then$4){var $27 = ({_:'IO.ask','query':_query$2,'param':_param$3,'then':_then$4});return $27;};
 const IO$ask = x0=>x1=>x2=>IO$ask$(x0,x1,x2);function IO$bind$(_a$3,_f$4){var self = _a$3;switch(self._){case 'IO.end':var $29=self.value;var $30 = _f$4($29);var $28 = $30;break;case 'IO.ask':var $31=self.query;var $32=self.param;var $33=self.then;var $34 = IO$ask$($31,$32,(_x$8=>{var $35 = IO$bind$($33(_x$8),_f$4);return $35;}));var $28 = $34;break;};return $28;};
 const IO$bind = x0=>x1=>IO$bind$(x0,x1);function IO$end$(_value$2){var $36 = ({_:'IO.end','value':_value$2});return $36;};
 const IO$end = x0=>IO$end$(x0);function IO$monad$(_new$2){var $37 = _new$2(IO$bind)(IO$end);return $37;};
 const IO$monad = x0=>IO$monad$(x0);function Maybe$(_A$1){var $38 = null;return $38;};
 const Maybe = x0=>Maybe$(x0);function BitsMap$(_A$1){var $39 = null;return $39;};
 const BitsMap = x0=>BitsMap$(x0); const Maybe$none = ({_:'Maybe.none'});
function BitsMap$get$(_bits$2,_map$3){var BitsMap$get$=(_bits$2,_map$3)=>({ctr:'TCO',arg:[_bits$2,_map$3]});var BitsMap$get=_bits$2=>_map$3=>BitsMap$get$(_bits$2,_map$3);var arg=[_bits$2,_map$3];while(true){let [_bits$2,_map$3]=arg;var R=(()=>{var self = _bits$2;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $40=self.slice(0,-1);var self = _map$3;switch(self._){case 'BitsMap.tie':var $42=self.lft;var $43 = BitsMap$get$($40,$42);var $41 = $43;break;case 'BitsMap.new':var $44 = Maybe$none;var $41 = $44;break;};return $41;case 'i':var $45=self.slice(0,-1);var self = _map$3;switch(self._){case 'BitsMap.tie':var $47=self.rgt;var $48 = BitsMap$get$($45,$47);var $46 = $48;break;case 'BitsMap.new':var $49 = Maybe$none;var $46 = $49;break;};return $46;case 'e':var self = _map$3;switch(self._){case 'BitsMap.tie':var $51=self.val;var $52 = $51;var $50 = $52;break;case 'BitsMap.new':var $53 = Maybe$none;var $50 = $53;break;};return $50;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const BitsMap$get = x0=>x1=>BitsMap$get$(x0,x1); const Bits$e = '';
 const Bool$false = false;
  const Bool$and = a0=>a1=>(a0&&a1);
 const Bool$true = true;
function Cmp$as_lte$(_cmp$1){var self = _cmp$1;switch(self._){case 'Cmp.ltn':case 'Cmp.eql':var $55 = Bool$true;var $54 = $55;break;case 'Cmp.gtn':var $56 = Bool$false;var $54 = $56;break;};return $54;};
 const Cmp$as_lte = x0=>Cmp$as_lte$(x0); const Cmp$ltn = ({_:'Cmp.ltn'});
 const Cmp$gtn = ({_:'Cmp.gtn'});
function Word$cmp$go$(_a$2,_b$3,_c$4){var self = _a$2;switch(self._){case 'Word.o':var $58=self.pred;var $59 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $61=self.pred;var $62 = (_a$pred$10=>{var $63 = Word$cmp$go$(_a$pred$10,$61,_c$4);return $63;});var $60 = $62;break;case 'Word.i':var $64=self.pred;var $65 = (_a$pred$10=>{var $66 = Word$cmp$go$(_a$pred$10,$64,Cmp$ltn);return $66;});var $60 = $65;break;case 'Word.e':var $67 = (_a$pred$8=>{var $68 = _c$4;return $68;});var $60 = $67;break;};var $60 = $60($58);return $60;});var $57 = $59;break;case 'Word.i':var $69=self.pred;var $70 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $72=self.pred;var $73 = (_a$pred$10=>{var $74 = Word$cmp$go$(_a$pred$10,$72,Cmp$gtn);return $74;});var $71 = $73;break;case 'Word.i':var $75=self.pred;var $76 = (_a$pred$10=>{var $77 = Word$cmp$go$(_a$pred$10,$75,_c$4);return $77;});var $71 = $76;break;case 'Word.e':var $78 = (_a$pred$8=>{var $79 = _c$4;return $79;});var $71 = $78;break;};var $71 = $71($69);return $71;});var $57 = $70;break;case 'Word.e':var $80 = (_b$5=>{var $81 = _c$4;return $81;});var $57 = $80;break;};var $57 = $57(_b$3);return $57;};
 const Word$cmp$go = x0=>x1=>x2=>Word$cmp$go$(x0,x1,x2); const Cmp$eql = ({_:'Cmp.eql'});
function Word$cmp$(_a$2,_b$3){var $82 = Word$cmp$go$(_a$2,_b$3,Cmp$eql);return $82;};
 const Word$cmp = x0=>x1=>Word$cmp$(x0,x1);function Word$lte$(_a$2,_b$3){var $83 = Cmp$as_lte$(Word$cmp$(_a$2,_b$3));return $83;};
 const Word$lte = x0=>x1=>Word$lte$(x0,x1);function Nat$succ$(_pred$1){var $84 = 1n+_pred$1;return $84;};
 const Nat$succ = x0=>Nat$succ$(x0); const Nat$zero = 0n;
  const U16$lte = a0=>a1=>(a0<=a1);
function U16$btw$(_a$1,_b$2,_c$3){var $85 = ((_a$1<=_b$2)&&(_b$2<=_c$3));return $85;};
 const U16$btw = x0=>x1=>x2=>U16$btw$(x0,x1,x2);function U16$new$(_value$1){var $86 = word_to_u16(_value$1);return $86;};
 const U16$new = x0=>U16$new$(x0); const Word$e = ({_:'Word.e'});
function Word$(_size$1){var $87 = null;return $87;};
 const Word = x0=>Word$(x0);function Word$i$(_pred$2){var $88 = ({_:'Word.i','pred':_pred$2});return $88;};
 const Word$i = x0=>Word$i$(x0);function Word$o$(_pred$2){var $89 = ({_:'Word.o','pred':_pred$2});return $89;};
 const Word$o = x0=>Word$o$(x0);function Word$subber$(_a$2,_b$3,_c$4){var self = _a$2;switch(self._){case 'Word.o':var $91=self.pred;var $92 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $94=self.pred;var $95 = (_a$pred$10=>{var self = _c$4;if (self) {var $97 = Word$i$(Word$subber$(_a$pred$10,$94,Bool$true));var $96 = $97;} else {var $98 = Word$o$(Word$subber$(_a$pred$10,$94,Bool$false));var $96 = $98;};return $96;});var $93 = $95;break;case 'Word.i':var $99=self.pred;var $100 = (_a$pred$10=>{var self = _c$4;if (self) {var $102 = Word$o$(Word$subber$(_a$pred$10,$99,Bool$true));var $101 = $102;} else {var $103 = Word$i$(Word$subber$(_a$pred$10,$99,Bool$true));var $101 = $103;};return $101;});var $93 = $100;break;case 'Word.e':var $104 = (_a$pred$8=>{var $105 = Word$e;return $105;});var $93 = $104;break;};var $93 = $93($91);return $93;});var $90 = $92;break;case 'Word.i':var $106=self.pred;var $107 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $109=self.pred;var $110 = (_a$pred$10=>{var self = _c$4;if (self) {var $112 = Word$o$(Word$subber$(_a$pred$10,$109,Bool$false));var $111 = $112;} else {var $113 = Word$i$(Word$subber$(_a$pred$10,$109,Bool$false));var $111 = $113;};return $111;});var $108 = $110;break;case 'Word.i':var $114=self.pred;var $115 = (_a$pred$10=>{var self = _c$4;if (self) {var $117 = Word$i$(Word$subber$(_a$pred$10,$114,Bool$true));var $116 = $117;} else {var $118 = Word$o$(Word$subber$(_a$pred$10,$114,Bool$false));var $116 = $118;};return $116;});var $108 = $115;break;case 'Word.e':var $119 = (_a$pred$8=>{var $120 = Word$e;return $120;});var $108 = $119;break;};var $108 = $108($106);return $108;});var $90 = $107;break;case 'Word.e':var $121 = (_b$5=>{var $122 = Word$e;return $122;});var $90 = $121;break;};var $90 = $90(_b$3);return $90;};
 const Word$subber = x0=>x1=>x2=>Word$subber$(x0,x1,x2);function Word$sub$(_a$2,_b$3){var $123 = Word$subber$(_a$2,_b$3,Bool$false);return $123;};
 const Word$sub = x0=>x1=>Word$sub$(x0,x1);  const U16$sub = a0=>a1=>(Math.max(a0-a1,0));
function Nat$apply$(_n$2,_f$3,_x$4){var Nat$apply$=(_n$2,_f$3,_x$4)=>({ctr:'TCO',arg:[_n$2,_f$3,_x$4]});var Nat$apply=_n$2=>_f$3=>_x$4=>Nat$apply$(_n$2,_f$3,_x$4);var arg=[_n$2,_f$3,_x$4];while(true){let [_n$2,_f$3,_x$4]=arg;var R=(()=>{var self = _n$2;if (self===0n) {var $124 = _x$4;return $124;} else {var $125=(self-1n);var $126 = Nat$apply$($125,_f$3,_f$3(_x$4));return $126;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Nat$apply = x0=>x1=>x2=>Nat$apply$(x0,x1,x2);function Word$inc$(_word$2){var self = _word$2;switch(self._){case 'Word.o':var $128=self.pred;var $129 = Word$i$($128);var $127 = $129;break;case 'Word.i':var $130=self.pred;var $131 = Word$o$(Word$inc$($130));var $127 = $131;break;case 'Word.e':var $132 = Word$e;var $127 = $132;break;};return $127;};
 const Word$inc = x0=>Word$inc$(x0);function U16$inc$(_a$1){var self = _a$1;switch('u16'){case 'u16':var $134=u16_to_word(self);var $135 = U16$new$(Word$inc$($134));var $133 = $135;break;};return $133;};
 const U16$inc = x0=>U16$inc$(x0);function Word$zero$(_size$1){var self = _size$1;if (self===0n) {var $137 = Word$e;var $136 = $137;} else {var $138=(self-1n);var $139 = Word$o$(Word$zero$($138));var $136 = $139;};return $136;};
 const Word$zero = x0=>Word$zero$(x0); const U16$zero = U16$new$(Word$zero$(16n));
  const Nat$to_u16 = a0=>(Number(a0));
function Word$adder$(_a$2,_b$3,_c$4){var self = _a$2;switch(self._){case 'Word.o':var $141=self.pred;var $142 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $144=self.pred;var $145 = (_a$pred$10=>{var self = _c$4;if (self) {var $147 = Word$i$(Word$adder$(_a$pred$10,$144,Bool$false));var $146 = $147;} else {var $148 = Word$o$(Word$adder$(_a$pred$10,$144,Bool$false));var $146 = $148;};return $146;});var $143 = $145;break;case 'Word.i':var $149=self.pred;var $150 = (_a$pred$10=>{var self = _c$4;if (self) {var $152 = Word$o$(Word$adder$(_a$pred$10,$149,Bool$true));var $151 = $152;} else {var $153 = Word$i$(Word$adder$(_a$pred$10,$149,Bool$false));var $151 = $153;};return $151;});var $143 = $150;break;case 'Word.e':var $154 = (_a$pred$8=>{var $155 = Word$e;return $155;});var $143 = $154;break;};var $143 = $143($141);return $143;});var $140 = $142;break;case 'Word.i':var $156=self.pred;var $157 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $159=self.pred;var $160 = (_a$pred$10=>{var self = _c$4;if (self) {var $162 = Word$o$(Word$adder$(_a$pred$10,$159,Bool$true));var $161 = $162;} else {var $163 = Word$i$(Word$adder$(_a$pred$10,$159,Bool$false));var $161 = $163;};return $161;});var $158 = $160;break;case 'Word.i':var $164=self.pred;var $165 = (_a$pred$10=>{var self = _c$4;if (self) {var $167 = Word$i$(Word$adder$(_a$pred$10,$164,Bool$true));var $166 = $167;} else {var $168 = Word$o$(Word$adder$(_a$pred$10,$164,Bool$true));var $166 = $168;};return $166;});var $158 = $165;break;case 'Word.e':var $169 = (_a$pred$8=>{var $170 = Word$e;return $170;});var $158 = $169;break;};var $158 = $158($156);return $158;});var $140 = $157;break;case 'Word.e':var $171 = (_b$5=>{var $172 = Word$e;return $172;});var $140 = $171;break;};var $140 = $140(_b$3);return $140;};
 const Word$adder = x0=>x1=>x2=>Word$adder$(x0,x1,x2);function Word$add$(_a$2,_b$3){var $173 = Word$adder$(_a$2,_b$3,Bool$false);return $173;};
 const Word$add = x0=>x1=>Word$add$(x0,x1);  const U16$add = a0=>a1=>((a0+a1)&0xFFFF);
function Cmp$as_eql$(_cmp$1){var self = _cmp$1;switch(self._){case 'Cmp.ltn':case 'Cmp.gtn':var $175 = Bool$false;var $174 = $175;break;case 'Cmp.eql':var $176 = Bool$true;var $174 = $176;break;};return $174;};
 const Cmp$as_eql = x0=>Cmp$as_eql$(x0);function Word$eql$(_a$2,_b$3){var $177 = Cmp$as_eql$(Word$cmp$(_a$2,_b$3));return $177;};
 const Word$eql = x0=>x1=>Word$eql$(x0,x1);  const U16$eql = a0=>a1=>(a0===a1);
  const Bits$o = a0=>(a0+'0');
  const Bits$i = a0=>(a0+'1');
function Word$to_bits$(_a$2){var self = _a$2;switch(self._){case 'Word.o':var $179=self.pred;var $180 = (Word$to_bits$($179)+'0');var $178 = $180;break;case 'Word.i':var $181=self.pred;var $182 = (Word$to_bits$($181)+'1');var $178 = $182;break;case 'Word.e':var $183 = Bits$e;var $178 = $183;break;};return $178;};
 const Word$to_bits = x0=>Word$to_bits$(x0);function Word$trim$(_new_size$2,_word$3){var self = _new_size$2;if (self===0n) {var $185 = Word$e;var $184 = $185;} else {var $186=(self-1n);var self = _word$3;switch(self._){case 'Word.o':var $188=self.pred;var $189 = Word$o$(Word$trim$($186,$188));var $187 = $189;break;case 'Word.i':var $190=self.pred;var $191 = Word$i$(Word$trim$($186,$190));var $187 = $191;break;case 'Word.e':var $192 = Word$o$(Word$trim$($186,Word$e));var $187 = $192;break;};var $184 = $187;};return $184;};
 const Word$trim = x0=>x1=>Word$trim$(x0,x1);  const Bits$concat = a0=>a1=>(a1+a0);
function Bits$reverse$tco$(_a$1,_r$2){var Bits$reverse$tco$=(_a$1,_r$2)=>({ctr:'TCO',arg:[_a$1,_r$2]});var Bits$reverse$tco=_a$1=>_r$2=>Bits$reverse$tco$(_a$1,_r$2);var arg=[_a$1,_r$2];while(true){let [_a$1,_r$2]=arg;var R=(()=>{var self = _a$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $193=self.slice(0,-1);var $194 = Bits$reverse$tco$($193,(_r$2+'0'));return $194;case 'i':var $195=self.slice(0,-1);var $196 = Bits$reverse$tco$($195,(_r$2+'1'));return $196;case 'e':var $197 = _r$2;return $197;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Bits$reverse$tco = x0=>x1=>Bits$reverse$tco$(x0,x1);function Bits$reverse$(_a$1){var $198 = Bits$reverse$tco$(_a$1,Bits$e);return $198;};
 const Bits$reverse = x0=>Bits$reverse$(x0);  const Kind$Name$to_bits = a0=>(kind_name_to_bits(a0));
function Kind$Map$get$(_name$2,_map$3){var $199 = BitsMap$get$((kind_name_to_bits(_name$2)),_map$3);return $199;};
 const Kind$Map$get = x0=>x1=>Kind$Map$get$(x0,x1);function IO$get_file$(_name$1){var $200 = IO$ask$("get_file",_name$1,(_file$2=>{var $201 = IO$end$(_file$2);return $201;}));return $200;};
 const IO$get_file = x0=>IO$get_file$(x0);function Parser$Reply$(_V$1){var $202 = null;return $202;};
 const Parser$Reply = x0=>Parser$Reply$(x0);function Parser$Reply$value$(_idx$2,_code$3,_val$4){var $203 = ({_:'Parser.Reply.value','idx':_idx$2,'code':_code$3,'val':_val$4});return $203;};
 const Parser$Reply$value = x0=>x1=>x2=>Parser$Reply$value$(x0,x1,x2);function Parser$is_eof$(_idx$1,_code$2){var self = _code$2;if (self.length===0) {var $205 = Parser$Reply$value$(_idx$1,_code$2,Bool$true);var $204 = $205;} else {var $206=self.charCodeAt(0);var $207=self.slice(1);var $208 = Parser$Reply$value$(_idx$1,_code$2,Bool$false);var $204 = $208;};return $204;};
 const Parser$is_eof = x0=>x1=>Parser$is_eof$(x0,x1);function Parser$Reply$error$(_idx$2,_code$3,_err$4){var $209 = ({_:'Parser.Reply.error','idx':_idx$2,'code':_code$3,'err':_err$4});return $209;};
 const Parser$Reply$error = x0=>x1=>x2=>Parser$Reply$error$(x0,x1,x2);function Parser$(_V$1){var $210 = null;return $210;};
 const Parser = x0=>Parser$(x0);function Maybe$some$(_value$2){var $211 = ({_:'Maybe.some','value':_value$2});return $211;};
 const Maybe$some = x0=>Maybe$some$(x0);function Parser$ErrorAt$new$(_idx$1,_code$2,_err$3){var $212 = ({_:'Parser.ErrorAt.new','idx':_idx$1,'code':_code$2,'err':_err$3});return $212;};
 const Parser$ErrorAt$new = x0=>x1=>x2=>Parser$ErrorAt$new$(x0,x1,x2);  const Nat$gtn = a0=>a1=>(a0>a1);
function Parser$ErrorAt$combine$(_a$1,_b$2){var self = _a$1;switch(self._){case 'Maybe.some':var $214=self.value;var self = _b$2;switch(self._){case 'Maybe.some':var $216=self.value;var self = $214;switch(self._){case 'Parser.ErrorAt.new':var $218=self.idx;var self = $216;switch(self._){case 'Parser.ErrorAt.new':var $220=self.idx;var self = ($218>$220);if (self) {var $222 = _a$1;var $221 = $222;} else {var $223 = _b$2;var $221 = $223;};var $219 = $221;break;};var $217 = $219;break;};var $215 = $217;break;case 'Maybe.none':var $224 = _a$1;var $215 = $224;break;};var $213 = $215;break;case 'Maybe.none':var $225 = _b$2;var $213 = $225;break;};return $213;};
 const Parser$ErrorAt$combine = x0=>x1=>Parser$ErrorAt$combine$(x0,x1);function Parser$first_of$go$(_pars$2,_err$3,_idx$4,_code$5){var Parser$first_of$go$=(_pars$2,_err$3,_idx$4,_code$5)=>({ctr:'TCO',arg:[_pars$2,_err$3,_idx$4,_code$5]});var Parser$first_of$go=_pars$2=>_err$3=>_idx$4=>_code$5=>Parser$first_of$go$(_pars$2,_err$3,_idx$4,_code$5);var arg=[_pars$2,_err$3,_idx$4,_code$5];while(true){let [_pars$2,_err$3,_idx$4,_code$5]=arg;var R=(()=>{var self = _pars$2;switch(self._){case 'List.cons':var $226=self.head;var $227=self.tail;var _parsed$8 = $226(_idx$4)(_code$5);var self = _parsed$8;switch(self._){case 'Parser.Reply.error':var $229=self.idx;var $230=self.code;var $231=self.err;var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($229,$230,$231));var _err$13 = Parser$ErrorAt$combine$(_neo$12,_err$3);var $232 = Parser$first_of$go$($227,_err$13,_idx$4,_code$5);var $228 = $232;break;case 'Parser.Reply.value':var $233=self.idx;var $234=self.code;var $235=self.val;var $236 = Parser$Reply$value$($233,$234,$235);var $228 = $236;break;};return $228;case 'List.nil':var self = _err$3;switch(self._){case 'Maybe.some':var $238=self.value;var self = $238;switch(self._){case 'Parser.ErrorAt.new':var $240=self.idx;var $241=self.code;var $242=self.err;var $243 = Parser$Reply$error$($240,$241,$242);var $239 = $243;break;};var $237 = $239;break;case 'Maybe.none':var $244 = Parser$Reply$error$(_idx$4,_code$5,"No parse.");var $237 = $244;break;};return $237;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Parser$first_of$go = x0=>x1=>x2=>x3=>Parser$first_of$go$(x0,x1,x2,x3);function Parser$first_of$(_pars$2){var $245 = Parser$first_of$go(_pars$2)(Maybe$none);return $245;};
 const Parser$first_of = x0=>Parser$first_of$(x0);function List$cons$(_head$2,_tail$3){var $246 = ({_:'List.cons','head':_head$2,'tail':_tail$3});return $246;};
 const List$cons = x0=>x1=>List$cons$(x0,x1);function List$(_A$1){var $247 = null;return $247;};
 const List = x0=>List$(x0); const List$nil = ({_:'List.nil'});
function Parser$many$go$(_parse$2,_values$3,_idx$4,_code$5){var Parser$many$go$=(_parse$2,_values$3,_idx$4,_code$5)=>({ctr:'TCO',arg:[_parse$2,_values$3,_idx$4,_code$5]});var Parser$many$go=_parse$2=>_values$3=>_idx$4=>_code$5=>Parser$many$go$(_parse$2,_values$3,_idx$4,_code$5);var arg=[_parse$2,_values$3,_idx$4,_code$5];while(true){let [_parse$2,_values$3,_idx$4,_code$5]=arg;var R=(()=>{var self = _parse$2(_idx$4)(_code$5);switch(self._){case 'Parser.Reply.value':var $248=self.idx;var $249=self.code;var $250=self.val;var $251 = Parser$many$go$(_parse$2,(_xs$9=>{var $252 = _values$3(List$cons$($250,_xs$9));return $252;}),$248,$249);return $251;case 'Parser.Reply.error':var $253 = Parser$Reply$value$(_idx$4,_code$5,_values$3(List$nil));return $253;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Parser$many$go = x0=>x1=>x2=>x3=>Parser$many$go$(x0,x1,x2,x3);function Parser$many$(_parser$2){var $254 = Parser$many$go(_parser$2)((_x$3=>{var $255 = _x$3;return $255;}));return $254;};
 const Parser$many = x0=>Parser$many$(x0); const Unit$new = 1;
function String$cons$(_head$1,_tail$2){var $256 = (String.fromCharCode(_head$1)+_tail$2);return $256;};
 const String$cons = x0=>x1=>String$cons$(x0,x1);  const String$concat = a0=>a1=>(a0+a1);
function String$flatten$go$(_xs$1,_res$2){var String$flatten$go$=(_xs$1,_res$2)=>({ctr:'TCO',arg:[_xs$1,_res$2]});var String$flatten$go=_xs$1=>_res$2=>String$flatten$go$(_xs$1,_res$2);var arg=[_xs$1,_res$2];while(true){let [_xs$1,_res$2]=arg;var R=(()=>{var self = _xs$1;switch(self._){case 'List.cons':var $257=self.head;var $258=self.tail;var $259 = String$flatten$go$($258,(_res$2+$257));return $259;case 'List.nil':var $260 = _res$2;return $260;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const String$flatten$go = x0=>x1=>String$flatten$go$(x0,x1);function String$flatten$(_xs$1){var $261 = String$flatten$go$(_xs$1,"");return $261;};
 const String$flatten = x0=>String$flatten$(x0); const String$nil = '';
function Parser$text$go$(_text$1,_idx$2,_code$3){var self = _text$1;if (self.length===0) {var $263 = Parser$Reply$value$(_idx$2,_code$3,Unit$new);var $262 = $263;} else {var $264=self.charCodeAt(0);var $265=self.slice(1);var self = _code$3;if (self.length===0) {var _error$6 = String$flatten$(List$cons$("Expected \'",List$cons$(_text$1,List$cons$("\', found end of file.",List$nil))));var $267 = Parser$Reply$error$(_idx$2,_code$3,_error$6);var $266 = $267;} else {var $268=self.charCodeAt(0);var $269=self.slice(1);var self = ($264===$268);if (self) {var $271 = Parser$text$($265,Nat$succ$(_idx$2),$269);var $270 = $271;} else {var _error$8 = String$flatten$(List$cons$("Expected \'",List$cons$(_text$1,List$cons$("\', found \'",List$cons$(String$cons$($268,String$nil),List$cons$("\'.",List$nil))))));var $272 = Parser$Reply$error$(_idx$2,_code$3,_error$8);var $270 = $272;};var $266 = $270;};var $262 = $266;};return $262;};
 const Parser$text$go = x0=>x1=>x2=>Parser$text$go$(x0,x1,x2);function Parser$text$(_text$1,_idx$2,_code$3){var self = Parser$text$go$(_text$1,_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $274=self.err;var $275 = Parser$Reply$error$(_idx$2,_code$3,$274);var $273 = $275;break;case 'Parser.Reply.value':var $276=self.idx;var $277=self.code;var $278=self.val;var $279 = Parser$Reply$value$($276,$277,$278);var $273 = $279;break;};return $273;};
 const Parser$text = x0=>x1=>x2=>Parser$text$(x0,x1,x2);function List$reverse$go$(_xs$2,_res$3){var List$reverse$go$=(_xs$2,_res$3)=>({ctr:'TCO',arg:[_xs$2,_res$3]});var List$reverse$go=_xs$2=>_res$3=>List$reverse$go$(_xs$2,_res$3);var arg=[_xs$2,_res$3];while(true){let [_xs$2,_res$3]=arg;var R=(()=>{var self = _xs$2;switch(self._){case 'List.cons':var $280=self.head;var $281=self.tail;var $282 = List$reverse$go$($281,List$cons$($280,_res$3));return $282;case 'List.nil':var $283 = _res$3;return $283;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const List$reverse$go = x0=>x1=>List$reverse$go$(x0,x1);function List$reverse$(_xs$2){var $284 = List$reverse$go$(_xs$2,List$nil);return $284;};
 const List$reverse = x0=>List$reverse$(x0);function Parser$until$go$(_until$2,_parse$3,_values$4,_idx$5,_code$6){var Parser$until$go$=(_until$2,_parse$3,_values$4,_idx$5,_code$6)=>({ctr:'TCO',arg:[_until$2,_parse$3,_values$4,_idx$5,_code$6]});var Parser$until$go=_until$2=>_parse$3=>_values$4=>_idx$5=>_code$6=>Parser$until$go$(_until$2,_parse$3,_values$4,_idx$5,_code$6);var arg=[_until$2,_parse$3,_values$4,_idx$5,_code$6];while(true){let [_until$2,_parse$3,_values$4,_idx$5,_code$6]=arg;var R=(()=>{var _until_reply$7 = _until$2(_idx$5)(_code$6);var self = _until_reply$7;switch(self._){case 'Parser.Reply.value':var $286=self.idx;var $287=self.code;var $288 = Parser$Reply$value$($286,$287,List$reverse$(_values$4));var $285 = $288;break;case 'Parser.Reply.error':var _reply$11 = _parse$3(_idx$5)(_code$6);var self = _reply$11;switch(self._){case 'Parser.Reply.error':var $290=self.idx;var $291=self.code;var $292=self.err;var $293 = Parser$Reply$error$($290,$291,$292);var $289 = $293;break;case 'Parser.Reply.value':var $294=self.idx;var $295=self.code;var $296=self.val;var $297 = Parser$until$go$(_until$2,_parse$3,List$cons$($296,_values$4),$294,$295);var $289 = $297;break;};var $285 = $289;break;};return $285;})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Parser$until$go = x0=>x1=>x2=>x3=>x4=>Parser$until$go$(x0,x1,x2,x3,x4);function Parser$until$(_until$2,_parse$3){var $298 = Parser$until$go(_until$2)(_parse$3)(List$nil);return $298;};
 const Parser$until = x0=>x1=>Parser$until$(x0,x1);function Parser$one$(_idx$1,_code$2){var self = _code$2;if (self.length===0) {var $300 = Parser$Reply$error$(_idx$1,_code$2,"Unexpected end of file.");var $299 = $300;} else {var $301=self.charCodeAt(0);var $302=self.slice(1);var $303 = Parser$Reply$value$(Nat$succ$(_idx$1),$302,$301);var $299 = $303;};return $299;};
 const Parser$one = x0=>x1=>Parser$one$(x0,x1); const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "),List$cons$(Parser$text("\u{9}"),List$cons$(Parser$text("\u{a}"),List$cons$((_idx$1=>_code$2=>{var self = Parser$text$("//",_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $305=self.idx;var $306=self.code;var $307=self.err;var $308 = Parser$Reply$error$($305,$306,$307);var $304 = $308;break;case 'Parser.Reply.value':var $309=self.idx;var $310=self.code;var self = Parser$until$(Parser$text("\u{a}"),Parser$one)($309)($310);switch(self._){case 'Parser.Reply.error':var $312=self.idx;var $313=self.code;var $314=self.err;var $315 = Parser$Reply$error$($312,$313,$314);var $311 = $315;break;case 'Parser.Reply.value':var $316=self.idx;var $317=self.code;var $318 = Parser$Reply$value$($316,$317,Unit$new);var $311 = $318;break;};var $304 = $311;break;};return $304;}),List$nil))))));
function Parser$get_index$(_idx$1,_code$2){var $319 = Parser$Reply$value$(_idx$1,_code$2,_idx$1);return $319;};
 const Parser$get_index = x0=>x1=>Parser$get_index$(x0,x1);function Kind$Parser$init$(_idx$1,_code$2){var self = Kind$Parser$spaces(_idx$1)(_code$2);switch(self._){case 'Parser.Reply.error':var $321=self.idx;var $322=self.code;var $323=self.err;var $324 = Parser$Reply$error$($321,$322,$323);var $320 = $324;break;case 'Parser.Reply.value':var $325=self.idx;var $326=self.code;var self = Parser$get_index$($325,$326);switch(self._){case 'Parser.Reply.error':var $328=self.idx;var $329=self.code;var $330=self.err;var $331 = Parser$Reply$error$($328,$329,$330);var $327 = $331;break;case 'Parser.Reply.value':var $332=self.idx;var $333=self.code;var $334=self.val;var $335 = Parser$Reply$value$($332,$333,$334);var $327 = $335;break;};var $320 = $327;break;};return $320;};
 const Kind$Parser$init = x0=>x1=>Kind$Parser$init$(x0,x1);function Parser$many1$(_parser$2,_idx$3,_code$4){var self = _parser$2(_idx$3)(_code$4);switch(self._){case 'Parser.Reply.error':var $337=self.idx;var $338=self.code;var $339=self.err;var $340 = Parser$Reply$error$($337,$338,$339);var $336 = $340;break;case 'Parser.Reply.value':var $341=self.idx;var $342=self.code;var $343=self.val;var self = Parser$many$(_parser$2)($341)($342);switch(self._){case 'Parser.Reply.error':var $345=self.idx;var $346=self.code;var $347=self.err;var $348 = Parser$Reply$error$($345,$346,$347);var $344 = $348;break;case 'Parser.Reply.value':var $349=self.idx;var $350=self.code;var $351=self.val;var $352 = Parser$Reply$value$($349,$350,List$cons$($343,$351));var $344 = $352;break;};var $336 = $344;break;};return $336;};
 const Parser$many1 = x0=>x1=>x2=>Parser$many1$(x0,x1,x2);function Kind$Name$is_letter$(_chr$1){var self = U16$btw$(65,_chr$1,90);if (self) {var $354 = Bool$true;var $353 = $354;} else {var self = U16$btw$(97,_chr$1,122);if (self) {var $356 = Bool$true;var $355 = $356;} else {var self = U16$btw$(48,_chr$1,57);if (self) {var $358 = Bool$true;var $357 = $358;} else {var self = (46===_chr$1);if (self) {var $360 = Bool$true;var $359 = $360;} else {var self = (95===_chr$1);if (self) {var $362 = Bool$true;var $361 = $362;} else {var self = (94===_chr$1);if (self) {var $364 = Bool$true;var $363 = $364;} else {var $365 = Bool$false;var $363 = $365;};var $361 = $363;};var $359 = $361;};var $357 = $359;};var $355 = $357;};var $353 = $355;};return $353;};
 const Kind$Name$is_letter = x0=>Kind$Name$is_letter$(x0);function Kind$Parser$letter$(_idx$1,_code$2){var self = _code$2;if (self.length===0) {var $367 = Parser$Reply$error$(_idx$1,_code$2,"Unexpected eof.");var $366 = $367;} else {var $368=self.charCodeAt(0);var $369=self.slice(1);var self = Kind$Name$is_letter$($368);if (self) {var $371 = Parser$Reply$value$(Nat$succ$(_idx$1),$369,$368);var $370 = $371;} else {var $372 = Parser$Reply$error$(_idx$1,_code$2,"Expected letter.");var $370 = $372;};var $366 = $370;};return $366;};
 const Kind$Parser$letter = x0=>x1=>Kind$Parser$letter$(x0,x1);function List$fold$(_list$2,_nil$4,_cons$5){var self = _list$2;switch(self._){case 'List.cons':var $374=self.head;var $375=self.tail;var $376 = _cons$5($374)(List$fold$($375,_nil$4,_cons$5));var $373 = $376;break;case 'List.nil':var $377 = _nil$4;var $373 = $377;break;};return $373;};
 const List$fold = x0=>x1=>x2=>List$fold$(x0,x1,x2);function Kind$Parser$name1$(_idx$1,_code$2){var self = Kind$Parser$spaces(_idx$1)(_code$2);switch(self._){case 'Parser.Reply.error':var $379=self.idx;var $380=self.code;var $381=self.err;var $382 = Parser$Reply$error$($379,$380,$381);var $378 = $382;break;case 'Parser.Reply.value':var $383=self.idx;var $384=self.code;var self = Parser$many1$(Kind$Parser$letter,$383,$384);switch(self._){case 'Parser.Reply.error':var $386=self.idx;var $387=self.code;var $388=self.err;var $389 = Parser$Reply$error$($386,$387,$388);var $385 = $389;break;case 'Parser.Reply.value':var $390=self.idx;var $391=self.code;var $392=self.val;var $393 = Parser$Reply$value$($390,$391,List$fold$($392,String$nil,String$cons));var $385 = $393;break;};var $378 = $385;break;};return $378;};
 const Kind$Parser$name1 = x0=>x1=>Kind$Parser$name1$(x0,x1);function Kind$Parser$text$(_text$1,_idx$2,_code$3){var self = Kind$Parser$spaces(_idx$2)(_code$3);switch(self._){case 'Parser.Reply.error':var $395=self.idx;var $396=self.code;var $397=self.err;var $398 = Parser$Reply$error$($395,$396,$397);var $394 = $398;break;case 'Parser.Reply.value':var $399=self.idx;var $400=self.code;var $401 = Parser$text$(_text$1,$399,$400);var $394 = $401;break;};return $394;};
 const Kind$Parser$text = x0=>x1=>x2=>Kind$Parser$text$(x0,x1,x2);function Parser$until1$(_cond$2,_parser$3,_idx$4,_code$5){var self = _parser$3(_idx$4)(_code$5);switch(self._){case 'Parser.Reply.error':var $403=self.idx;var $404=self.code;var $405=self.err;var $406 = Parser$Reply$error$($403,$404,$405);var $402 = $406;break;case 'Parser.Reply.value':var $407=self.idx;var $408=self.code;var $409=self.val;var self = Parser$until$(_cond$2,_parser$3)($407)($408);switch(self._){case 'Parser.Reply.error':var $411=self.idx;var $412=self.code;var $413=self.err;var $414 = Parser$Reply$error$($411,$412,$413);var $410 = $414;break;case 'Parser.Reply.value':var $415=self.idx;var $416=self.code;var $417=self.val;var $418 = Parser$Reply$value$($415,$416,List$cons$($409,$417));var $410 = $418;break;};var $402 = $410;break;};return $402;};
 const Parser$until1 = x0=>x1=>x2=>x3=>Parser$until1$(x0,x1,x2,x3);function Pair$(_A$1,_B$2){var $419 = null;return $419;};
 const Pair = x0=>x1=>Pair$(x0,x1);function Parser$maybe$(_parse$2,_idx$3,_code$4){var self = _parse$2(_idx$3)(_code$4);switch(self._){case 'Parser.Reply.value':var $421=self.idx;var $422=self.code;var $423=self.val;var $424 = Parser$Reply$value$($421,$422,Maybe$some$($423));var $420 = $424;break;case 'Parser.Reply.error':var $425 = Parser$Reply$value$(_idx$3,_code$4,Maybe$none);var $420 = $425;break;};return $420;};
 const Parser$maybe = x0=>x1=>x2=>Parser$maybe$(x0,x1,x2);function Kind$Parser$item$(_parser$2,_idx$3,_code$4){var self = Kind$Parser$spaces(_idx$3)(_code$4);switch(self._){case 'Parser.Reply.error':var $427=self.idx;var $428=self.code;var $429=self.err;var $430 = Parser$Reply$error$($427,$428,$429);var $426 = $430;break;case 'Parser.Reply.value':var $431=self.idx;var $432=self.code;var self = _parser$2($431)($432);switch(self._){case 'Parser.Reply.error':var $434=self.idx;var $435=self.code;var $436=self.err;var $437 = Parser$Reply$error$($434,$435,$436);var $433 = $437;break;case 'Parser.Reply.value':var $438=self.idx;var $439=self.code;var $440=self.val;var self = Parser$maybe$(Kind$Parser$text(","),$438,$439);switch(self._){case 'Parser.Reply.error':var $442=self.idx;var $443=self.code;var $444=self.err;var $445 = Parser$Reply$error$($442,$443,$444);var $441 = $445;break;case 'Parser.Reply.value':var $446=self.idx;var $447=self.code;var $448 = Parser$Reply$value$($446,$447,$440);var $441 = $448;break;};var $433 = $441;break;};var $426 = $433;break;};return $426;};
 const Kind$Parser$item = x0=>x1=>x2=>Kind$Parser$item$(x0,x1,x2);function Kind$Parser$name$(_idx$1,_code$2){var self = Kind$Parser$spaces(_idx$1)(_code$2);switch(self._){case 'Parser.Reply.error':var $450=self.idx;var $451=self.code;var $452=self.err;var $453 = Parser$Reply$error$($450,$451,$452);var $449 = $453;break;case 'Parser.Reply.value':var $454=self.idx;var $455=self.code;var self = Parser$many$(Kind$Parser$letter)($454)($455);switch(self._){case 'Parser.Reply.error':var $457=self.idx;var $458=self.code;var $459=self.err;var $460 = Parser$Reply$error$($457,$458,$459);var $456 = $460;break;case 'Parser.Reply.value':var $461=self.idx;var $462=self.code;var $463=self.val;var $464 = Parser$Reply$value$($461,$462,List$fold$($463,String$nil,String$cons));var $456 = $464;break;};var $449 = $456;break;};return $449;};
 const Kind$Parser$name = x0=>x1=>Kind$Parser$name$(x0,x1);function Kind$Term$all$(_eras$1,_self$2,_name$3,_xtyp$4,_body$5){var $465 = ({_:'Kind.Term.all','eras':_eras$1,'self':_self$2,'name':_name$3,'xtyp':_xtyp$4,'body':_body$5});return $465;};
 const Kind$Term$all = x0=>x1=>x2=>x3=>x4=>Kind$Term$all$(x0,x1,x2,x3,x4);function Pair$new$(_fst$3,_snd$4){var $466 = ({_:'Pair.new','fst':_fst$3,'snd':_snd$4});return $466;};
 const Pair$new = x0=>x1=>Pair$new$(x0,x1);function Kind$Parser$stop$(_from$1,_idx$2,_code$3){var self = Parser$get_index$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $468=self.idx;var $469=self.code;var $470=self.err;var $471 = Parser$Reply$error$($468,$469,$470);var $467 = $471;break;case 'Parser.Reply.value':var $472=self.idx;var $473=self.code;var $474=self.val;var _orig$7 = Pair$new$(_from$1,$474);var $475 = Parser$Reply$value$($472,$473,_orig$7);var $467 = $475;break;};return $467;};
 const Kind$Parser$stop = x0=>x1=>x2=>Kind$Parser$stop$(x0,x1,x2);function Kind$Term$ori$(_orig$1,_expr$2){var $476 = ({_:'Kind.Term.ori','orig':_orig$1,'expr':_expr$2});return $476;};
 const Kind$Term$ori = x0=>x1=>Kind$Term$ori$(x0,x1);function Kind$Parser$forall$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $478=self.idx;var $479=self.code;var $480=self.err;var $481 = Parser$Reply$error$($478,$479,$480);var $477 = $481;break;case 'Parser.Reply.value':var $482=self.idx;var $483=self.code;var $484=self.val;var self = Kind$Parser$name$($482,$483);switch(self._){case 'Parser.Reply.error':var $486=self.idx;var $487=self.code;var $488=self.err;var $489 = Parser$Reply$error$($486,$487,$488);var $485 = $489;break;case 'Parser.Reply.value':var $490=self.idx;var $491=self.code;var $492=self.val;var self = Kind$Parser$binder$(":",$490,$491);switch(self._){case 'Parser.Reply.error':var $494=self.idx;var $495=self.code;var $496=self.err;var $497 = Parser$Reply$error$($494,$495,$496);var $493 = $497;break;case 'Parser.Reply.value':var $498=self.idx;var $499=self.code;var $500=self.val;var self = Parser$maybe$(Kind$Parser$text("->"),$498,$499);switch(self._){case 'Parser.Reply.error':var $502=self.idx;var $503=self.code;var $504=self.err;var $505 = Parser$Reply$error$($502,$503,$504);var $501 = $505;break;case 'Parser.Reply.value':var $506=self.idx;var $507=self.code;var self = Kind$Parser$term$($506,$507);switch(self._){case 'Parser.Reply.error':var $509=self.idx;var $510=self.code;var $511=self.err;var $512 = Parser$Reply$error$($509,$510,$511);var $508 = $512;break;case 'Parser.Reply.value':var $513=self.idx;var $514=self.code;var $515=self.val;var _term$18 = List$fold$($500,$515,(_x$18=>_t$19=>{var self = _x$18;switch(self._){case 'Kind.Binder.new':var $518=self.eras;var $519=self.name;var $520=self.term;var $521 = Kind$Term$all$($518,"",$519,$520,(_s$23=>_x$24=>{var $522 = _t$19;return $522;}));var $517 = $521;break;};return $517;}));var self = Kind$Parser$stop$($484,$513,$514);switch(self._){case 'Parser.Reply.error':var $523=self.idx;var $524=self.code;var $525=self.err;var $526 = Parser$Reply$error$($523,$524,$525);var $516 = $526;break;case 'Parser.Reply.value':var $527=self.idx;var $528=self.code;var $529=self.val;var $530 = Parser$Reply$value$($527,$528,(()=>{var self = _term$18;switch(self._){case 'Kind.Term.all':var $531=self.eras;var $532=self.name;var $533=self.xtyp;var $534=self.body;var $535 = Kind$Term$ori$($529,Kind$Term$all$($531,$492,$532,$533,$534));return $535;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $536 = _term$18;return $536;};})());var $516 = $530;break;};var $508 = $516;break;};var $501 = $508;break;};var $493 = $501;break;};var $485 = $493;break;};var $477 = $485;break;};return $477;};
 const Kind$Parser$forall = x0=>x1=>Kind$Parser$forall$(x0,x1);function Kind$Term$lam$(_name$1,_body$2){var $537 = ({_:'Kind.Term.lam','name':_name$1,'body':_body$2});return $537;};
 const Kind$Term$lam = x0=>x1=>Kind$Term$lam$(x0,x1);function Kind$Parser$make_lambda$(_names$1,_body$2){var self = _names$1;switch(self._){case 'List.cons':var $539=self.head;var $540=self.tail;var $541 = Kind$Term$lam$($539,(_x$5=>{var $542 = Kind$Parser$make_lambda$($540,_body$2);return $542;}));var $538 = $541;break;case 'List.nil':var $543 = _body$2;var $538 = $543;break;};return $538;};
 const Kind$Parser$make_lambda = x0=>x1=>Kind$Parser$make_lambda$(x0,x1);function Kind$Parser$lambda$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $545=self.idx;var $546=self.code;var $547=self.err;var $548 = Parser$Reply$error$($545,$546,$547);var $544 = $548;break;case 'Parser.Reply.value':var $549=self.idx;var $550=self.code;var $551=self.val;var self = Kind$Parser$text$("(",$549,$550);switch(self._){case 'Parser.Reply.error':var $553=self.idx;var $554=self.code;var $555=self.err;var $556 = Parser$Reply$error$($553,$554,$555);var $552 = $556;break;case 'Parser.Reply.value':var $557=self.idx;var $558=self.code;var self = Parser$until1$(Kind$Parser$text(")"),Kind$Parser$item(Kind$Parser$name1),$557,$558);switch(self._){case 'Parser.Reply.error':var $560=self.idx;var $561=self.code;var $562=self.err;var $563 = Parser$Reply$error$($560,$561,$562);var $559 = $563;break;case 'Parser.Reply.value':var $564=self.idx;var $565=self.code;var $566=self.val;var self = Kind$Parser$term$($564,$565);switch(self._){case 'Parser.Reply.error':var $568=self.idx;var $569=self.code;var $570=self.err;var $571 = Parser$Reply$error$($568,$569,$570);var $567 = $571;break;case 'Parser.Reply.value':var $572=self.idx;var $573=self.code;var $574=self.val;var self = Kind$Parser$stop$($551,$572,$573);switch(self._){case 'Parser.Reply.error':var $576=self.idx;var $577=self.code;var $578=self.err;var $579 = Parser$Reply$error$($576,$577,$578);var $575 = $579;break;case 'Parser.Reply.value':var $580=self.idx;var $581=self.code;var $582=self.val;var _expr$18 = Kind$Parser$make_lambda$($566,$574);var $583 = Parser$Reply$value$($580,$581,Kind$Term$ori$($582,_expr$18));var $575 = $583;break;};var $567 = $575;break;};var $559 = $567;break;};var $552 = $559;break;};var $544 = $552;break;};return $544;};
 const Kind$Parser$lambda = x0=>x1=>Kind$Parser$lambda$(x0,x1);function Kind$Parser$lambda$erased$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $585=self.idx;var $586=self.code;var $587=self.err;var $588 = Parser$Reply$error$($585,$586,$587);var $584 = $588;break;case 'Parser.Reply.value':var $589=self.idx;var $590=self.code;var $591=self.val;var self = Kind$Parser$text$("<",$589,$590);switch(self._){case 'Parser.Reply.error':var $593=self.idx;var $594=self.code;var $595=self.err;var $596 = Parser$Reply$error$($593,$594,$595);var $592 = $596;break;case 'Parser.Reply.value':var $597=self.idx;var $598=self.code;var self = Parser$until1$(Kind$Parser$text(">"),Kind$Parser$item(Kind$Parser$name1),$597,$598);switch(self._){case 'Parser.Reply.error':var $600=self.idx;var $601=self.code;var $602=self.err;var $603 = Parser$Reply$error$($600,$601,$602);var $599 = $603;break;case 'Parser.Reply.value':var $604=self.idx;var $605=self.code;var $606=self.val;var self = Kind$Parser$term$($604,$605);switch(self._){case 'Parser.Reply.error':var $608=self.idx;var $609=self.code;var $610=self.err;var $611 = Parser$Reply$error$($608,$609,$610);var $607 = $611;break;case 'Parser.Reply.value':var $612=self.idx;var $613=self.code;var $614=self.val;var self = Kind$Parser$stop$($591,$612,$613);switch(self._){case 'Parser.Reply.error':var $616=self.idx;var $617=self.code;var $618=self.err;var $619 = Parser$Reply$error$($616,$617,$618);var $615 = $619;break;case 'Parser.Reply.value':var $620=self.idx;var $621=self.code;var $622=self.val;var _expr$18 = Kind$Parser$make_lambda$($606,$614);var $623 = Parser$Reply$value$($620,$621,Kind$Term$ori$($622,_expr$18));var $615 = $623;break;};var $607 = $615;break;};var $599 = $607;break;};var $592 = $599;break;};var $584 = $592;break;};return $584;};
 const Kind$Parser$lambda$erased = x0=>x1=>Kind$Parser$lambda$erased$(x0,x1);function Kind$Parser$lambda$nameless$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $625=self.idx;var $626=self.code;var $627=self.err;var $628 = Parser$Reply$error$($625,$626,$627);var $624 = $628;break;case 'Parser.Reply.value':var $629=self.idx;var $630=self.code;var $631=self.val;var self = Kind$Parser$text$("()",$629,$630);switch(self._){case 'Parser.Reply.error':var $633=self.idx;var $634=self.code;var $635=self.err;var $636 = Parser$Reply$error$($633,$634,$635);var $632 = $636;break;case 'Parser.Reply.value':var $637=self.idx;var $638=self.code;var self = Kind$Parser$term$($637,$638);switch(self._){case 'Parser.Reply.error':var $640=self.idx;var $641=self.code;var $642=self.err;var $643 = Parser$Reply$error$($640,$641,$642);var $639 = $643;break;case 'Parser.Reply.value':var $644=self.idx;var $645=self.code;var $646=self.val;var self = Kind$Parser$stop$($631,$644,$645);switch(self._){case 'Parser.Reply.error':var $648=self.idx;var $649=self.code;var $650=self.err;var $651 = Parser$Reply$error$($648,$649,$650);var $647 = $651;break;case 'Parser.Reply.value':var $652=self.idx;var $653=self.code;var $654=self.val;var _expr$15 = Kind$Term$lam$("",(_x$15=>{var $656 = $646;return $656;}));var $655 = Parser$Reply$value$($652,$653,Kind$Term$ori$($654,_expr$15));var $647 = $655;break;};var $639 = $647;break;};var $632 = $639;break;};var $624 = $632;break;};return $624;};
 const Kind$Parser$lambda$nameless = x0=>x1=>Kind$Parser$lambda$nameless$(x0,x1);function Kind$Parser$parenthesis$(_idx$1,_code$2){var self = Kind$Parser$text$("(",_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $658=self.idx;var $659=self.code;var $660=self.err;var $661 = Parser$Reply$error$($658,$659,$660);var $657 = $661;break;case 'Parser.Reply.value':var $662=self.idx;var $663=self.code;var self = Kind$Parser$term$($662,$663);switch(self._){case 'Parser.Reply.error':var $665=self.idx;var $666=self.code;var $667=self.err;var $668 = Parser$Reply$error$($665,$666,$667);var $664 = $668;break;case 'Parser.Reply.value':var $669=self.idx;var $670=self.code;var $671=self.val;var self = Kind$Parser$text$(")",$669,$670);switch(self._){case 'Parser.Reply.error':var $673=self.idx;var $674=self.code;var $675=self.err;var $676 = Parser$Reply$error$($673,$674,$675);var $672 = $676;break;case 'Parser.Reply.value':var $677=self.idx;var $678=self.code;var $679 = Parser$Reply$value$($677,$678,$671);var $672 = $679;break;};var $664 = $672;break;};var $657 = $664;break;};return $657;};
 const Kind$Parser$parenthesis = x0=>x1=>Kind$Parser$parenthesis$(x0,x1);function Kind$Term$ref$(_name$1){var $680 = ({_:'Kind.Term.ref','name':_name$1});return $680;};
 const Kind$Term$ref = x0=>Kind$Term$ref$(x0);function Kind$Term$app$(_func$1,_argm$2){var $681 = ({_:'Kind.Term.app','func':_func$1,'argm':_argm$2});return $681;};
 const Kind$Term$app = x0=>x1=>Kind$Term$app$(x0,x1);function Kind$Term$hol$(_path$1){var $682 = ({_:'Kind.Term.hol','path':_path$1});return $682;};
 const Kind$Term$hol = x0=>Kind$Term$hol$(x0);function Kind$Term$let$(_name$1,_expr$2,_body$3){var $683 = ({_:'Kind.Term.let','name':_name$1,'expr':_expr$2,'body':_body$3});return $683;};
 const Kind$Term$let = x0=>x1=>x2=>Kind$Term$let$(x0,x1,x2);function Kind$Parser$letforrange$u32$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $685=self.idx;var $686=self.code;var $687=self.err;var $688 = Parser$Reply$error$($685,$686,$687);var $684 = $688;break;case 'Parser.Reply.value':var $689=self.idx;var $690=self.code;var $691=self.val;var self = Kind$Parser$text$("let ",$689,$690);switch(self._){case 'Parser.Reply.error':var $693=self.idx;var $694=self.code;var $695=self.err;var $696 = Parser$Reply$error$($693,$694,$695);var $692 = $696;break;case 'Parser.Reply.value':var $697=self.idx;var $698=self.code;var self = Kind$Parser$name1$($697,$698);switch(self._){case 'Parser.Reply.error':var $700=self.idx;var $701=self.code;var $702=self.err;var $703 = Parser$Reply$error$($700,$701,$702);var $699 = $703;break;case 'Parser.Reply.value':var $704=self.idx;var $705=self.code;var $706=self.val;var self = Kind$Parser$text$("=",$704,$705);switch(self._){case 'Parser.Reply.error':var $708=self.idx;var $709=self.code;var $710=self.err;var $711 = Parser$Reply$error$($708,$709,$710);var $707 = $711;break;case 'Parser.Reply.value':var $712=self.idx;var $713=self.code;var self = Kind$Parser$text$("for ",$712,$713);switch(self._){case 'Parser.Reply.error':var $715=self.idx;var $716=self.code;var $717=self.err;var $718 = Parser$Reply$error$($715,$716,$717);var $714 = $718;break;case 'Parser.Reply.value':var $719=self.idx;var $720=self.code;var self = Kind$Parser$name1$($719,$720);switch(self._){case 'Parser.Reply.error':var $722=self.idx;var $723=self.code;var $724=self.err;var $725 = Parser$Reply$error$($722,$723,$724);var $721 = $725;break;case 'Parser.Reply.value':var $726=self.idx;var $727=self.code;var $728=self.val;var self = Kind$Parser$text$(":",$726,$727);switch(self._){case 'Parser.Reply.error':var $730=self.idx;var $731=self.code;var $732=self.err;var $733 = Parser$Reply$error$($730,$731,$732);var $729 = $733;break;case 'Parser.Reply.value':var $734=self.idx;var $735=self.code;var self = Kind$Parser$text$("U32",$734,$735);switch(self._){case 'Parser.Reply.error':var $737=self.idx;var $738=self.code;var $739=self.err;var $740 = Parser$Reply$error$($737,$738,$739);var $736 = $740;break;case 'Parser.Reply.value':var $741=self.idx;var $742=self.code;var self = Kind$Parser$text$("from",$741,$742);switch(self._){case 'Parser.Reply.error':var $744=self.idx;var $745=self.code;var $746=self.err;var $747 = Parser$Reply$error$($744,$745,$746);var $743 = $747;break;case 'Parser.Reply.value':var $748=self.idx;var $749=self.code;var self = Kind$Parser$term$($748,$749);switch(self._){case 'Parser.Reply.error':var $751=self.idx;var $752=self.code;var $753=self.err;var $754 = Parser$Reply$error$($751,$752,$753);var $750 = $754;break;case 'Parser.Reply.value':var $755=self.idx;var $756=self.code;var $757=self.val;var self = Kind$Parser$text$("to",$755,$756);switch(self._){case 'Parser.Reply.error':var $759=self.idx;var $760=self.code;var $761=self.err;var $762 = Parser$Reply$error$($759,$760,$761);var $758 = $762;break;case 'Parser.Reply.value':var $763=self.idx;var $764=self.code;var self = Kind$Parser$term$($763,$764);switch(self._){case 'Parser.Reply.error':var $766=self.idx;var $767=self.code;var $768=self.err;var $769 = Parser$Reply$error$($766,$767,$768);var $765 = $769;break;case 'Parser.Reply.value':var $770=self.idx;var $771=self.code;var $772=self.val;var self = Kind$Parser$text$(":",$770,$771);switch(self._){case 'Parser.Reply.error':var $774=self.idx;var $775=self.code;var $776=self.err;var $777 = Parser$Reply$error$($774,$775,$776);var $773 = $777;break;case 'Parser.Reply.value':var $778=self.idx;var $779=self.code;var self = Kind$Parser$term$($778,$779);switch(self._){case 'Parser.Reply.error':var $781=self.idx;var $782=self.code;var $783=self.err;var $784 = Parser$Reply$error$($781,$782,$783);var $780 = $784;break;case 'Parser.Reply.value':var $785=self.idx;var $786=self.code;var $787=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$785,$786);switch(self._){case 'Parser.Reply.error':var $789=self.idx;var $790=self.code;var $791=self.err;var $792 = Parser$Reply$error$($789,$790,$791);var $788 = $792;break;case 'Parser.Reply.value':var $793=self.idx;var $794=self.code;var self = Kind$Parser$term$($793,$794);switch(self._){case 'Parser.Reply.error':var $796=self.idx;var $797=self.code;var $798=self.err;var $799 = Parser$Reply$error$($796,$797,$798);var $795 = $799;break;case 'Parser.Reply.value':var $800=self.idx;var $801=self.code;var $802=self.val;var self = Kind$Parser$stop$($691,$800,$801);switch(self._){case 'Parser.Reply.error':var $804=self.idx;var $805=self.code;var $806=self.err;var $807 = Parser$Reply$error$($804,$805,$806);var $803 = $807;break;case 'Parser.Reply.value':var $808=self.idx;var $809=self.code;var $810=self.val;var _term$54 = Kind$Term$ref$("U32.for");var _term$55 = Kind$Term$app$(_term$54,Kind$Term$hol$(Bits$e));var _term$56 = Kind$Term$app$(_term$55,Kind$Term$ref$($706));var _term$57 = Kind$Term$app$(_term$56,$757);var _term$58 = Kind$Term$app$(_term$57,$772);var _lamb$59 = Kind$Term$lam$($728,(_e$59=>{var $812 = Kind$Term$lam$($706,(_s$60=>{var $813 = $787;return $813;}));return $812;}));var _term$60 = Kind$Term$app$(_term$58,_lamb$59);var _term$61 = Kind$Term$let$($706,_term$60,(_x$61=>{var $814 = $802;return $814;}));var $811 = Parser$Reply$value$($808,$809,Kind$Term$ori$($810,_term$61));var $803 = $811;break;};var $795 = $803;break;};var $788 = $795;break;};var $780 = $788;break;};var $773 = $780;break;};var $765 = $773;break;};var $758 = $765;break;};var $750 = $758;break;};var $743 = $750;break;};var $736 = $743;break;};var $729 = $736;break;};var $721 = $729;break;};var $714 = $721;break;};var $707 = $714;break;};var $699 = $707;break;};var $692 = $699;break;};var $684 = $692;break;};return $684;};
 const Kind$Parser$letforrange$u32 = x0=>x1=>Kind$Parser$letforrange$u32$(x0,x1);function Kind$Parser$letforrange$nat$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $816=self.idx;var $817=self.code;var $818=self.err;var $819 = Parser$Reply$error$($816,$817,$818);var $815 = $819;break;case 'Parser.Reply.value':var $820=self.idx;var $821=self.code;var $822=self.val;var self = Kind$Parser$text$("let ",$820,$821);switch(self._){case 'Parser.Reply.error':var $824=self.idx;var $825=self.code;var $826=self.err;var $827 = Parser$Reply$error$($824,$825,$826);var $823 = $827;break;case 'Parser.Reply.value':var $828=self.idx;var $829=self.code;var self = Kind$Parser$name1$($828,$829);switch(self._){case 'Parser.Reply.error':var $831=self.idx;var $832=self.code;var $833=self.err;var $834 = Parser$Reply$error$($831,$832,$833);var $830 = $834;break;case 'Parser.Reply.value':var $835=self.idx;var $836=self.code;var $837=self.val;var self = Kind$Parser$text$("=",$835,$836);switch(self._){case 'Parser.Reply.error':var $839=self.idx;var $840=self.code;var $841=self.err;var $842 = Parser$Reply$error$($839,$840,$841);var $838 = $842;break;case 'Parser.Reply.value':var $843=self.idx;var $844=self.code;var self = Kind$Parser$text$("for ",$843,$844);switch(self._){case 'Parser.Reply.error':var $846=self.idx;var $847=self.code;var $848=self.err;var $849 = Parser$Reply$error$($846,$847,$848);var $845 = $849;break;case 'Parser.Reply.value':var $850=self.idx;var $851=self.code;var self = Kind$Parser$name1$($850,$851);switch(self._){case 'Parser.Reply.error':var $853=self.idx;var $854=self.code;var $855=self.err;var $856 = Parser$Reply$error$($853,$854,$855);var $852 = $856;break;case 'Parser.Reply.value':var $857=self.idx;var $858=self.code;var $859=self.val;var self = Kind$Parser$text$("from",$857,$858);switch(self._){case 'Parser.Reply.error':var $861=self.idx;var $862=self.code;var $863=self.err;var $864 = Parser$Reply$error$($861,$862,$863);var $860 = $864;break;case 'Parser.Reply.value':var $865=self.idx;var $866=self.code;var self = Kind$Parser$term$($865,$866);switch(self._){case 'Parser.Reply.error':var $868=self.idx;var $869=self.code;var $870=self.err;var $871 = Parser$Reply$error$($868,$869,$870);var $867 = $871;break;case 'Parser.Reply.value':var $872=self.idx;var $873=self.code;var $874=self.val;var self = Kind$Parser$text$("to",$872,$873);switch(self._){case 'Parser.Reply.error':var $876=self.idx;var $877=self.code;var $878=self.err;var $879 = Parser$Reply$error$($876,$877,$878);var $875 = $879;break;case 'Parser.Reply.value':var $880=self.idx;var $881=self.code;var self = Kind$Parser$term$($880,$881);switch(self._){case 'Parser.Reply.error':var $883=self.idx;var $884=self.code;var $885=self.err;var $886 = Parser$Reply$error$($883,$884,$885);var $882 = $886;break;case 'Parser.Reply.value':var $887=self.idx;var $888=self.code;var $889=self.val;var self = Kind$Parser$text$(":",$887,$888);switch(self._){case 'Parser.Reply.error':var $891=self.idx;var $892=self.code;var $893=self.err;var $894 = Parser$Reply$error$($891,$892,$893);var $890 = $894;break;case 'Parser.Reply.value':var $895=self.idx;var $896=self.code;var self = Kind$Parser$term$($895,$896);switch(self._){case 'Parser.Reply.error':var $898=self.idx;var $899=self.code;var $900=self.err;var $901 = Parser$Reply$error$($898,$899,$900);var $897 = $901;break;case 'Parser.Reply.value':var $902=self.idx;var $903=self.code;var $904=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$902,$903);switch(self._){case 'Parser.Reply.error':var $906=self.idx;var $907=self.code;var $908=self.err;var $909 = Parser$Reply$error$($906,$907,$908);var $905 = $909;break;case 'Parser.Reply.value':var $910=self.idx;var $911=self.code;var self = Kind$Parser$term$($910,$911);switch(self._){case 'Parser.Reply.error':var $913=self.idx;var $914=self.code;var $915=self.err;var $916 = Parser$Reply$error$($913,$914,$915);var $912 = $916;break;case 'Parser.Reply.value':var $917=self.idx;var $918=self.code;var $919=self.val;var self = Kind$Parser$stop$($822,$917,$918);switch(self._){case 'Parser.Reply.error':var $921=self.idx;var $922=self.code;var $923=self.err;var $924 = Parser$Reply$error$($921,$922,$923);var $920 = $924;break;case 'Parser.Reply.value':var $925=self.idx;var $926=self.code;var $927=self.val;var _term$48 = Kind$Term$ref$("Nat.for");var _term$49 = Kind$Term$app$(_term$48,Kind$Term$hol$(Bits$e));var _term$50 = Kind$Term$app$(_term$49,Kind$Term$ref$($837));var _term$51 = Kind$Term$app$(_term$50,$874);var _term$52 = Kind$Term$app$(_term$51,$889);var _lamb$53 = Kind$Term$lam$($859,(_e$53=>{var $929 = Kind$Term$lam$($837,(_s$54=>{var $930 = $904;return $930;}));return $929;}));var _term$54 = Kind$Term$app$(_term$52,_lamb$53);var _term$55 = Kind$Term$let$($837,_term$54,(_x$55=>{var $931 = $919;return $931;}));var $928 = Parser$Reply$value$($925,$926,Kind$Term$ori$($927,_term$55));var $920 = $928;break;};var $912 = $920;break;};var $905 = $912;break;};var $897 = $905;break;};var $890 = $897;break;};var $882 = $890;break;};var $875 = $882;break;};var $867 = $875;break;};var $860 = $867;break;};var $852 = $860;break;};var $845 = $852;break;};var $838 = $845;break;};var $830 = $838;break;};var $823 = $830;break;};var $815 = $823;break;};return $815;};
 const Kind$Parser$letforrange$nat = x0=>x1=>Kind$Parser$letforrange$nat$(x0,x1);function Kind$Parser$letforin$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $933=self.idx;var $934=self.code;var $935=self.err;var $936 = Parser$Reply$error$($933,$934,$935);var $932 = $936;break;case 'Parser.Reply.value':var $937=self.idx;var $938=self.code;var $939=self.val;var self = Kind$Parser$text$("let ",$937,$938);switch(self._){case 'Parser.Reply.error':var $941=self.idx;var $942=self.code;var $943=self.err;var $944 = Parser$Reply$error$($941,$942,$943);var $940 = $944;break;case 'Parser.Reply.value':var $945=self.idx;var $946=self.code;var self = Kind$Parser$name1$($945,$946);switch(self._){case 'Parser.Reply.error':var $948=self.idx;var $949=self.code;var $950=self.err;var $951 = Parser$Reply$error$($948,$949,$950);var $947 = $951;break;case 'Parser.Reply.value':var $952=self.idx;var $953=self.code;var $954=self.val;var self = Kind$Parser$text$("=",$952,$953);switch(self._){case 'Parser.Reply.error':var $956=self.idx;var $957=self.code;var $958=self.err;var $959 = Parser$Reply$error$($956,$957,$958);var $955 = $959;break;case 'Parser.Reply.value':var $960=self.idx;var $961=self.code;var self = Kind$Parser$text$("for ",$960,$961);switch(self._){case 'Parser.Reply.error':var $963=self.idx;var $964=self.code;var $965=self.err;var $966 = Parser$Reply$error$($963,$964,$965);var $962 = $966;break;case 'Parser.Reply.value':var $967=self.idx;var $968=self.code;var self = Kind$Parser$name1$($967,$968);switch(self._){case 'Parser.Reply.error':var $970=self.idx;var $971=self.code;var $972=self.err;var $973 = Parser$Reply$error$($970,$971,$972);var $969 = $973;break;case 'Parser.Reply.value':var $974=self.idx;var $975=self.code;var $976=self.val;var self = Kind$Parser$text$("in",$974,$975);switch(self._){case 'Parser.Reply.error':var $978=self.idx;var $979=self.code;var $980=self.err;var $981 = Parser$Reply$error$($978,$979,$980);var $977 = $981;break;case 'Parser.Reply.value':var $982=self.idx;var $983=self.code;var self = Kind$Parser$term$($982,$983);switch(self._){case 'Parser.Reply.error':var $985=self.idx;var $986=self.code;var $987=self.err;var $988 = Parser$Reply$error$($985,$986,$987);var $984 = $988;break;case 'Parser.Reply.value':var $989=self.idx;var $990=self.code;var $991=self.val;var self = Kind$Parser$text$(":",$989,$990);switch(self._){case 'Parser.Reply.error':var $993=self.idx;var $994=self.code;var $995=self.err;var $996 = Parser$Reply$error$($993,$994,$995);var $992 = $996;break;case 'Parser.Reply.value':var $997=self.idx;var $998=self.code;var self = Kind$Parser$term$($997,$998);switch(self._){case 'Parser.Reply.error':var $1000=self.idx;var $1001=self.code;var $1002=self.err;var $1003 = Parser$Reply$error$($1000,$1001,$1002);var $999 = $1003;break;case 'Parser.Reply.value':var $1004=self.idx;var $1005=self.code;var $1006=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$1004,$1005);switch(self._){case 'Parser.Reply.error':var $1008=self.idx;var $1009=self.code;var $1010=self.err;var $1011 = Parser$Reply$error$($1008,$1009,$1010);var $1007 = $1011;break;case 'Parser.Reply.value':var $1012=self.idx;var $1013=self.code;var self = Kind$Parser$term$($1012,$1013);switch(self._){case 'Parser.Reply.error':var $1015=self.idx;var $1016=self.code;var $1017=self.err;var $1018 = Parser$Reply$error$($1015,$1016,$1017);var $1014 = $1018;break;case 'Parser.Reply.value':var $1019=self.idx;var $1020=self.code;var $1021=self.val;var self = Kind$Parser$stop$($939,$1019,$1020);switch(self._){case 'Parser.Reply.error':var $1023=self.idx;var $1024=self.code;var $1025=self.err;var $1026 = Parser$Reply$error$($1023,$1024,$1025);var $1022 = $1026;break;case 'Parser.Reply.value':var $1027=self.idx;var $1028=self.code;var $1029=self.val;var _term$42 = Kind$Term$ref$("List.for");var _term$43 = Kind$Term$app$(_term$42,Kind$Term$hol$(Bits$e));var _term$44 = Kind$Term$app$(_term$43,$991);var _term$45 = Kind$Term$app$(_term$44,Kind$Term$hol$(Bits$e));var _term$46 = Kind$Term$app$(_term$45,Kind$Term$ref$($954));var _lamb$47 = Kind$Term$lam$($976,(_i$47=>{var $1031 = Kind$Term$lam$($954,(_x$48=>{var $1032 = $1006;return $1032;}));return $1031;}));var _term$48 = Kind$Term$app$(_term$46,_lamb$47);var _term$49 = Kind$Term$let$($954,_term$48,(_x$49=>{var $1033 = $1021;return $1033;}));var $1030 = Parser$Reply$value$($1027,$1028,Kind$Term$ori$($1029,_term$49));var $1022 = $1030;break;};var $1014 = $1022;break;};var $1007 = $1014;break;};var $999 = $1007;break;};var $992 = $999;break;};var $984 = $992;break;};var $977 = $984;break;};var $969 = $977;break;};var $962 = $969;break;};var $955 = $962;break;};var $947 = $955;break;};var $940 = $947;break;};var $932 = $940;break;};return $932;};
 const Kind$Parser$letforin = x0=>x1=>Kind$Parser$letforin$(x0,x1);function Kind$Parser$let$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1035=self.idx;var $1036=self.code;var $1037=self.err;var $1038 = Parser$Reply$error$($1035,$1036,$1037);var $1034 = $1038;break;case 'Parser.Reply.value':var $1039=self.idx;var $1040=self.code;var $1041=self.val;var self = Kind$Parser$text$("let ",$1039,$1040);switch(self._){case 'Parser.Reply.error':var $1043=self.idx;var $1044=self.code;var $1045=self.err;var $1046 = Parser$Reply$error$($1043,$1044,$1045);var $1042 = $1046;break;case 'Parser.Reply.value':var $1047=self.idx;var $1048=self.code;var self = Kind$Parser$name$($1047,$1048);switch(self._){case 'Parser.Reply.error':var $1050=self.idx;var $1051=self.code;var $1052=self.err;var $1053 = Parser$Reply$error$($1050,$1051,$1052);var $1049 = $1053;break;case 'Parser.Reply.value':var $1054=self.idx;var $1055=self.code;var $1056=self.val;var self = Kind$Parser$text$("=",$1054,$1055);switch(self._){case 'Parser.Reply.error':var $1058=self.idx;var $1059=self.code;var $1060=self.err;var $1061 = Parser$Reply$error$($1058,$1059,$1060);var $1057 = $1061;break;case 'Parser.Reply.value':var $1062=self.idx;var $1063=self.code;var self = Kind$Parser$term$($1062,$1063);switch(self._){case 'Parser.Reply.error':var $1065=self.idx;var $1066=self.code;var $1067=self.err;var $1068 = Parser$Reply$error$($1065,$1066,$1067);var $1064 = $1068;break;case 'Parser.Reply.value':var $1069=self.idx;var $1070=self.code;var $1071=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$1069,$1070);switch(self._){case 'Parser.Reply.error':var $1073=self.idx;var $1074=self.code;var $1075=self.err;var $1076 = Parser$Reply$error$($1073,$1074,$1075);var $1072 = $1076;break;case 'Parser.Reply.value':var $1077=self.idx;var $1078=self.code;var self = Kind$Parser$term$($1077,$1078);switch(self._){case 'Parser.Reply.error':var $1080=self.idx;var $1081=self.code;var $1082=self.err;var $1083 = Parser$Reply$error$($1080,$1081,$1082);var $1079 = $1083;break;case 'Parser.Reply.value':var $1084=self.idx;var $1085=self.code;var $1086=self.val;var self = Kind$Parser$stop$($1041,$1084,$1085);switch(self._){case 'Parser.Reply.error':var $1088=self.idx;var $1089=self.code;var $1090=self.err;var $1091 = Parser$Reply$error$($1088,$1089,$1090);var $1087 = $1091;break;case 'Parser.Reply.value':var $1092=self.idx;var $1093=self.code;var $1094=self.val;var $1095 = Parser$Reply$value$($1092,$1093,Kind$Term$ori$($1094,Kind$Term$let$($1056,$1071,(_x$27=>{var $1096 = $1086;return $1096;}))));var $1087 = $1095;break;};var $1079 = $1087;break;};var $1072 = $1079;break;};var $1064 = $1072;break;};var $1057 = $1064;break;};var $1049 = $1057;break;};var $1042 = $1049;break;};var $1034 = $1042;break;};return $1034;};
 const Kind$Parser$let = x0=>x1=>Kind$Parser$let$(x0,x1);function Kind$Parser$get$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1098=self.idx;var $1099=self.code;var $1100=self.err;var $1101 = Parser$Reply$error$($1098,$1099,$1100);var $1097 = $1101;break;case 'Parser.Reply.value':var $1102=self.idx;var $1103=self.code;var $1104=self.val;var self = Kind$Parser$text$("let ",$1102,$1103);switch(self._){case 'Parser.Reply.error':var $1106=self.idx;var $1107=self.code;var $1108=self.err;var $1109 = Parser$Reply$error$($1106,$1107,$1108);var $1105 = $1109;break;case 'Parser.Reply.value':var $1110=self.idx;var $1111=self.code;var self = Kind$Parser$text$("{",$1110,$1111);switch(self._){case 'Parser.Reply.error':var $1113=self.idx;var $1114=self.code;var $1115=self.err;var $1116 = Parser$Reply$error$($1113,$1114,$1115);var $1112 = $1116;break;case 'Parser.Reply.value':var $1117=self.idx;var $1118=self.code;var self = Kind$Parser$name$($1117,$1118);switch(self._){case 'Parser.Reply.error':var $1120=self.idx;var $1121=self.code;var $1122=self.err;var $1123 = Parser$Reply$error$($1120,$1121,$1122);var $1119 = $1123;break;case 'Parser.Reply.value':var $1124=self.idx;var $1125=self.code;var $1126=self.val;var self = Kind$Parser$text$(",",$1124,$1125);switch(self._){case 'Parser.Reply.error':var $1128=self.idx;var $1129=self.code;var $1130=self.err;var $1131 = Parser$Reply$error$($1128,$1129,$1130);var $1127 = $1131;break;case 'Parser.Reply.value':var $1132=self.idx;var $1133=self.code;var self = Kind$Parser$name$($1132,$1133);switch(self._){case 'Parser.Reply.error':var $1135=self.idx;var $1136=self.code;var $1137=self.err;var $1138 = Parser$Reply$error$($1135,$1136,$1137);var $1134 = $1138;break;case 'Parser.Reply.value':var $1139=self.idx;var $1140=self.code;var $1141=self.val;var self = Kind$Parser$text$("}",$1139,$1140);switch(self._){case 'Parser.Reply.error':var $1143=self.idx;var $1144=self.code;var $1145=self.err;var $1146 = Parser$Reply$error$($1143,$1144,$1145);var $1142 = $1146;break;case 'Parser.Reply.value':var $1147=self.idx;var $1148=self.code;var self = Kind$Parser$text$("=",$1147,$1148);switch(self._){case 'Parser.Reply.error':var $1150=self.idx;var $1151=self.code;var $1152=self.err;var $1153 = Parser$Reply$error$($1150,$1151,$1152);var $1149 = $1153;break;case 'Parser.Reply.value':var $1154=self.idx;var $1155=self.code;var self = Kind$Parser$term$($1154,$1155);switch(self._){case 'Parser.Reply.error':var $1157=self.idx;var $1158=self.code;var $1159=self.err;var $1160 = Parser$Reply$error$($1157,$1158,$1159);var $1156 = $1160;break;case 'Parser.Reply.value':var $1161=self.idx;var $1162=self.code;var $1163=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$1161,$1162);switch(self._){case 'Parser.Reply.error':var $1165=self.idx;var $1166=self.code;var $1167=self.err;var $1168 = Parser$Reply$error$($1165,$1166,$1167);var $1164 = $1168;break;case 'Parser.Reply.value':var $1169=self.idx;var $1170=self.code;var self = Kind$Parser$term$($1169,$1170);switch(self._){case 'Parser.Reply.error':var $1172=self.idx;var $1173=self.code;var $1174=self.err;var $1175 = Parser$Reply$error$($1172,$1173,$1174);var $1171 = $1175;break;case 'Parser.Reply.value':var $1176=self.idx;var $1177=self.code;var $1178=self.val;var self = Kind$Parser$stop$($1104,$1176,$1177);switch(self._){case 'Parser.Reply.error':var $1180=self.idx;var $1181=self.code;var $1182=self.err;var $1183 = Parser$Reply$error$($1180,$1181,$1182);var $1179 = $1183;break;case 'Parser.Reply.value':var $1184=self.idx;var $1185=self.code;var $1186=self.val;var _term$39 = $1163;var _term$40 = Kind$Term$app$(_term$39,Kind$Term$lam$("x",(_x$40=>{var $1188 = Kind$Term$hol$(Bits$e);return $1188;})));var _term$41 = Kind$Term$app$(_term$40,Kind$Term$lam$($1126,(_x$41=>{var $1189 = Kind$Term$lam$($1141,(_y$42=>{var $1190 = $1178;return $1190;}));return $1189;})));var $1187 = Parser$Reply$value$($1184,$1185,Kind$Term$ori$($1186,_term$41));var $1179 = $1187;break;};var $1171 = $1179;break;};var $1164 = $1171;break;};var $1156 = $1164;break;};var $1149 = $1156;break;};var $1142 = $1149;break;};var $1134 = $1142;break;};var $1127 = $1134;break;};var $1119 = $1127;break;};var $1112 = $1119;break;};var $1105 = $1112;break;};var $1097 = $1105;break;};return $1097;};
 const Kind$Parser$get = x0=>x1=>Kind$Parser$get$(x0,x1);function Kind$Term$def$(_name$1,_expr$2,_body$3){var $1191 = ({_:'Kind.Term.def','name':_name$1,'expr':_expr$2,'body':_body$3});return $1191;};
 const Kind$Term$def = x0=>x1=>x2=>Kind$Term$def$(x0,x1,x2);function Kind$Parser$def$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1193=self.idx;var $1194=self.code;var $1195=self.err;var $1196 = Parser$Reply$error$($1193,$1194,$1195);var $1192 = $1196;break;case 'Parser.Reply.value':var $1197=self.idx;var $1198=self.code;var $1199=self.val;var self = Kind$Parser$text$("def ",$1197,$1198);switch(self._){case 'Parser.Reply.error':var $1201=self.idx;var $1202=self.code;var $1203=self.err;var $1204 = Parser$Reply$error$($1201,$1202,$1203);var $1200 = $1204;break;case 'Parser.Reply.value':var $1205=self.idx;var $1206=self.code;var self = Kind$Parser$name$($1205,$1206);switch(self._){case 'Parser.Reply.error':var $1208=self.idx;var $1209=self.code;var $1210=self.err;var $1211 = Parser$Reply$error$($1208,$1209,$1210);var $1207 = $1211;break;case 'Parser.Reply.value':var $1212=self.idx;var $1213=self.code;var $1214=self.val;var self = Kind$Parser$text$("=",$1212,$1213);switch(self._){case 'Parser.Reply.error':var $1216=self.idx;var $1217=self.code;var $1218=self.err;var $1219 = Parser$Reply$error$($1216,$1217,$1218);var $1215 = $1219;break;case 'Parser.Reply.value':var $1220=self.idx;var $1221=self.code;var self = Kind$Parser$term$($1220,$1221);switch(self._){case 'Parser.Reply.error':var $1223=self.idx;var $1224=self.code;var $1225=self.err;var $1226 = Parser$Reply$error$($1223,$1224,$1225);var $1222 = $1226;break;case 'Parser.Reply.value':var $1227=self.idx;var $1228=self.code;var $1229=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$1227,$1228);switch(self._){case 'Parser.Reply.error':var $1231=self.idx;var $1232=self.code;var $1233=self.err;var $1234 = Parser$Reply$error$($1231,$1232,$1233);var $1230 = $1234;break;case 'Parser.Reply.value':var $1235=self.idx;var $1236=self.code;var self = Kind$Parser$term$($1235,$1236);switch(self._){case 'Parser.Reply.error':var $1238=self.idx;var $1239=self.code;var $1240=self.err;var $1241 = Parser$Reply$error$($1238,$1239,$1240);var $1237 = $1241;break;case 'Parser.Reply.value':var $1242=self.idx;var $1243=self.code;var $1244=self.val;var self = Kind$Parser$stop$($1199,$1242,$1243);switch(self._){case 'Parser.Reply.error':var $1246=self.idx;var $1247=self.code;var $1248=self.err;var $1249 = Parser$Reply$error$($1246,$1247,$1248);var $1245 = $1249;break;case 'Parser.Reply.value':var $1250=self.idx;var $1251=self.code;var $1252=self.val;var $1253 = Parser$Reply$value$($1250,$1251,Kind$Term$ori$($1252,Kind$Term$def$($1214,$1229,(_x$27=>{var $1254 = $1244;return $1254;}))));var $1245 = $1253;break;};var $1237 = $1245;break;};var $1230 = $1237;break;};var $1222 = $1230;break;};var $1215 = $1222;break;};var $1207 = $1215;break;};var $1200 = $1207;break;};var $1192 = $1200;break;};return $1192;};
 const Kind$Parser$def = x0=>x1=>Kind$Parser$def$(x0,x1);function Kind$Parser$goal_rewrite$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1256=self.idx;var $1257=self.code;var $1258=self.err;var $1259 = Parser$Reply$error$($1256,$1257,$1258);var $1255 = $1259;break;case 'Parser.Reply.value':var $1260=self.idx;var $1261=self.code;var $1262=self.val;var self = Kind$Parser$text$("rewrite ",$1260,$1261);switch(self._){case 'Parser.Reply.error':var $1264=self.idx;var $1265=self.code;var $1266=self.err;var $1267 = Parser$Reply$error$($1264,$1265,$1266);var $1263 = $1267;break;case 'Parser.Reply.value':var $1268=self.idx;var $1269=self.code;var self = Kind$Parser$name1$($1268,$1269);switch(self._){case 'Parser.Reply.error':var $1271=self.idx;var $1272=self.code;var $1273=self.err;var $1274 = Parser$Reply$error$($1271,$1272,$1273);var $1270 = $1274;break;case 'Parser.Reply.value':var $1275=self.idx;var $1276=self.code;var $1277=self.val;var self = Kind$Parser$text$("in",$1275,$1276);switch(self._){case 'Parser.Reply.error':var $1279=self.idx;var $1280=self.code;var $1281=self.err;var $1282 = Parser$Reply$error$($1279,$1280,$1281);var $1278 = $1282;break;case 'Parser.Reply.value':var $1283=self.idx;var $1284=self.code;var self = Kind$Parser$term$($1283,$1284);switch(self._){case 'Parser.Reply.error':var $1286=self.idx;var $1287=self.code;var $1288=self.err;var $1289 = Parser$Reply$error$($1286,$1287,$1288);var $1285 = $1289;break;case 'Parser.Reply.value':var $1290=self.idx;var $1291=self.code;var $1292=self.val;var self = Kind$Parser$text$("with",$1290,$1291);switch(self._){case 'Parser.Reply.error':var $1294=self.idx;var $1295=self.code;var $1296=self.err;var $1297 = Parser$Reply$error$($1294,$1295,$1296);var $1293 = $1297;break;case 'Parser.Reply.value':var $1298=self.idx;var $1299=self.code;var self = Kind$Parser$term$($1298,$1299);switch(self._){case 'Parser.Reply.error':var $1301=self.idx;var $1302=self.code;var $1303=self.err;var $1304 = Parser$Reply$error$($1301,$1302,$1303);var $1300 = $1304;break;case 'Parser.Reply.value':var $1305=self.idx;var $1306=self.code;var $1307=self.val;var self = Kind$Parser$term$($1305,$1306);switch(self._){case 'Parser.Reply.error':var $1309=self.idx;var $1310=self.code;var $1311=self.err;var $1312 = Parser$Reply$error$($1309,$1310,$1311);var $1308 = $1312;break;case 'Parser.Reply.value':var $1313=self.idx;var $1314=self.code;var $1315=self.val;var self = Kind$Parser$stop$($1262,$1313,$1314);switch(self._){case 'Parser.Reply.error':var $1317=self.idx;var $1318=self.code;var $1319=self.err;var $1320 = Parser$Reply$error$($1317,$1318,$1319);var $1316 = $1320;break;case 'Parser.Reply.value':var $1321=self.idx;var $1322=self.code;var $1323=self.val;var _moti$30 = Kind$Term$lam$($1277,(_s$30=>{var $1325 = Kind$Term$lam$("",(_x$31=>{var $1326 = $1292;return $1326;}));return $1325;}));var _term$31 = Kind$Term$ref$("Equal.mirror");var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,Kind$Term$hol$(Bits$e));var _term$34 = Kind$Term$app$(_term$33,Kind$Term$hol$(Bits$e));var _term$35 = Kind$Term$app$(_term$34,$1307);var _term$36 = Kind$Term$app$(_term$35,_moti$30);var _term$37 = Kind$Term$app$(_term$36,$1315);var $1324 = Parser$Reply$value$($1321,$1322,Kind$Term$ori$($1323,_term$37));var $1316 = $1324;break;};var $1308 = $1316;break;};var $1300 = $1308;break;};var $1293 = $1300;break;};var $1285 = $1293;break;};var $1278 = $1285;break;};var $1270 = $1278;break;};var $1263 = $1270;break;};var $1255 = $1263;break;};return $1255;};
 const Kind$Parser$goal_rewrite = x0=>x1=>Kind$Parser$goal_rewrite$(x0,x1);function Kind$Parser$if$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1328=self.idx;var $1329=self.code;var $1330=self.err;var $1331 = Parser$Reply$error$($1328,$1329,$1330);var $1327 = $1331;break;case 'Parser.Reply.value':var $1332=self.idx;var $1333=self.code;var $1334=self.val;var self = Kind$Parser$text$("if ",$1332,$1333);switch(self._){case 'Parser.Reply.error':var $1336=self.idx;var $1337=self.code;var $1338=self.err;var $1339 = Parser$Reply$error$($1336,$1337,$1338);var $1335 = $1339;break;case 'Parser.Reply.value':var $1340=self.idx;var $1341=self.code;var self = Kind$Parser$term$($1340,$1341);switch(self._){case 'Parser.Reply.error':var $1343=self.idx;var $1344=self.code;var $1345=self.err;var $1346 = Parser$Reply$error$($1343,$1344,$1345);var $1342 = $1346;break;case 'Parser.Reply.value':var $1347=self.idx;var $1348=self.code;var $1349=self.val;var self = Kind$Parser$text$("then",$1347,$1348);switch(self._){case 'Parser.Reply.error':var $1351=self.idx;var $1352=self.code;var $1353=self.err;var $1354 = Parser$Reply$error$($1351,$1352,$1353);var $1350 = $1354;break;case 'Parser.Reply.value':var $1355=self.idx;var $1356=self.code;var self = Kind$Parser$term$($1355,$1356);switch(self._){case 'Parser.Reply.error':var $1358=self.idx;var $1359=self.code;var $1360=self.err;var $1361 = Parser$Reply$error$($1358,$1359,$1360);var $1357 = $1361;break;case 'Parser.Reply.value':var $1362=self.idx;var $1363=self.code;var $1364=self.val;var self = Kind$Parser$text$("else",$1362,$1363);switch(self._){case 'Parser.Reply.error':var $1366=self.idx;var $1367=self.code;var $1368=self.err;var $1369 = Parser$Reply$error$($1366,$1367,$1368);var $1365 = $1369;break;case 'Parser.Reply.value':var $1370=self.idx;var $1371=self.code;var self = Kind$Parser$term$($1370,$1371);switch(self._){case 'Parser.Reply.error':var $1373=self.idx;var $1374=self.code;var $1375=self.err;var $1376 = Parser$Reply$error$($1373,$1374,$1375);var $1372 = $1376;break;case 'Parser.Reply.value':var $1377=self.idx;var $1378=self.code;var $1379=self.val;var self = Kind$Parser$stop$($1334,$1377,$1378);switch(self._){case 'Parser.Reply.error':var $1381=self.idx;var $1382=self.code;var $1383=self.err;var $1384 = Parser$Reply$error$($1381,$1382,$1383);var $1380 = $1384;break;case 'Parser.Reply.value':var $1385=self.idx;var $1386=self.code;var $1387=self.val;var _term$27 = $1349;var _term$28 = Kind$Term$app$(_term$27,Kind$Term$lam$("",(_x$28=>{var $1389 = Kind$Term$hol$(Bits$e);return $1389;})));var _term$29 = Kind$Term$app$(_term$28,$1364);var _term$30 = Kind$Term$app$(_term$29,$1379);var $1388 = Parser$Reply$value$($1385,$1386,Kind$Term$ori$($1387,_term$30));var $1380 = $1388;break;};var $1372 = $1380;break;};var $1365 = $1372;break;};var $1357 = $1365;break;};var $1350 = $1357;break;};var $1342 = $1350;break;};var $1335 = $1342;break;};var $1327 = $1335;break;};return $1327;};
 const Kind$Parser$if = x0=>x1=>Kind$Parser$if$(x0,x1);function List$mapped$(_as$2,_f$4){var self = _as$2;switch(self._){case 'List.cons':var $1391=self.head;var $1392=self.tail;var $1393 = List$cons$(_f$4($1391),List$mapped$($1392,_f$4));var $1390 = $1393;break;case 'List.nil':var $1394 = List$nil;var $1390 = $1394;break;};return $1390;};
 const List$mapped = x0=>x1=>List$mapped$(x0,x1); const Kind$backslash = 92;
 const Kind$escapes = List$cons$(Pair$new$("\\b",8),List$cons$(Pair$new$("\\f",12),List$cons$(Pair$new$("\\n",10),List$cons$(Pair$new$("\\r",13),List$cons$(Pair$new$("\\t",9),List$cons$(Pair$new$("\\v",11),List$cons$(Pair$new$(String$cons$(Kind$backslash,String$cons$(Kind$backslash,String$nil)),Kind$backslash),List$cons$(Pair$new$("\\\"",34),List$cons$(Pair$new$("\\0",0),List$cons$(Pair$new$("\\\'",39),List$nil))))))))));
 const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$escapes,(_esc$1=>{var self = _esc$1;switch(self._){case 'Pair.new':var $1396=self.fst;var $1397=self.snd;var $1398 = (_idx$4=>_code$5=>{var self = Parser$text$($1396,_idx$4,_code$5);switch(self._){case 'Parser.Reply.error':var $1400=self.idx;var $1401=self.code;var $1402=self.err;var $1403 = Parser$Reply$error$($1400,$1401,$1402);var $1399 = $1403;break;case 'Parser.Reply.value':var $1404=self.idx;var $1405=self.code;var $1406 = Parser$Reply$value$($1404,$1405,$1397);var $1399 = $1406;break;};return $1399;});var $1395 = $1398;break;};return $1395;}))),List$cons$(Parser$one,List$nil)));
function Kind$Term$chr$(_chrx$1){var $1407 = ({_:'Kind.Term.chr','chrx':_chrx$1});return $1407;};
 const Kind$Term$chr = x0=>Kind$Term$chr$(x0);function Kind$Parser$char$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1409=self.idx;var $1410=self.code;var $1411=self.err;var $1412 = Parser$Reply$error$($1409,$1410,$1411);var $1408 = $1412;break;case 'Parser.Reply.value':var $1413=self.idx;var $1414=self.code;var $1415=self.val;var self = Kind$Parser$text$("\'",$1413,$1414);switch(self._){case 'Parser.Reply.error':var $1417=self.idx;var $1418=self.code;var $1419=self.err;var $1420 = Parser$Reply$error$($1417,$1418,$1419);var $1416 = $1420;break;case 'Parser.Reply.value':var $1421=self.idx;var $1422=self.code;var self = Kind$Parser$char$single($1421)($1422);switch(self._){case 'Parser.Reply.error':var $1424=self.idx;var $1425=self.code;var $1426=self.err;var $1427 = Parser$Reply$error$($1424,$1425,$1426);var $1423 = $1427;break;case 'Parser.Reply.value':var $1428=self.idx;var $1429=self.code;var $1430=self.val;var self = Parser$text$("\'",$1428,$1429);switch(self._){case 'Parser.Reply.error':var $1432=self.idx;var $1433=self.code;var $1434=self.err;var $1435 = Parser$Reply$error$($1432,$1433,$1434);var $1431 = $1435;break;case 'Parser.Reply.value':var $1436=self.idx;var $1437=self.code;var self = Kind$Parser$stop$($1415,$1436,$1437);switch(self._){case 'Parser.Reply.error':var $1439=self.idx;var $1440=self.code;var $1441=self.err;var $1442 = Parser$Reply$error$($1439,$1440,$1441);var $1438 = $1442;break;case 'Parser.Reply.value':var $1443=self.idx;var $1444=self.code;var $1445=self.val;var $1446 = Parser$Reply$value$($1443,$1444,Kind$Term$ori$($1445,Kind$Term$chr$($1430)));var $1438 = $1446;break;};var $1431 = $1438;break;};var $1423 = $1431;break;};var $1416 = $1423;break;};var $1408 = $1416;break;};return $1408;};
 const Kind$Parser$char = x0=>x1=>Kind$Parser$char$(x0,x1);function String$reverse$go$(_xs$1,_res$2){var String$reverse$go$=(_xs$1,_res$2)=>({ctr:'TCO',arg:[_xs$1,_res$2]});var String$reverse$go=_xs$1=>_res$2=>String$reverse$go$(_xs$1,_res$2);var arg=[_xs$1,_res$2];while(true){let [_xs$1,_res$2]=arg;var R=(()=>{var self = _xs$1;if (self.length===0) {var $1447 = _res$2;return $1447;} else {var $1448=self.charCodeAt(0);var $1449=self.slice(1);var $1450 = String$reverse$go$($1449,String$cons$($1448,_res$2));return $1450;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const String$reverse$go = x0=>x1=>String$reverse$go$(x0,x1);function String$reverse$(_xs$1){var $1451 = String$reverse$go$(_xs$1,String$nil);return $1451;};
 const String$reverse = x0=>String$reverse$(x0);function Kind$Parser$string$go$(_str$1,_idx$2,_code$3){var Kind$Parser$string$go$=(_str$1,_idx$2,_code$3)=>({ctr:'TCO',arg:[_str$1,_idx$2,_code$3]});var Kind$Parser$string$go=_str$1=>_idx$2=>_code$3=>Kind$Parser$string$go$(_str$1,_idx$2,_code$3);var arg=[_str$1,_idx$2,_code$3];while(true){let [_str$1,_idx$2,_code$3]=arg;var R=(()=>{var self = _code$3;if (self.length===0) {var $1452 = Parser$Reply$error$(_idx$2,_code$3,"Non-terminating string.");return $1452;} else {var $1453=self.charCodeAt(0);var $1454=self.slice(1);var self = ($1453===34);if (self) {var $1456 = Parser$Reply$value$(Nat$succ$(_idx$2),$1454,String$reverse$(_str$1));var $1455 = $1456;} else {var self = Kind$Parser$char$single(_idx$2)(_code$3);switch(self._){case 'Parser.Reply.error':var $1458=self.idx;var $1459=self.code;var $1460=self.err;var $1461 = Parser$Reply$error$($1458,$1459,$1460);var $1457 = $1461;break;case 'Parser.Reply.value':var $1462=self.idx;var $1463=self.code;var $1464=self.val;var $1465 = Kind$Parser$string$go$(String$cons$($1464,_str$1),$1462,$1463);var $1457 = $1465;break;};var $1455 = $1457;};return $1455;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$Parser$string$go = x0=>x1=>x2=>Kind$Parser$string$go$(x0,x1,x2);function Kind$Term$str$(_strx$1){var $1466 = ({_:'Kind.Term.str','strx':_strx$1});return $1466;};
 const Kind$Term$str = x0=>Kind$Term$str$(x0);function Kind$Parser$string$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1468=self.idx;var $1469=self.code;var $1470=self.err;var $1471 = Parser$Reply$error$($1468,$1469,$1470);var $1467 = $1471;break;case 'Parser.Reply.value':var $1472=self.idx;var $1473=self.code;var $1474=self.val;var self = Kind$Parser$text$(String$cons$(34,String$nil),$1472,$1473);switch(self._){case 'Parser.Reply.error':var $1476=self.idx;var $1477=self.code;var $1478=self.err;var $1479 = Parser$Reply$error$($1476,$1477,$1478);var $1475 = $1479;break;case 'Parser.Reply.value':var $1480=self.idx;var $1481=self.code;var self = Kind$Parser$string$go$("",$1480,$1481);switch(self._){case 'Parser.Reply.error':var $1483=self.idx;var $1484=self.code;var $1485=self.err;var $1486 = Parser$Reply$error$($1483,$1484,$1485);var $1482 = $1486;break;case 'Parser.Reply.value':var $1487=self.idx;var $1488=self.code;var $1489=self.val;var self = Kind$Parser$stop$($1474,$1487,$1488);switch(self._){case 'Parser.Reply.error':var $1491=self.idx;var $1492=self.code;var $1493=self.err;var $1494 = Parser$Reply$error$($1491,$1492,$1493);var $1490 = $1494;break;case 'Parser.Reply.value':var $1495=self.idx;var $1496=self.code;var $1497=self.val;var $1498 = Parser$Reply$value$($1495,$1496,Kind$Term$ori$($1497,Kind$Term$str$($1489)));var $1490 = $1498;break;};var $1482 = $1490;break;};var $1475 = $1482;break;};var $1467 = $1475;break;};return $1467;};
 const Kind$Parser$string = x0=>x1=>Kind$Parser$string$(x0,x1);function Kind$Parser$pair$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1500=self.idx;var $1501=self.code;var $1502=self.err;var $1503 = Parser$Reply$error$($1500,$1501,$1502);var $1499 = $1503;break;case 'Parser.Reply.value':var $1504=self.idx;var $1505=self.code;var $1506=self.val;var self = Kind$Parser$text$("{",$1504,$1505);switch(self._){case 'Parser.Reply.error':var $1508=self.idx;var $1509=self.code;var $1510=self.err;var $1511 = Parser$Reply$error$($1508,$1509,$1510);var $1507 = $1511;break;case 'Parser.Reply.value':var $1512=self.idx;var $1513=self.code;var self = Kind$Parser$term$($1512,$1513);switch(self._){case 'Parser.Reply.error':var $1515=self.idx;var $1516=self.code;var $1517=self.err;var $1518 = Parser$Reply$error$($1515,$1516,$1517);var $1514 = $1518;break;case 'Parser.Reply.value':var $1519=self.idx;var $1520=self.code;var $1521=self.val;var self = Kind$Parser$text$(",",$1519,$1520);switch(self._){case 'Parser.Reply.error':var $1523=self.idx;var $1524=self.code;var $1525=self.err;var $1526 = Parser$Reply$error$($1523,$1524,$1525);var $1522 = $1526;break;case 'Parser.Reply.value':var $1527=self.idx;var $1528=self.code;var self = Kind$Parser$term$($1527,$1528);switch(self._){case 'Parser.Reply.error':var $1530=self.idx;var $1531=self.code;var $1532=self.err;var $1533 = Parser$Reply$error$($1530,$1531,$1532);var $1529 = $1533;break;case 'Parser.Reply.value':var $1534=self.idx;var $1535=self.code;var $1536=self.val;var self = Kind$Parser$text$("}",$1534,$1535);switch(self._){case 'Parser.Reply.error':var $1538=self.idx;var $1539=self.code;var $1540=self.err;var $1541 = Parser$Reply$error$($1538,$1539,$1540);var $1537 = $1541;break;case 'Parser.Reply.value':var $1542=self.idx;var $1543=self.code;var self = Kind$Parser$stop$($1506,$1542,$1543);switch(self._){case 'Parser.Reply.error':var $1545=self.idx;var $1546=self.code;var $1547=self.err;var $1548 = Parser$Reply$error$($1545,$1546,$1547);var $1544 = $1548;break;case 'Parser.Reply.value':var $1549=self.idx;var $1550=self.code;var $1551=self.val;var _term$24 = Kind$Term$ref$("Pair.new");var _term$25 = Kind$Term$app$(_term$24,Kind$Term$hol$(Bits$e));var _term$26 = Kind$Term$app$(_term$25,Kind$Term$hol$(Bits$e));var _term$27 = Kind$Term$app$(_term$26,$1521);var _term$28 = Kind$Term$app$(_term$27,$1536);var $1552 = Parser$Reply$value$($1549,$1550,Kind$Term$ori$($1551,_term$28));var $1544 = $1552;break;};var $1537 = $1544;break;};var $1529 = $1537;break;};var $1522 = $1529;break;};var $1514 = $1522;break;};var $1507 = $1514;break;};var $1499 = $1507;break;};return $1499;};
 const Kind$Parser$pair = x0=>x1=>Kind$Parser$pair$(x0,x1);function Kind$Parser$sigma$type$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1554=self.idx;var $1555=self.code;var $1556=self.err;var $1557 = Parser$Reply$error$($1554,$1555,$1556);var $1553 = $1557;break;case 'Parser.Reply.value':var $1558=self.idx;var $1559=self.code;var $1560=self.val;var self = Kind$Parser$text$("{",$1558,$1559);switch(self._){case 'Parser.Reply.error':var $1562=self.idx;var $1563=self.code;var $1564=self.err;var $1565 = Parser$Reply$error$($1562,$1563,$1564);var $1561 = $1565;break;case 'Parser.Reply.value':var $1566=self.idx;var $1567=self.code;var self = Kind$Parser$name1$($1566,$1567);switch(self._){case 'Parser.Reply.error':var $1569=self.idx;var $1570=self.code;var $1571=self.err;var $1572 = Parser$Reply$error$($1569,$1570,$1571);var $1568 = $1572;break;case 'Parser.Reply.value':var $1573=self.idx;var $1574=self.code;var $1575=self.val;var self = Kind$Parser$text$(":",$1573,$1574);switch(self._){case 'Parser.Reply.error':var $1577=self.idx;var $1578=self.code;var $1579=self.err;var $1580 = Parser$Reply$error$($1577,$1578,$1579);var $1576 = $1580;break;case 'Parser.Reply.value':var $1581=self.idx;var $1582=self.code;var self = Kind$Parser$term$($1581,$1582);switch(self._){case 'Parser.Reply.error':var $1584=self.idx;var $1585=self.code;var $1586=self.err;var $1587 = Parser$Reply$error$($1584,$1585,$1586);var $1583 = $1587;break;case 'Parser.Reply.value':var $1588=self.idx;var $1589=self.code;var $1590=self.val;var self = Kind$Parser$text$("}",$1588,$1589);switch(self._){case 'Parser.Reply.error':var $1592=self.idx;var $1593=self.code;var $1594=self.err;var $1595 = Parser$Reply$error$($1592,$1593,$1594);var $1591 = $1595;break;case 'Parser.Reply.value':var $1596=self.idx;var $1597=self.code;var self = Kind$Parser$term$($1596,$1597);switch(self._){case 'Parser.Reply.error':var $1599=self.idx;var $1600=self.code;var $1601=self.err;var $1602 = Parser$Reply$error$($1599,$1600,$1601);var $1598 = $1602;break;case 'Parser.Reply.value':var $1603=self.idx;var $1604=self.code;var $1605=self.val;var self = Kind$Parser$stop$($1560,$1603,$1604);switch(self._){case 'Parser.Reply.error':var $1607=self.idx;var $1608=self.code;var $1609=self.err;var $1610 = Parser$Reply$error$($1607,$1608,$1609);var $1606 = $1610;break;case 'Parser.Reply.value':var $1611=self.idx;var $1612=self.code;var $1613=self.val;var _term$27 = Kind$Term$ref$("Sigma");var _term$28 = Kind$Term$app$(_term$27,$1590);var _term$29 = Kind$Term$app$(_term$28,Kind$Term$lam$($1575,(_x$29=>{var $1615 = $1605;return $1615;})));var $1614 = Parser$Reply$value$($1611,$1612,Kind$Term$ori$($1613,_term$29));var $1606 = $1614;break;};var $1598 = $1606;break;};var $1591 = $1598;break;};var $1583 = $1591;break;};var $1576 = $1583;break;};var $1568 = $1576;break;};var $1561 = $1568;break;};var $1553 = $1561;break;};return $1553;};
 const Kind$Parser$sigma$type = x0=>x1=>Kind$Parser$sigma$type$(x0,x1);function Kind$Parser$some$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1617=self.idx;var $1618=self.code;var $1619=self.err;var $1620 = Parser$Reply$error$($1617,$1618,$1619);var $1616 = $1620;break;case 'Parser.Reply.value':var $1621=self.idx;var $1622=self.code;var $1623=self.val;var self = Kind$Parser$text$("some(",$1621,$1622);switch(self._){case 'Parser.Reply.error':var $1625=self.idx;var $1626=self.code;var $1627=self.err;var $1628 = Parser$Reply$error$($1625,$1626,$1627);var $1624 = $1628;break;case 'Parser.Reply.value':var $1629=self.idx;var $1630=self.code;var self = Kind$Parser$term$($1629,$1630);switch(self._){case 'Parser.Reply.error':var $1632=self.idx;var $1633=self.code;var $1634=self.err;var $1635 = Parser$Reply$error$($1632,$1633,$1634);var $1631 = $1635;break;case 'Parser.Reply.value':var $1636=self.idx;var $1637=self.code;var $1638=self.val;var self = Kind$Parser$text$(")",$1636,$1637);switch(self._){case 'Parser.Reply.error':var $1640=self.idx;var $1641=self.code;var $1642=self.err;var $1643 = Parser$Reply$error$($1640,$1641,$1642);var $1639 = $1643;break;case 'Parser.Reply.value':var $1644=self.idx;var $1645=self.code;var self = Kind$Parser$stop$($1623,$1644,$1645);switch(self._){case 'Parser.Reply.error':var $1647=self.idx;var $1648=self.code;var $1649=self.err;var $1650 = Parser$Reply$error$($1647,$1648,$1649);var $1646 = $1650;break;case 'Parser.Reply.value':var $1651=self.idx;var $1652=self.code;var $1653=self.val;var _term$18 = Kind$Term$ref$("Maybe.some");var _term$19 = Kind$Term$app$(_term$18,Kind$Term$hol$(Bits$e));var _term$20 = Kind$Term$app$(_term$19,$1638);var $1654 = Parser$Reply$value$($1651,$1652,Kind$Term$ori$($1653,_term$20));var $1646 = $1654;break;};var $1639 = $1646;break;};var $1631 = $1639;break;};var $1624 = $1631;break;};var $1616 = $1624;break;};return $1616;};
 const Kind$Parser$some = x0=>x1=>Kind$Parser$some$(x0,x1);function Kind$Parser$apply$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1656=self.idx;var $1657=self.code;var $1658=self.err;var $1659 = Parser$Reply$error$($1656,$1657,$1658);var $1655 = $1659;break;case 'Parser.Reply.value':var $1660=self.idx;var $1661=self.code;var $1662=self.val;var self = Kind$Parser$text$("apply(",$1660,$1661);switch(self._){case 'Parser.Reply.error':var $1664=self.idx;var $1665=self.code;var $1666=self.err;var $1667 = Parser$Reply$error$($1664,$1665,$1666);var $1663 = $1667;break;case 'Parser.Reply.value':var $1668=self.idx;var $1669=self.code;var self = Kind$Parser$term$($1668,$1669);switch(self._){case 'Parser.Reply.error':var $1671=self.idx;var $1672=self.code;var $1673=self.err;var $1674 = Parser$Reply$error$($1671,$1672,$1673);var $1670 = $1674;break;case 'Parser.Reply.value':var $1675=self.idx;var $1676=self.code;var $1677=self.val;var self = Kind$Parser$text$(",",$1675,$1676);switch(self._){case 'Parser.Reply.error':var $1679=self.idx;var $1680=self.code;var $1681=self.err;var $1682 = Parser$Reply$error$($1679,$1680,$1681);var $1678 = $1682;break;case 'Parser.Reply.value':var $1683=self.idx;var $1684=self.code;var self = Kind$Parser$term$($1683,$1684);switch(self._){case 'Parser.Reply.error':var $1686=self.idx;var $1687=self.code;var $1688=self.err;var $1689 = Parser$Reply$error$($1686,$1687,$1688);var $1685 = $1689;break;case 'Parser.Reply.value':var $1690=self.idx;var $1691=self.code;var $1692=self.val;var self = Kind$Parser$text$(")",$1690,$1691);switch(self._){case 'Parser.Reply.error':var $1694=self.idx;var $1695=self.code;var $1696=self.err;var $1697 = Parser$Reply$error$($1694,$1695,$1696);var $1693 = $1697;break;case 'Parser.Reply.value':var $1698=self.idx;var $1699=self.code;var self = Kind$Parser$stop$($1662,$1698,$1699);switch(self._){case 'Parser.Reply.error':var $1701=self.idx;var $1702=self.code;var $1703=self.err;var $1704 = Parser$Reply$error$($1701,$1702,$1703);var $1700 = $1704;break;case 'Parser.Reply.value':var $1705=self.idx;var $1706=self.code;var $1707=self.val;var _term$24 = Kind$Term$ref$("Equal.apply");var _term$25 = Kind$Term$app$(_term$24,Kind$Term$hol$(Bits$e));var _term$26 = Kind$Term$app$(_term$25,Kind$Term$hol$(Bits$e));var _term$27 = Kind$Term$app$(_term$26,Kind$Term$hol$(Bits$e));var _term$28 = Kind$Term$app$(_term$27,Kind$Term$hol$(Bits$e));var _term$29 = Kind$Term$app$(_term$28,$1677);var _term$30 = Kind$Term$app$(_term$29,$1692);var $1708 = Parser$Reply$value$($1705,$1706,Kind$Term$ori$($1707,_term$30));var $1700 = $1708;break;};var $1693 = $1700;break;};var $1685 = $1693;break;};var $1678 = $1685;break;};var $1670 = $1678;break;};var $1663 = $1670;break;};var $1655 = $1663;break;};return $1655;};
 const Kind$Parser$apply = x0=>x1=>Kind$Parser$apply$(x0,x1);function Kind$Parser$mirror$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1710=self.idx;var $1711=self.code;var $1712=self.err;var $1713 = Parser$Reply$error$($1710,$1711,$1712);var $1709 = $1713;break;case 'Parser.Reply.value':var $1714=self.idx;var $1715=self.code;var $1716=self.val;var self = Kind$Parser$text$("mirror(",$1714,$1715);switch(self._){case 'Parser.Reply.error':var $1718=self.idx;var $1719=self.code;var $1720=self.err;var $1721 = Parser$Reply$error$($1718,$1719,$1720);var $1717 = $1721;break;case 'Parser.Reply.value':var $1722=self.idx;var $1723=self.code;var self = Kind$Parser$term$($1722,$1723);switch(self._){case 'Parser.Reply.error':var $1725=self.idx;var $1726=self.code;var $1727=self.err;var $1728 = Parser$Reply$error$($1725,$1726,$1727);var $1724 = $1728;break;case 'Parser.Reply.value':var $1729=self.idx;var $1730=self.code;var $1731=self.val;var self = Kind$Parser$text$(")",$1729,$1730);switch(self._){case 'Parser.Reply.error':var $1733=self.idx;var $1734=self.code;var $1735=self.err;var $1736 = Parser$Reply$error$($1733,$1734,$1735);var $1732 = $1736;break;case 'Parser.Reply.value':var $1737=self.idx;var $1738=self.code;var self = Kind$Parser$stop$($1716,$1737,$1738);switch(self._){case 'Parser.Reply.error':var $1740=self.idx;var $1741=self.code;var $1742=self.err;var $1743 = Parser$Reply$error$($1740,$1741,$1742);var $1739 = $1743;break;case 'Parser.Reply.value':var $1744=self.idx;var $1745=self.code;var $1746=self.val;var _term$18 = Kind$Term$ref$("Equal.mirror");var _term$19 = Kind$Term$app$(_term$18,Kind$Term$hol$(Bits$e));var _term$20 = Kind$Term$app$(_term$19,Kind$Term$hol$(Bits$e));var _term$21 = Kind$Term$app$(_term$20,Kind$Term$hol$(Bits$e));var _term$22 = Kind$Term$app$(_term$21,$1731);var $1747 = Parser$Reply$value$($1744,$1745,Kind$Term$ori$($1746,_term$22));var $1739 = $1747;break;};var $1732 = $1739;break;};var $1724 = $1732;break;};var $1717 = $1724;break;};var $1709 = $1717;break;};return $1709;};
 const Kind$Parser$mirror = x0=>x1=>Kind$Parser$mirror$(x0,x1);function Kind$Name$read$(_str$1){var $1748 = _str$1;return $1748;};
 const Kind$Name$read = x0=>Kind$Name$read$(x0);function Kind$Parser$list$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1750=self.idx;var $1751=self.code;var $1752=self.err;var $1753 = Parser$Reply$error$($1750,$1751,$1752);var $1749 = $1753;break;case 'Parser.Reply.value':var $1754=self.idx;var $1755=self.code;var $1756=self.val;var self = Kind$Parser$text$("[",$1754,$1755);switch(self._){case 'Parser.Reply.error':var $1758=self.idx;var $1759=self.code;var $1760=self.err;var $1761 = Parser$Reply$error$($1758,$1759,$1760);var $1757 = $1761;break;case 'Parser.Reply.value':var $1762=self.idx;var $1763=self.code;var self = Parser$until$(Kind$Parser$text("]"),Kind$Parser$item(Kind$Parser$term))($1762)($1763);switch(self._){case 'Parser.Reply.error':var $1765=self.idx;var $1766=self.code;var $1767=self.err;var $1768 = Parser$Reply$error$($1765,$1766,$1767);var $1764 = $1768;break;case 'Parser.Reply.value':var $1769=self.idx;var $1770=self.code;var $1771=self.val;var self = Kind$Parser$stop$($1756,$1769,$1770);switch(self._){case 'Parser.Reply.error':var $1773=self.idx;var $1774=self.code;var $1775=self.err;var $1776 = Parser$Reply$error$($1773,$1774,$1775);var $1772 = $1776;break;case 'Parser.Reply.value':var $1777=self.idx;var $1778=self.code;var $1779=self.val;var $1780 = Parser$Reply$value$($1777,$1778,List$fold$($1771,Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")),Kind$Term$hol$(Bits$e)),(_x$15=>_xs$16=>{var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));var _term$18 = Kind$Term$app$(_term$17,Kind$Term$hol$(Bits$e));var _term$19 = Kind$Term$app$(_term$18,_x$15);var _term$20 = Kind$Term$app$(_term$19,_xs$16);var $1781 = Kind$Term$ori$($1779,_term$20);return $1781;})));var $1772 = $1780;break;};var $1764 = $1772;break;};var $1757 = $1764;break;};var $1749 = $1757;break;};return $1749;};
 const Kind$Parser$list = x0=>x1=>Kind$Parser$list$(x0,x1);function Kind$Parser$map$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1783=self.idx;var $1784=self.code;var $1785=self.err;var $1786 = Parser$Reply$error$($1783,$1784,$1785);var $1782 = $1786;break;case 'Parser.Reply.value':var $1787=self.idx;var $1788=self.code;var $1789=self.val;var self = Kind$Parser$text$("{",$1787,$1788);switch(self._){case 'Parser.Reply.error':var $1791=self.idx;var $1792=self.code;var $1793=self.err;var $1794 = Parser$Reply$error$($1791,$1792,$1793);var $1790 = $1794;break;case 'Parser.Reply.value':var $1795=self.idx;var $1796=self.code;var self = Parser$until$(Kind$Parser$text("}"),Kind$Parser$item((_idx$9=>_code$10=>{var self = Kind$Parser$term$(_idx$9,_code$10);switch(self._){case 'Parser.Reply.error':var $1799=self.idx;var $1800=self.code;var $1801=self.err;var $1802 = Parser$Reply$error$($1799,$1800,$1801);var $1798 = $1802;break;case 'Parser.Reply.value':var $1803=self.idx;var $1804=self.code;var $1805=self.val;var self = Kind$Parser$text$(":",$1803,$1804);switch(self._){case 'Parser.Reply.error':var $1807=self.idx;var $1808=self.code;var $1809=self.err;var $1810 = Parser$Reply$error$($1807,$1808,$1809);var $1806 = $1810;break;case 'Parser.Reply.value':var $1811=self.idx;var $1812=self.code;var self = Kind$Parser$term$($1811,$1812);switch(self._){case 'Parser.Reply.error':var $1814=self.idx;var $1815=self.code;var $1816=self.err;var $1817 = Parser$Reply$error$($1814,$1815,$1816);var $1813 = $1817;break;case 'Parser.Reply.value':var $1818=self.idx;var $1819=self.code;var $1820=self.val;var $1821 = Parser$Reply$value$($1818,$1819,Pair$new$($1805,$1820));var $1813 = $1821;break;};var $1806 = $1813;break;};var $1798 = $1806;break;};return $1798;})))($1795)($1796);switch(self._){case 'Parser.Reply.error':var $1822=self.idx;var $1823=self.code;var $1824=self.err;var $1825 = Parser$Reply$error$($1822,$1823,$1824);var $1797 = $1825;break;case 'Parser.Reply.value':var $1826=self.idx;var $1827=self.code;var $1828=self.val;var self = Kind$Parser$stop$($1789,$1826,$1827);switch(self._){case 'Parser.Reply.error':var $1830=self.idx;var $1831=self.code;var $1832=self.err;var $1833 = Parser$Reply$error$($1830,$1831,$1832);var $1829 = $1833;break;case 'Parser.Reply.value':var $1834=self.idx;var $1835=self.code;var $1836=self.val;var _list$15 = List$fold$($1828,Kind$Term$app$(Kind$Term$ref$("List.nil"),Kind$Term$hol$(Bits$e)),(_kv$15=>_xs$16=>{var self = _kv$15;switch(self._){case 'Pair.new':var $1839=self.fst;var $1840=self.snd;var _pair$19 = Kind$Term$ref$("Pair.new");var _pair$20 = Kind$Term$app$(_pair$19,Kind$Term$hol$(Bits$e));var _pair$21 = Kind$Term$app$(_pair$20,Kind$Term$hol$(Bits$e));var _pair$22 = Kind$Term$app$(_pair$21,$1839);var _pair$23 = Kind$Term$app$(_pair$22,$1840);var _term$24 = Kind$Term$ref$("List.cons");var _term$25 = Kind$Term$app$(_term$24,Kind$Term$hol$(Bits$e));var _term$26 = Kind$Term$app$(_term$25,_pair$23);var _term$27 = Kind$Term$app$(_term$26,_xs$16);var $1841 = Kind$Term$ori$($1836,_term$27);var $1838 = $1841;break;};return $1838;}));var _term$16 = Kind$Term$ref$("Map.from_list");var _term$17 = Kind$Term$app$(_term$16,Kind$Term$hol$(Bits$e));var _term$18 = Kind$Term$app$(_term$17,_list$15);var $1837 = Parser$Reply$value$($1834,$1835,Kind$Term$ori$($1836,_term$18));var $1829 = $1837;break;};var $1797 = $1829;break;};var $1790 = $1797;break;};var $1782 = $1790;break;};return $1782;};
 const Kind$Parser$map = x0=>x1=>Kind$Parser$map$(x0,x1);function Kind$Parser$log$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $1843=self.idx;var $1844=self.code;var $1845=self.err;var $1846 = Parser$Reply$error$($1843,$1844,$1845);var $1842 = $1846;break;case 'Parser.Reply.value':var $1847=self.idx;var $1848=self.code;var $1849=self.val;var self = Kind$Parser$text$("log(",$1847,$1848);switch(self._){case 'Parser.Reply.error':var $1851=self.idx;var $1852=self.code;var $1853=self.err;var $1854 = Parser$Reply$error$($1851,$1852,$1853);var $1850 = $1854;break;case 'Parser.Reply.value':var $1855=self.idx;var $1856=self.code;var self = Parser$until$(Kind$Parser$text(")"),Kind$Parser$item(Kind$Parser$term))($1855)($1856);switch(self._){case 'Parser.Reply.error':var $1858=self.idx;var $1859=self.code;var $1860=self.err;var $1861 = Parser$Reply$error$($1858,$1859,$1860);var $1857 = $1861;break;case 'Parser.Reply.value':var $1862=self.idx;var $1863=self.code;var $1864=self.val;var self = Kind$Parser$term$($1862,$1863);switch(self._){case 'Parser.Reply.error':var $1866=self.idx;var $1867=self.code;var $1868=self.err;var $1869 = Parser$Reply$error$($1866,$1867,$1868);var $1865 = $1869;break;case 'Parser.Reply.value':var $1870=self.idx;var $1871=self.code;var $1872=self.val;var _term$15 = Kind$Term$ref$("Debug.log");var _term$16 = Kind$Term$app$(_term$15,Kind$Term$hol$(Bits$e));var _args$17 = List$fold$($1864,Kind$Term$ref$("String.nil"),(_x$17=>_xs$18=>{var _arg$19 = Kind$Term$ref$("String.concat");var _arg$20 = Kind$Term$app$(_arg$19,_x$17);var _arg$21 = Kind$Term$app$(_arg$20,_xs$18);var $1874 = _arg$21;return $1874;}));var _term$18 = Kind$Term$app$(_term$16,_args$17);var _term$19 = Kind$Term$app$(_term$18,Kind$Term$lam$("x",(_x$19=>{var $1875 = $1872;return $1875;})));var self = Kind$Parser$stop$($1849,$1870,$1871);switch(self._){case 'Parser.Reply.error':var $1876=self.idx;var $1877=self.code;var $1878=self.err;var $1879 = Parser$Reply$error$($1876,$1877,$1878);var $1873 = $1879;break;case 'Parser.Reply.value':var $1880=self.idx;var $1881=self.code;var $1882=self.val;var $1883 = Parser$Reply$value$($1880,$1881,Kind$Term$ori$($1882,_term$19));var $1873 = $1883;break;};var $1865 = $1873;break;};var $1857 = $1865;break;};var $1850 = $1857;break;};var $1842 = $1850;break;};return $1842;};
 const Kind$Parser$log = x0=>x1=>Kind$Parser$log$(x0,x1);function Kind$Parser$do$statements$(_monad_name$1){var $1884 = Parser$first_of$(List$cons$((_idx$2=>_code$3=>{var self = Kind$Parser$init$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $1886=self.idx;var $1887=self.code;var $1888=self.err;var $1889 = Parser$Reply$error$($1886,$1887,$1888);var $1885 = $1889;break;case 'Parser.Reply.value':var $1890=self.idx;var $1891=self.code;var $1892=self.val;var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "),List$cons$(Kind$Parser$text("get "),List$nil)))($1890)($1891);switch(self._){case 'Parser.Reply.error':var $1894=self.idx;var $1895=self.code;var $1896=self.err;var $1897 = Parser$Reply$error$($1894,$1895,$1896);var $1893 = $1897;break;case 'Parser.Reply.value':var $1898=self.idx;var $1899=self.code;var self = Kind$Parser$name1$($1898,$1899);switch(self._){case 'Parser.Reply.error':var $1901=self.idx;var $1902=self.code;var $1903=self.err;var $1904 = Parser$Reply$error$($1901,$1902,$1903);var $1900 = $1904;break;case 'Parser.Reply.value':var $1905=self.idx;var $1906=self.code;var $1907=self.val;var self = Kind$Parser$text$("=",$1905,$1906);switch(self._){case 'Parser.Reply.error':var $1909=self.idx;var $1910=self.code;var $1911=self.err;var $1912 = Parser$Reply$error$($1909,$1910,$1911);var $1908 = $1912;break;case 'Parser.Reply.value':var $1913=self.idx;var $1914=self.code;var self = Kind$Parser$term$($1913,$1914);switch(self._){case 'Parser.Reply.error':var $1916=self.idx;var $1917=self.code;var $1918=self.err;var $1919 = Parser$Reply$error$($1916,$1917,$1918);var $1915 = $1919;break;case 'Parser.Reply.value':var $1920=self.idx;var $1921=self.code;var $1922=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$1920,$1921);switch(self._){case 'Parser.Reply.error':var $1924=self.idx;var $1925=self.code;var $1926=self.err;var $1927 = Parser$Reply$error$($1924,$1925,$1926);var $1923 = $1927;break;case 'Parser.Reply.value':var $1928=self.idx;var $1929=self.code;var self = Kind$Parser$do$statements$(_monad_name$1)($1928)($1929);switch(self._){case 'Parser.Reply.error':var $1931=self.idx;var $1932=self.code;var $1933=self.err;var $1934 = Parser$Reply$error$($1931,$1932,$1933);var $1930 = $1934;break;case 'Parser.Reply.value':var $1935=self.idx;var $1936=self.code;var $1937=self.val;var self = Kind$Parser$stop$($1892,$1935,$1936);switch(self._){case 'Parser.Reply.error':var $1939=self.idx;var $1940=self.code;var $1941=self.err;var $1942 = Parser$Reply$error$($1939,$1940,$1941);var $1938 = $1942;break;case 'Parser.Reply.value':var $1943=self.idx;var $1944=self.code;var $1945=self.val;var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"),Kind$Term$ref$(_monad_name$1));var _term$29 = Kind$Term$app$(_term$28,Kind$Term$ref$((_monad_name$1+".monad")));var _term$30 = Kind$Term$app$(_term$29,Kind$Term$hol$(Bits$e));var _term$31 = Kind$Term$app$(_term$30,Kind$Term$hol$(Bits$e));var _term$32 = Kind$Term$app$(_term$31,$1922);var _term$33 = Kind$Term$app$(_term$32,Kind$Term$lam$($1907,(_x$33=>{var $1947 = $1937;return $1947;})));var $1946 = Parser$Reply$value$($1943,$1944,Kind$Term$ori$($1945,_term$33));var $1938 = $1946;break;};var $1930 = $1938;break;};var $1923 = $1930;break;};var $1915 = $1923;break;};var $1908 = $1915;break;};var $1900 = $1908;break;};var $1893 = $1900;break;};var $1885 = $1893;break;};return $1885;}),List$cons$((_idx$2=>_code$3=>{var self = Kind$Parser$init$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $1949=self.idx;var $1950=self.code;var $1951=self.err;var $1952 = Parser$Reply$error$($1949,$1950,$1951);var $1948 = $1952;break;case 'Parser.Reply.value':var $1953=self.idx;var $1954=self.code;var $1955=self.val;var self = Kind$Parser$text$("let ",$1953,$1954);switch(self._){case 'Parser.Reply.error':var $1957=self.idx;var $1958=self.code;var $1959=self.err;var $1960 = Parser$Reply$error$($1957,$1958,$1959);var $1956 = $1960;break;case 'Parser.Reply.value':var $1961=self.idx;var $1962=self.code;var self = Kind$Parser$name1$($1961,$1962);switch(self._){case 'Parser.Reply.error':var $1964=self.idx;var $1965=self.code;var $1966=self.err;var $1967 = Parser$Reply$error$($1964,$1965,$1966);var $1963 = $1967;break;case 'Parser.Reply.value':var $1968=self.idx;var $1969=self.code;var $1970=self.val;var self = Kind$Parser$text$("=",$1968,$1969);switch(self._){case 'Parser.Reply.error':var $1972=self.idx;var $1973=self.code;var $1974=self.err;var $1975 = Parser$Reply$error$($1972,$1973,$1974);var $1971 = $1975;break;case 'Parser.Reply.value':var $1976=self.idx;var $1977=self.code;var self = Kind$Parser$term$($1976,$1977);switch(self._){case 'Parser.Reply.error':var $1979=self.idx;var $1980=self.code;var $1981=self.err;var $1982 = Parser$Reply$error$($1979,$1980,$1981);var $1978 = $1982;break;case 'Parser.Reply.value':var $1983=self.idx;var $1984=self.code;var $1985=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$1983,$1984);switch(self._){case 'Parser.Reply.error':var $1987=self.idx;var $1988=self.code;var $1989=self.err;var $1990 = Parser$Reply$error$($1987,$1988,$1989);var $1986 = $1990;break;case 'Parser.Reply.value':var $1991=self.idx;var $1992=self.code;var self = Kind$Parser$do$statements$(_monad_name$1)($1991)($1992);switch(self._){case 'Parser.Reply.error':var $1994=self.idx;var $1995=self.code;var $1996=self.err;var $1997 = Parser$Reply$error$($1994,$1995,$1996);var $1993 = $1997;break;case 'Parser.Reply.value':var $1998=self.idx;var $1999=self.code;var $2000=self.val;var self = Kind$Parser$stop$($1955,$1998,$1999);switch(self._){case 'Parser.Reply.error':var $2002=self.idx;var $2003=self.code;var $2004=self.err;var $2005 = Parser$Reply$error$($2002,$2003,$2004);var $2001 = $2005;break;case 'Parser.Reply.value':var $2006=self.idx;var $2007=self.code;var $2008=self.val;var $2009 = Parser$Reply$value$($2006,$2007,Kind$Term$ori$($2008,Kind$Term$let$($1970,$1985,(_x$28=>{var $2010 = $2000;return $2010;}))));var $2001 = $2009;break;};var $1993 = $2001;break;};var $1986 = $1993;break;};var $1978 = $1986;break;};var $1971 = $1978;break;};var $1963 = $1971;break;};var $1956 = $1963;break;};var $1948 = $1956;break;};return $1948;}),List$cons$((_idx$2=>_code$3=>{var self = Kind$Parser$init$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $2012=self.idx;var $2013=self.code;var $2014=self.err;var $2015 = Parser$Reply$error$($2012,$2013,$2014);var $2011 = $2015;break;case 'Parser.Reply.value':var $2016=self.idx;var $2017=self.code;var $2018=self.val;var self = Kind$Parser$text$("return ",$2016,$2017);switch(self._){case 'Parser.Reply.error':var $2020=self.idx;var $2021=self.code;var $2022=self.err;var $2023 = Parser$Reply$error$($2020,$2021,$2022);var $2019 = $2023;break;case 'Parser.Reply.value':var $2024=self.idx;var $2025=self.code;var self = Kind$Parser$term$($2024,$2025);switch(self._){case 'Parser.Reply.error':var $2027=self.idx;var $2028=self.code;var $2029=self.err;var $2030 = Parser$Reply$error$($2027,$2028,$2029);var $2026 = $2030;break;case 'Parser.Reply.value':var $2031=self.idx;var $2032=self.code;var $2033=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$2031,$2032);switch(self._){case 'Parser.Reply.error':var $2035=self.idx;var $2036=self.code;var $2037=self.err;var $2038 = Parser$Reply$error$($2035,$2036,$2037);var $2034 = $2038;break;case 'Parser.Reply.value':var $2039=self.idx;var $2040=self.code;var self = Kind$Parser$stop$($2018,$2039,$2040);switch(self._){case 'Parser.Reply.error':var $2042=self.idx;var $2043=self.code;var $2044=self.err;var $2045 = Parser$Reply$error$($2042,$2043,$2044);var $2041 = $2045;break;case 'Parser.Reply.value':var $2046=self.idx;var $2047=self.code;var $2048=self.val;var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"),Kind$Term$ref$(_monad_name$1));var _term$20 = Kind$Term$app$(_term$19,Kind$Term$ref$((_monad_name$1+".monad")));var _term$21 = Kind$Term$app$(_term$20,Kind$Term$hol$(Bits$e));var _term$22 = Kind$Term$app$(_term$21,$2033);var $2049 = Parser$Reply$value$($2046,$2047,Kind$Term$ori$($2048,_term$22));var $2041 = $2049;break;};var $2034 = $2041;break;};var $2026 = $2034;break;};var $2019 = $2026;break;};var $2011 = $2019;break;};return $2011;}),List$cons$((_idx$2=>_code$3=>{var self = Kind$Parser$init$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $2051=self.idx;var $2052=self.code;var $2053=self.err;var $2054 = Parser$Reply$error$($2051,$2052,$2053);var $2050 = $2054;break;case 'Parser.Reply.value':var $2055=self.idx;var $2056=self.code;var $2057=self.val;var self = Kind$Parser$term$($2055,$2056);switch(self._){case 'Parser.Reply.error':var $2059=self.idx;var $2060=self.code;var $2061=self.err;var $2062 = Parser$Reply$error$($2059,$2060,$2061);var $2058 = $2062;break;case 'Parser.Reply.value':var $2063=self.idx;var $2064=self.code;var $2065=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$2063,$2064);switch(self._){case 'Parser.Reply.error':var $2067=self.idx;var $2068=self.code;var $2069=self.err;var $2070 = Parser$Reply$error$($2067,$2068,$2069);var $2066 = $2070;break;case 'Parser.Reply.value':var $2071=self.idx;var $2072=self.code;var self = Kind$Parser$do$statements$(_monad_name$1)($2071)($2072);switch(self._){case 'Parser.Reply.error':var $2074=self.idx;var $2075=self.code;var $2076=self.err;var $2077 = Parser$Reply$error$($2074,$2075,$2076);var $2073 = $2077;break;case 'Parser.Reply.value':var $2078=self.idx;var $2079=self.code;var $2080=self.val;var self = Kind$Parser$stop$($2057,$2078,$2079);switch(self._){case 'Parser.Reply.error':var $2082=self.idx;var $2083=self.code;var $2084=self.err;var $2085 = Parser$Reply$error$($2082,$2083,$2084);var $2081 = $2085;break;case 'Parser.Reply.value':var $2086=self.idx;var $2087=self.code;var $2088=self.val;var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"),Kind$Term$ref$(_monad_name$1));var _term$20 = Kind$Term$app$(_term$19,Kind$Term$ref$((_monad_name$1+".monad")));var _term$21 = Kind$Term$app$(_term$20,Kind$Term$hol$(Bits$e));var _term$22 = Kind$Term$app$(_term$21,Kind$Term$hol$(Bits$e));var _term$23 = Kind$Term$app$(_term$22,$2065);var _term$24 = Kind$Term$app$(_term$23,Kind$Term$lam$("",(_x$24=>{var $2090 = $2080;return $2090;})));var $2089 = Parser$Reply$value$($2086,$2087,Kind$Term$ori$($2088,_term$24));var $2081 = $2089;break;};var $2073 = $2081;break;};var $2066 = $2073;break;};var $2058 = $2066;break;};var $2050 = $2058;break;};return $2050;}),List$cons$((_idx$2=>_code$3=>{var self = Kind$Parser$term$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $2092=self.idx;var $2093=self.code;var $2094=self.err;var $2095 = Parser$Reply$error$($2092,$2093,$2094);var $2091 = $2095;break;case 'Parser.Reply.value':var $2096=self.idx;var $2097=self.code;var $2098=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$2096,$2097);switch(self._){case 'Parser.Reply.error':var $2100=self.idx;var $2101=self.code;var $2102=self.err;var $2103 = Parser$Reply$error$($2100,$2101,$2102);var $2099 = $2103;break;case 'Parser.Reply.value':var $2104=self.idx;var $2105=self.code;var $2106 = Parser$Reply$value$($2104,$2105,$2098);var $2099 = $2106;break;};var $2091 = $2099;break;};return $2091;}),List$nil))))));return $1884;};
 const Kind$Parser$do$statements = x0=>Kind$Parser$do$statements$(x0);function Kind$Parser$do$(_idx$1,_code$2){var self = Parser$maybe$(Kind$Parser$text("do "),_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2108=self.idx;var $2109=self.code;var $2110=self.err;var $2111 = Parser$Reply$error$($2108,$2109,$2110);var $2107 = $2111;break;case 'Parser.Reply.value':var $2112=self.idx;var $2113=self.code;var self = Kind$Parser$name1$($2112,$2113);switch(self._){case 'Parser.Reply.error':var $2115=self.idx;var $2116=self.code;var $2117=self.err;var $2118 = Parser$Reply$error$($2115,$2116,$2117);var $2114 = $2118;break;case 'Parser.Reply.value':var $2119=self.idx;var $2120=self.code;var $2121=self.val;var self = Kind$Parser$text$("{",$2119,$2120);switch(self._){case 'Parser.Reply.error':var $2123=self.idx;var $2124=self.code;var $2125=self.err;var $2126 = Parser$Reply$error$($2123,$2124,$2125);var $2122 = $2126;break;case 'Parser.Reply.value':var $2127=self.idx;var $2128=self.code;var self = Kind$Parser$do$statements$($2121)($2127)($2128);switch(self._){case 'Parser.Reply.error':var $2130=self.idx;var $2131=self.code;var $2132=self.err;var $2133 = Parser$Reply$error$($2130,$2131,$2132);var $2129 = $2133;break;case 'Parser.Reply.value':var $2134=self.idx;var $2135=self.code;var $2136=self.val;var self = Kind$Parser$text$("}",$2134,$2135);switch(self._){case 'Parser.Reply.error':var $2138=self.idx;var $2139=self.code;var $2140=self.err;var $2141 = Parser$Reply$error$($2138,$2139,$2140);var $2137 = $2141;break;case 'Parser.Reply.value':var $2142=self.idx;var $2143=self.code;var $2144 = Parser$Reply$value$($2142,$2143,$2136);var $2137 = $2144;break;};var $2129 = $2137;break;};var $2122 = $2129;break;};var $2114 = $2122;break;};var $2107 = $2114;break;};return $2107;};
 const Kind$Parser$do = x0=>x1=>Kind$Parser$do$(x0,x1);function Kind$Term$nat$(_natx$1){var $2145 = ({_:'Kind.Term.nat','natx':_natx$1});return $2145;};
 const Kind$Term$nat = x0=>Kind$Term$nat$(x0);function Kind$Term$unroll_nat$(_natx$1){var self = _natx$1;if (self===0n) {var $2147 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));var $2146 = $2147;} else {var $2148=(self-1n);var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));var _argm$4 = Kind$Term$nat$($2148);var $2149 = Kind$Term$app$(_func$3,_argm$4);var $2146 = $2149;};return $2146;};
 const Kind$Term$unroll_nat = x0=>Kind$Term$unroll_nat$(x0);  const U16$to_bits = a0=>(u16_to_bits(a0));
function Kind$Term$unroll_chr$bits$(_bits$1){var self = _bits$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $2151=self.slice(0,-1);var $2152 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")),Kind$Term$unroll_chr$bits$($2151));var $2150 = $2152;break;case 'i':var $2153=self.slice(0,-1);var $2154 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")),Kind$Term$unroll_chr$bits$($2153));var $2150 = $2154;break;case 'e':var $2155 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));var $2150 = $2155;break;};return $2150;};
 const Kind$Term$unroll_chr$bits = x0=>Kind$Term$unroll_chr$bits$(x0);function Kind$Term$unroll_chr$(_chrx$1){var _bits$2 = (u16_to_bits(_chrx$1));var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));var _term$4 = Kind$Term$app$(_term$3,Kind$Term$nat$(16n));var _term$5 = Kind$Term$app$(_term$4,Kind$Term$unroll_chr$bits$(_bits$2));var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")),_term$5);var $2156 = _term$6;return $2156;};
 const Kind$Term$unroll_chr = x0=>Kind$Term$unroll_chr$(x0);function Kind$Term$unroll_str$(_strx$1){var self = _strx$1;if (self.length===0) {var $2158 = Kind$Term$ref$(Kind$Name$read$("String.nil"));var $2157 = $2158;} else {var $2159=self.charCodeAt(0);var $2160=self.slice(1);var _char$4 = Kind$Term$chr$($2159);var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));var _term$6 = Kind$Term$app$(_term$5,_char$4);var _term$7 = Kind$Term$app$(_term$6,Kind$Term$str$($2160));var $2161 = _term$7;var $2157 = $2161;};return $2157;};
 const Kind$Term$unroll_str = x0=>Kind$Term$unroll_str$(x0);function Kind$Term$reduce$(_term$1,_defs$2){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $2163=self.name;var self = Kind$Map$get$($2163,_defs$2);switch(self._){case 'Maybe.some':var $2165=self.value;var self = $2165;switch(self._){case 'Kind.Def.new':var $2167=self.term;var $2168 = Kind$Term$reduce$($2167,_defs$2);var $2166 = $2168;break;};var $2164 = $2166;break;case 'Maybe.none':var $2169 = Kind$Term$ref$($2163);var $2164 = $2169;break;};var $2162 = $2164;break;case 'Kind.Term.app':var $2170=self.func;var $2171=self.argm;var _func$5 = Kind$Term$reduce$($2170,_defs$2);var self = _func$5;switch(self._){case 'Kind.Term.lam':var $2173=self.body;var $2174 = Kind$Term$reduce$($2173($2171),_defs$2);var $2172 = $2174;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $2175 = _term$1;var $2172 = $2175;break;};var $2162 = $2172;break;case 'Kind.Term.let':var $2176=self.expr;var $2177=self.body;var $2178 = Kind$Term$reduce$($2177($2176),_defs$2);var $2162 = $2178;break;case 'Kind.Term.def':var $2179=self.expr;var $2180=self.body;var $2181 = Kind$Term$reduce$($2180($2179),_defs$2);var $2162 = $2181;break;case 'Kind.Term.ann':var $2182=self.term;var $2183 = Kind$Term$reduce$($2182,_defs$2);var $2162 = $2183;break;case 'Kind.Term.nat':var $2184=self.natx;var $2185 = Kind$Term$reduce$(Kind$Term$unroll_nat$($2184),_defs$2);var $2162 = $2185;break;case 'Kind.Term.chr':var $2186=self.chrx;var $2187 = Kind$Term$reduce$(Kind$Term$unroll_chr$($2186),_defs$2);var $2162 = $2187;break;case 'Kind.Term.str':var $2188=self.strx;var $2189 = Kind$Term$reduce$(Kind$Term$unroll_str$($2188),_defs$2);var $2162 = $2189;break;case 'Kind.Term.ori':var $2190=self.expr;var $2191 = Kind$Term$reduce$($2190,_defs$2);var $2162 = $2191;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.cse':var $2192 = _term$1;var $2162 = $2192;break;};return $2162;};
 const Kind$Term$reduce = x0=>x1=>Kind$Term$reduce$(x0,x1); const BitsMap$new = ({_:'BitsMap.new'});
 const Kind$Map$new = BitsMap$new;
function Kind$Def$new$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_stat$9){var $2193 = ({_:'Kind.Def.new','file':_file$1,'code':_code$2,'orig':_orig$3,'name':_name$4,'term':_term$5,'type':_type$6,'isct':_isct$7,'arit':_arit$8,'stat':_stat$9});return $2193;};
 const Kind$Def$new = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>Kind$Def$new$(x0,x1,x2,x3,x4,x5,x6,x7,x8); const Kind$Status$init = ({_:'Kind.Status.init'});
function Kind$Parser$case$with$(_idx$1,_code$2){var self = Kind$Parser$text$("with",_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2195=self.idx;var $2196=self.code;var $2197=self.err;var $2198 = Parser$Reply$error$($2195,$2196,$2197);var $2194 = $2198;break;case 'Parser.Reply.value':var $2199=self.idx;var $2200=self.code;var self = Kind$Parser$name1$($2199,$2200);switch(self._){case 'Parser.Reply.error':var $2202=self.idx;var $2203=self.code;var $2204=self.err;var $2205 = Parser$Reply$error$($2202,$2203,$2204);var $2201 = $2205;break;case 'Parser.Reply.value':var $2206=self.idx;var $2207=self.code;var $2208=self.val;var self = Kind$Parser$text$(":",$2206,$2207);switch(self._){case 'Parser.Reply.error':var $2210=self.idx;var $2211=self.code;var $2212=self.err;var $2213 = Parser$Reply$error$($2210,$2211,$2212);var $2209 = $2213;break;case 'Parser.Reply.value':var $2214=self.idx;var $2215=self.code;var self = Kind$Parser$term$($2214,$2215);switch(self._){case 'Parser.Reply.error':var $2217=self.idx;var $2218=self.code;var $2219=self.err;var $2220 = Parser$Reply$error$($2217,$2218,$2219);var $2216 = $2220;break;case 'Parser.Reply.value':var $2221=self.idx;var $2222=self.code;var $2223=self.val;var self = Kind$Parser$text$("=",$2221,$2222);switch(self._){case 'Parser.Reply.error':var $2225=self.idx;var $2226=self.code;var $2227=self.err;var $2228 = Parser$Reply$error$($2225,$2226,$2227);var $2224 = $2228;break;case 'Parser.Reply.value':var $2229=self.idx;var $2230=self.code;var self = Kind$Parser$term$($2229,$2230);switch(self._){case 'Parser.Reply.error':var $2232=self.idx;var $2233=self.code;var $2234=self.err;var $2235 = Parser$Reply$error$($2232,$2233,$2234);var $2231 = $2235;break;case 'Parser.Reply.value':var $2236=self.idx;var $2237=self.code;var $2238=self.val;var $2239 = Parser$Reply$value$($2236,$2237,Kind$Def$new$("","",Pair$new$(0n,0n),$2208,$2238,$2223,Bool$false,0n,Kind$Status$init));var $2231 = $2239;break;};var $2224 = $2231;break;};var $2216 = $2224;break;};var $2209 = $2216;break;};var $2201 = $2209;break;};var $2194 = $2201;break;};return $2194;};
 const Kind$Parser$case$with = x0=>x1=>Kind$Parser$case$with$(x0,x1);function Kind$Parser$case$case$(_idx$1,_code$2){var self = Kind$Parser$name1$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2241=self.idx;var $2242=self.code;var $2243=self.err;var $2244 = Parser$Reply$error$($2241,$2242,$2243);var $2240 = $2244;break;case 'Parser.Reply.value':var $2245=self.idx;var $2246=self.code;var $2247=self.val;var self = Kind$Parser$text$(":",$2245,$2246);switch(self._){case 'Parser.Reply.error':var $2249=self.idx;var $2250=self.code;var $2251=self.err;var $2252 = Parser$Reply$error$($2249,$2250,$2251);var $2248 = $2252;break;case 'Parser.Reply.value':var $2253=self.idx;var $2254=self.code;var self = Kind$Parser$term$($2253,$2254);switch(self._){case 'Parser.Reply.error':var $2256=self.idx;var $2257=self.code;var $2258=self.err;var $2259 = Parser$Reply$error$($2256,$2257,$2258);var $2255 = $2259;break;case 'Parser.Reply.value':var $2260=self.idx;var $2261=self.code;var $2262=self.val;var self = Parser$maybe$(Kind$Parser$text(","),$2260,$2261);switch(self._){case 'Parser.Reply.error':var $2264=self.idx;var $2265=self.code;var $2266=self.err;var $2267 = Parser$Reply$error$($2264,$2265,$2266);var $2263 = $2267;break;case 'Parser.Reply.value':var $2268=self.idx;var $2269=self.code;var $2270 = Parser$Reply$value$($2268,$2269,Pair$new$($2247,$2262));var $2263 = $2270;break;};var $2255 = $2263;break;};var $2248 = $2255;break;};var $2240 = $2248;break;};return $2240;};
 const Kind$Parser$case$case = x0=>x1=>Kind$Parser$case$case$(x0,x1);function BitsMap$tie$(_val$2,_lft$3,_rgt$4){var $2271 = ({_:'BitsMap.tie','val':_val$2,'lft':_lft$3,'rgt':_rgt$4});return $2271;};
 const BitsMap$tie = x0=>x1=>x2=>BitsMap$tie$(x0,x1,x2);function BitsMap$set$(_bits$2,_val$3,_map$4){var self = _bits$2;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $2273=self.slice(0,-1);var self = _map$4;switch(self._){case 'BitsMap.tie':var $2275=self.val;var $2276=self.lft;var $2277=self.rgt;var $2278 = BitsMap$tie$($2275,BitsMap$set$($2273,_val$3,$2276),$2277);var $2274 = $2278;break;case 'BitsMap.new':var $2279 = BitsMap$tie$(Maybe$none,BitsMap$set$($2273,_val$3,BitsMap$new),BitsMap$new);var $2274 = $2279;break;};var $2272 = $2274;break;case 'i':var $2280=self.slice(0,-1);var self = _map$4;switch(self._){case 'BitsMap.tie':var $2282=self.val;var $2283=self.lft;var $2284=self.rgt;var $2285 = BitsMap$tie$($2282,$2283,BitsMap$set$($2280,_val$3,$2284));var $2281 = $2285;break;case 'BitsMap.new':var $2286 = BitsMap$tie$(Maybe$none,BitsMap$new,BitsMap$set$($2280,_val$3,BitsMap$new));var $2281 = $2286;break;};var $2272 = $2281;break;case 'e':var self = _map$4;switch(self._){case 'BitsMap.tie':var $2288=self.lft;var $2289=self.rgt;var $2290 = BitsMap$tie$(Maybe$some$(_val$3),$2288,$2289);var $2287 = $2290;break;case 'BitsMap.new':var $2291 = BitsMap$tie$(Maybe$some$(_val$3),BitsMap$new,BitsMap$new);var $2287 = $2291;break;};var $2272 = $2287;break;};return $2272;};
 const BitsMap$set = x0=>x1=>x2=>BitsMap$set$(x0,x1,x2);function BitsMap$from_list$(_xs$2){var self = _xs$2;switch(self._){case 'List.cons':var $2293=self.head;var $2294=self.tail;var self = $2293;switch(self._){case 'Pair.new':var $2296=self.fst;var $2297=self.snd;var $2298 = BitsMap$set$($2296,$2297,BitsMap$from_list$($2294));var $2295 = $2298;break;};var $2292 = $2295;break;case 'List.nil':var $2299 = BitsMap$new;var $2292 = $2299;break;};return $2292;};
 const BitsMap$from_list = x0=>BitsMap$from_list$(x0);function Kind$Term$cse$(_path$1,_expr$2,_name$3,_with$4,_cses$5,_moti$6){var $2300 = ({_:'Kind.Term.cse','path':_path$1,'expr':_expr$2,'name':_name$3,'with':_with$4,'cses':_cses$5,'moti':_moti$6});return $2300;};
 const Kind$Term$cse = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Term$cse$(x0,x1,x2,x3,x4,x5);function Kind$Parser$case$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2302=self.idx;var $2303=self.code;var $2304=self.err;var $2305 = Parser$Reply$error$($2302,$2303,$2304);var $2301 = $2305;break;case 'Parser.Reply.value':var $2306=self.idx;var $2307=self.code;var $2308=self.val;var self = Kind$Parser$text$("case ",$2306,$2307);switch(self._){case 'Parser.Reply.error':var $2310=self.idx;var $2311=self.code;var $2312=self.err;var $2313 = Parser$Reply$error$($2310,$2311,$2312);var $2309 = $2313;break;case 'Parser.Reply.value':var $2314=self.idx;var $2315=self.code;var self = Kind$Parser$spaces($2314)($2315);switch(self._){case 'Parser.Reply.error':var $2317=self.idx;var $2318=self.code;var $2319=self.err;var $2320 = Parser$Reply$error$($2317,$2318,$2319);var $2316 = $2320;break;case 'Parser.Reply.value':var $2321=self.idx;var $2322=self.code;var self = Kind$Parser$term$($2321,$2322);switch(self._){case 'Parser.Reply.error':var $2324=self.idx;var $2325=self.code;var $2326=self.err;var $2327 = Parser$Reply$error$($2324,$2325,$2326);var $2323 = $2327;break;case 'Parser.Reply.value':var $2328=self.idx;var $2329=self.code;var $2330=self.val;var self = Parser$maybe$((_idx$15=>_code$16=>{var self = Kind$Parser$text$("as",_idx$15,_code$16);switch(self._){case 'Parser.Reply.error':var $2333=self.idx;var $2334=self.code;var $2335=self.err;var $2336 = Parser$Reply$error$($2333,$2334,$2335);var $2332 = $2336;break;case 'Parser.Reply.value':var $2337=self.idx;var $2338=self.code;var $2339 = Kind$Parser$name1$($2337,$2338);var $2332 = $2339;break;};return $2332;}),$2328,$2329);switch(self._){case 'Parser.Reply.error':var $2340=self.idx;var $2341=self.code;var $2342=self.err;var $2343 = Parser$Reply$error$($2340,$2341,$2342);var $2331 = $2343;break;case 'Parser.Reply.value':var $2344=self.idx;var $2345=self.code;var $2346=self.val;var self = $2346;switch(self._){case 'Maybe.some':var $2348=self.value;var $2349 = $2348;var _name$18 = $2349;break;case 'Maybe.none':var self = Kind$Term$reduce$($2330,Kind$Map$new);switch(self._){case 'Kind.Term.var':var $2351=self.name;var $2352 = $2351;var $2350 = $2352;break;case 'Kind.Term.ref':var $2353=self.name;var $2354 = $2353;var $2350 = $2354;break;case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $2355 = Kind$Name$read$("self");var $2350 = $2355;break;};var _name$18 = $2350;break;};var self = Parser$many$(Kind$Parser$case$with)($2344)($2345);switch(self._){case 'Parser.Reply.error':var $2356=self.idx;var $2357=self.code;var $2358=self.err;var $2359 = Parser$Reply$error$($2356,$2357,$2358);var $2347 = $2359;break;case 'Parser.Reply.value':var $2360=self.idx;var $2361=self.code;var $2362=self.val;var self = Kind$Parser$text$("{",$2360,$2361);switch(self._){case 'Parser.Reply.error':var $2364=self.idx;var $2365=self.code;var $2366=self.err;var $2367 = Parser$Reply$error$($2364,$2365,$2366);var $2363 = $2367;break;case 'Parser.Reply.value':var $2368=self.idx;var $2369=self.code;var self = Parser$until$(Kind$Parser$text("}"),Kind$Parser$case$case)($2368)($2369);switch(self._){case 'Parser.Reply.error':var $2371=self.idx;var $2372=self.code;var $2373=self.err;var $2374 = Parser$Reply$error$($2371,$2372,$2373);var $2370 = $2374;break;case 'Parser.Reply.value':var $2375=self.idx;var $2376=self.code;var $2377=self.val;var self = Parser$maybe$((_idx$28=>_code$29=>{var self = Kind$Parser$text$("default ",_idx$28,_code$29);switch(self._){case 'Parser.Reply.error':var $2380=self.idx;var $2381=self.code;var $2382=self.err;var $2383 = Parser$Reply$error$($2380,$2381,$2382);var $2379 = $2383;break;case 'Parser.Reply.value':var $2384=self.idx;var $2385=self.code;var self = Kind$Parser$term$($2384,$2385);switch(self._){case 'Parser.Reply.error':var $2387=self.idx;var $2388=self.code;var $2389=self.err;var $2390 = Parser$Reply$error$($2387,$2388,$2389);var $2386 = $2390;break;case 'Parser.Reply.value':var $2391=self.idx;var $2392=self.code;var $2393=self.val;var $2394 = Parser$Reply$value$($2391,$2392,$2393);var $2386 = $2394;break;};var $2379 = $2386;break;};return $2379;}),$2375,$2376);switch(self._){case 'Parser.Reply.error':var $2395=self.idx;var $2396=self.code;var $2397=self.err;var $2398 = Parser$Reply$error$($2395,$2396,$2397);var $2378 = $2398;break;case 'Parser.Reply.value':var $2399=self.idx;var $2400=self.code;var $2401=self.val;var self = $2401;switch(self._){case 'Maybe.some':var $2403=self.value;var $2404 = List$cons$(Pair$new$("_",$2403),$2377);var _cses$31 = $2404;break;case 'Maybe.none':var $2405 = $2377;var _cses$31 = $2405;break;};var _cses$32 = BitsMap$from_list$(List$mapped$(_cses$31,(_kv$32=>{var self = _kv$32;switch(self._){case 'Pair.new':var $2407=self.fst;var $2408=self.snd;var $2409 = Pair$new$((kind_name_to_bits($2407)),$2408);var $2406 = $2409;break;};return $2406;})));var self = Parser$first_of$(List$cons$((_idx$33=>_code$34=>{var self = Kind$Parser$text$(":",_idx$33,_code$34);switch(self._){case 'Parser.Reply.error':var $2411=self.idx;var $2412=self.code;var $2413=self.err;var $2414 = Parser$Reply$error$($2411,$2412,$2413);var $2410 = $2414;break;case 'Parser.Reply.value':var $2415=self.idx;var $2416=self.code;var self = Kind$Parser$term$($2415,$2416);switch(self._){case 'Parser.Reply.error':var $2418=self.idx;var $2419=self.code;var $2420=self.err;var $2421 = Parser$Reply$error$($2418,$2419,$2420);var $2417 = $2421;break;case 'Parser.Reply.value':var $2422=self.idx;var $2423=self.code;var $2424=self.val;var $2425 = Parser$Reply$value$($2422,$2423,Maybe$some$($2424));var $2417 = $2425;break;};var $2410 = $2417;break;};return $2410;}),List$cons$((_idx$33=>_code$34=>{var self = Kind$Parser$text$("!",_idx$33,_code$34);switch(self._){case 'Parser.Reply.error':var $2427=self.idx;var $2428=self.code;var $2429=self.err;var $2430 = Parser$Reply$error$($2427,$2428,$2429);var $2426 = $2430;break;case 'Parser.Reply.value':var $2431=self.idx;var $2432=self.code;var $2433 = Parser$Reply$value$($2431,$2432,Maybe$none);var $2426 = $2433;break;};return $2426;}),List$cons$((_idx$33=>_code$34=>{var $2434 = Parser$Reply$value$(_idx$33,_code$34,Maybe$some$(Kind$Term$hol$(Bits$e)));return $2434;}),List$nil))))($2399)($2400);switch(self._){case 'Parser.Reply.error':var $2435=self.idx;var $2436=self.code;var $2437=self.err;var $2438 = Parser$Reply$error$($2435,$2436,$2437);var $2402 = $2438;break;case 'Parser.Reply.value':var $2439=self.idx;var $2440=self.code;var $2441=self.val;var self = Kind$Parser$stop$($2308,$2439,$2440);switch(self._){case 'Parser.Reply.error':var $2443=self.idx;var $2444=self.code;var $2445=self.err;var $2446 = Parser$Reply$error$($2443,$2444,$2445);var $2442 = $2446;break;case 'Parser.Reply.value':var $2447=self.idx;var $2448=self.code;var $2449=self.val;var $2450 = Parser$Reply$value$($2447,$2448,Kind$Term$ori$($2449,Kind$Term$cse$(Bits$e,$2330,_name$18,$2362,_cses$32,$2441)));var $2442 = $2450;break;};var $2402 = $2442;break;};var $2378 = $2402;break;};var $2370 = $2378;break;};var $2363 = $2370;break;};var $2347 = $2363;break;};var $2331 = $2347;break;};var $2323 = $2331;break;};var $2316 = $2323;break;};var $2309 = $2316;break;};var $2301 = $2309;break;};return $2301;};
 const Kind$Parser$case = x0=>x1=>Kind$Parser$case$(x0,x1);function Kind$Map$set$(_name$2,_val$3,_map$4){var $2451 = BitsMap$set$((kind_name_to_bits(_name$2)),_val$3,_map$4);return $2451;};
 const Kind$Map$set = x0=>x1=>x2=>Kind$Map$set$(x0,x1,x2);function Kind$Parser$open$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2453=self.idx;var $2454=self.code;var $2455=self.err;var $2456 = Parser$Reply$error$($2453,$2454,$2455);var $2452 = $2456;break;case 'Parser.Reply.value':var $2457=self.idx;var $2458=self.code;var $2459=self.val;var self = Kind$Parser$text$("open ",$2457,$2458);switch(self._){case 'Parser.Reply.error':var $2461=self.idx;var $2462=self.code;var $2463=self.err;var $2464 = Parser$Reply$error$($2461,$2462,$2463);var $2460 = $2464;break;case 'Parser.Reply.value':var $2465=self.idx;var $2466=self.code;var self = Kind$Parser$spaces($2465)($2466);switch(self._){case 'Parser.Reply.error':var $2468=self.idx;var $2469=self.code;var $2470=self.err;var $2471 = Parser$Reply$error$($2468,$2469,$2470);var $2467 = $2471;break;case 'Parser.Reply.value':var $2472=self.idx;var $2473=self.code;var self = Kind$Parser$term$($2472,$2473);switch(self._){case 'Parser.Reply.error':var $2475=self.idx;var $2476=self.code;var $2477=self.err;var $2478 = Parser$Reply$error$($2475,$2476,$2477);var $2474 = $2478;break;case 'Parser.Reply.value':var $2479=self.idx;var $2480=self.code;var $2481=self.val;var self = Parser$maybe$((_idx$15=>_code$16=>{var self = Kind$Parser$text$("as",_idx$15,_code$16);switch(self._){case 'Parser.Reply.error':var $2484=self.idx;var $2485=self.code;var $2486=self.err;var $2487 = Parser$Reply$error$($2484,$2485,$2486);var $2483 = $2487;break;case 'Parser.Reply.value':var $2488=self.idx;var $2489=self.code;var $2490 = Kind$Parser$name1$($2488,$2489);var $2483 = $2490;break;};return $2483;}),$2479,$2480);switch(self._){case 'Parser.Reply.error':var $2491=self.idx;var $2492=self.code;var $2493=self.err;var $2494 = Parser$Reply$error$($2491,$2492,$2493);var $2482 = $2494;break;case 'Parser.Reply.value':var $2495=self.idx;var $2496=self.code;var $2497=self.val;var self = Parser$maybe$(Kind$Parser$text(";"),$2495,$2496);switch(self._){case 'Parser.Reply.error':var $2499=self.idx;var $2500=self.code;var $2501=self.err;var $2502 = Parser$Reply$error$($2499,$2500,$2501);var $2498 = $2502;break;case 'Parser.Reply.value':var $2503=self.idx;var $2504=self.code;var self = $2497;switch(self._){case 'Maybe.some':var $2506=self.value;var $2507 = $2506;var _name$21 = $2507;break;case 'Maybe.none':var self = Kind$Term$reduce$($2481,Kind$Map$new);switch(self._){case 'Kind.Term.var':var $2509=self.name;var $2510 = $2509;var $2508 = $2510;break;case 'Kind.Term.ref':var $2511=self.name;var $2512 = $2511;var $2508 = $2512;break;case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $2513 = Kind$Name$read$("self");var $2508 = $2513;break;};var _name$21 = $2508;break;};var _wyth$22 = List$nil;var self = Kind$Parser$term$($2503,$2504);switch(self._){case 'Parser.Reply.error':var $2514=self.idx;var $2515=self.code;var $2516=self.err;var $2517 = Parser$Reply$error$($2514,$2515,$2516);var $2505 = $2517;break;case 'Parser.Reply.value':var $2518=self.idx;var $2519=self.code;var $2520=self.val;var _cses$26 = Kind$Map$set$("_",$2520,Kind$Map$new);var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));var self = Kind$Parser$stop$($2459,$2518,$2519);switch(self._){case 'Parser.Reply.error':var $2522=self.idx;var $2523=self.code;var $2524=self.err;var $2525 = Parser$Reply$error$($2522,$2523,$2524);var $2521 = $2525;break;case 'Parser.Reply.value':var $2526=self.idx;var $2527=self.code;var $2528=self.val;var $2529 = Parser$Reply$value$($2526,$2527,Kind$Term$ori$($2528,Kind$Term$cse$(Bits$e,$2481,_name$21,_wyth$22,_cses$26,_moti$27)));var $2521 = $2529;break;};var $2505 = $2521;break;};var $2498 = $2505;break;};var $2482 = $2498;break;};var $2474 = $2482;break;};var $2467 = $2474;break;};var $2460 = $2467;break;};var $2452 = $2460;break;};return $2452;};
 const Kind$Parser$open = x0=>x1=>Kind$Parser$open$(x0,x1);function Kind$Parser$without$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2531=self.idx;var $2532=self.code;var $2533=self.err;var $2534 = Parser$Reply$error$($2531,$2532,$2533);var $2530 = $2534;break;case 'Parser.Reply.value':var $2535=self.idx;var $2536=self.code;var $2537=self.val;var self = Kind$Parser$text$("without ",$2535,$2536);switch(self._){case 'Parser.Reply.error':var $2539=self.idx;var $2540=self.code;var $2541=self.err;var $2542 = Parser$Reply$error$($2539,$2540,$2541);var $2538 = $2542;break;case 'Parser.Reply.value':var $2543=self.idx;var $2544=self.code;var self = Kind$Parser$name1$($2543,$2544);switch(self._){case 'Parser.Reply.error':var $2546=self.idx;var $2547=self.code;var $2548=self.err;var $2549 = Parser$Reply$error$($2546,$2547,$2548);var $2545 = $2549;break;case 'Parser.Reply.value':var $2550=self.idx;var $2551=self.code;var $2552=self.val;var self = Kind$Parser$text$(":",$2550,$2551);switch(self._){case 'Parser.Reply.error':var $2554=self.idx;var $2555=self.code;var $2556=self.err;var $2557 = Parser$Reply$error$($2554,$2555,$2556);var $2553 = $2557;break;case 'Parser.Reply.value':var $2558=self.idx;var $2559=self.code;var self = Kind$Parser$term$($2558,$2559);switch(self._){case 'Parser.Reply.error':var $2561=self.idx;var $2562=self.code;var $2563=self.err;var $2564 = Parser$Reply$error$($2561,$2562,$2563);var $2560 = $2564;break;case 'Parser.Reply.value':var $2565=self.idx;var $2566=self.code;var $2567=self.val;var self = Kind$Parser$term$($2565,$2566);switch(self._){case 'Parser.Reply.error':var $2569=self.idx;var $2570=self.code;var $2571=self.err;var $2572 = Parser$Reply$error$($2569,$2570,$2571);var $2568 = $2572;break;case 'Parser.Reply.value':var $2573=self.idx;var $2574=self.code;var $2575=self.val;var self = Kind$Parser$stop$($2537,$2573,$2574);switch(self._){case 'Parser.Reply.error':var $2577=self.idx;var $2578=self.code;var $2579=self.err;var $2580 = Parser$Reply$error$($2577,$2578,$2579);var $2576 = $2580;break;case 'Parser.Reply.value':var $2581=self.idx;var $2582=self.code;var $2583=self.val;var _term$24 = Kind$Term$ref$($2552);var _term$25 = Kind$Term$app$(_term$24,Kind$Term$lam$("x",(_x$25=>{var $2585 = Kind$Term$hol$(Bits$e);return $2585;})));var _term$26 = Kind$Term$app$(_term$25,$2567);var _term$27 = Kind$Term$app$(_term$26,Kind$Term$lam$($2552,(_x$27=>{var $2586 = $2575;return $2586;})));var $2584 = Parser$Reply$value$($2581,$2582,Kind$Term$ori$($2583,_term$27));var $2576 = $2584;break;};var $2568 = $2576;break;};var $2560 = $2568;break;};var $2553 = $2560;break;};var $2545 = $2553;break;};var $2538 = $2545;break;};var $2530 = $2538;break;};return $2530;};
 const Kind$Parser$without = x0=>x1=>Kind$Parser$without$(x0,x1);function Kind$Parser$switch$case$(_idx$1,_code$2){var self = Kind$Parser$term$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2588=self.idx;var $2589=self.code;var $2590=self.err;var $2591 = Parser$Reply$error$($2588,$2589,$2590);var $2587 = $2591;break;case 'Parser.Reply.value':var $2592=self.idx;var $2593=self.code;var $2594=self.val;var self = Kind$Parser$text$(":",$2592,$2593);switch(self._){case 'Parser.Reply.error':var $2596=self.idx;var $2597=self.code;var $2598=self.err;var $2599 = Parser$Reply$error$($2596,$2597,$2598);var $2595 = $2599;break;case 'Parser.Reply.value':var $2600=self.idx;var $2601=self.code;var self = Kind$Parser$term$($2600,$2601);switch(self._){case 'Parser.Reply.error':var $2603=self.idx;var $2604=self.code;var $2605=self.err;var $2606 = Parser$Reply$error$($2603,$2604,$2605);var $2602 = $2606;break;case 'Parser.Reply.value':var $2607=self.idx;var $2608=self.code;var $2609=self.val;var $2610 = Parser$Reply$value$($2607,$2608,Pair$new$($2594,$2609));var $2602 = $2610;break;};var $2595 = $2602;break;};var $2587 = $2595;break;};return $2587;};
 const Kind$Parser$switch$case = x0=>x1=>Kind$Parser$switch$case$(x0,x1);function Kind$Parser$switch$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2612=self.idx;var $2613=self.code;var $2614=self.err;var $2615 = Parser$Reply$error$($2612,$2613,$2614);var $2611 = $2615;break;case 'Parser.Reply.value':var $2616=self.idx;var $2617=self.code;var $2618=self.val;var self = Kind$Parser$text$("switch ",$2616,$2617);switch(self._){case 'Parser.Reply.error':var $2620=self.idx;var $2621=self.code;var $2622=self.err;var $2623 = Parser$Reply$error$($2620,$2621,$2622);var $2619 = $2623;break;case 'Parser.Reply.value':var $2624=self.idx;var $2625=self.code;var self = Kind$Parser$term$($2624,$2625);switch(self._){case 'Parser.Reply.error':var $2627=self.idx;var $2628=self.code;var $2629=self.err;var $2630 = Parser$Reply$error$($2627,$2628,$2629);var $2626 = $2630;break;case 'Parser.Reply.value':var $2631=self.idx;var $2632=self.code;var $2633=self.val;var self = Kind$Parser$text$("{",$2631,$2632);switch(self._){case 'Parser.Reply.error':var $2635=self.idx;var $2636=self.code;var $2637=self.err;var $2638 = Parser$Reply$error$($2635,$2636,$2637);var $2634 = $2638;break;case 'Parser.Reply.value':var $2639=self.idx;var $2640=self.code;var self = Parser$until$(Kind$Parser$text("}"),Kind$Parser$switch$case)($2639)($2640);switch(self._){case 'Parser.Reply.error':var $2642=self.idx;var $2643=self.code;var $2644=self.err;var $2645 = Parser$Reply$error$($2642,$2643,$2644);var $2641 = $2645;break;case 'Parser.Reply.value':var $2646=self.idx;var $2647=self.code;var $2648=self.val;var self = Kind$Parser$text$("default ",$2646,$2647);switch(self._){case 'Parser.Reply.error':var $2650=self.idx;var $2651=self.code;var $2652=self.err;var $2653 = Parser$Reply$error$($2650,$2651,$2652);var $2649 = $2653;break;case 'Parser.Reply.value':var $2654=self.idx;var $2655=self.code;var self = Kind$Parser$term$($2654,$2655);switch(self._){case 'Parser.Reply.error':var $2657=self.idx;var $2658=self.code;var $2659=self.err;var $2660 = Parser$Reply$error$($2657,$2658,$2659);var $2656 = $2660;break;case 'Parser.Reply.value':var $2661=self.idx;var $2662=self.code;var $2663=self.val;var self = Kind$Parser$stop$($2618,$2661,$2662);switch(self._){case 'Parser.Reply.error':var $2665=self.idx;var $2666=self.code;var $2667=self.err;var $2668 = Parser$Reply$error$($2665,$2666,$2667);var $2664 = $2668;break;case 'Parser.Reply.value':var $2669=self.idx;var $2670=self.code;var $2671=self.val;var _term$27 = List$fold$($2648,$2663,(_cse$27=>_rest$28=>{var self = _cse$27;switch(self._){case 'Pair.new':var $2674=self.fst;var $2675=self.snd;var _term$31 = Kind$Term$app$($2633,$2674);var _term$32 = Kind$Term$app$(_term$31,Kind$Term$lam$("",(_x$32=>{var $2677 = Kind$Term$hol$(Bits$e);return $2677;})));var _term$33 = Kind$Term$app$(_term$32,$2675);var _term$34 = Kind$Term$app$(_term$33,_rest$28);var $2676 = _term$34;var $2673 = $2676;break;};return $2673;}));var $2672 = Parser$Reply$value$($2669,$2670,Kind$Term$ori$($2671,_term$27));var $2664 = $2672;break;};var $2656 = $2664;break;};var $2649 = $2656;break;};var $2641 = $2649;break;};var $2634 = $2641;break;};var $2626 = $2634;break;};var $2619 = $2626;break;};var $2611 = $2619;break;};return $2611;};
 const Kind$Parser$switch = x0=>x1=>Kind$Parser$switch$(x0,x1);function Parser$digit$(_idx$1,_code$2){var self = _code$2;if (self.length===0) {var $2679 = Parser$Reply$error$(_idx$1,_code$2,"Not a digit.");var $2678 = $2679;} else {var $2680=self.charCodeAt(0);var $2681=self.slice(1);var _sidx$5 = Nat$succ$(_idx$1);var self = ($2680===48);if (self) {var $2683 = Parser$Reply$value$(_sidx$5,$2681,0n);var $2682 = $2683;} else {var self = ($2680===49);if (self) {var $2685 = Parser$Reply$value$(_sidx$5,$2681,1n);var $2684 = $2685;} else {var self = ($2680===50);if (self) {var $2687 = Parser$Reply$value$(_sidx$5,$2681,2n);var $2686 = $2687;} else {var self = ($2680===51);if (self) {var $2689 = Parser$Reply$value$(_sidx$5,$2681,3n);var $2688 = $2689;} else {var self = ($2680===52);if (self) {var $2691 = Parser$Reply$value$(_sidx$5,$2681,4n);var $2690 = $2691;} else {var self = ($2680===53);if (self) {var $2693 = Parser$Reply$value$(_sidx$5,$2681,5n);var $2692 = $2693;} else {var self = ($2680===54);if (self) {var $2695 = Parser$Reply$value$(_sidx$5,$2681,6n);var $2694 = $2695;} else {var self = ($2680===55);if (self) {var $2697 = Parser$Reply$value$(_sidx$5,$2681,7n);var $2696 = $2697;} else {var self = ($2680===56);if (self) {var $2699 = Parser$Reply$value$(_sidx$5,$2681,8n);var $2698 = $2699;} else {var self = ($2680===57);if (self) {var $2701 = Parser$Reply$value$(_sidx$5,$2681,9n);var $2700 = $2701;} else {var $2702 = Parser$Reply$error$(_idx$1,_code$2,"Not a digit.");var $2700 = $2702;};var $2698 = $2700;};var $2696 = $2698;};var $2694 = $2696;};var $2692 = $2694;};var $2690 = $2692;};var $2688 = $2690;};var $2686 = $2688;};var $2684 = $2686;};var $2682 = $2684;};var $2678 = $2682;};return $2678;};
 const Parser$digit = x0=>x1=>Parser$digit$(x0,x1);  const Nat$add = a0=>a1=>(a0+a1);
  const Nat$mul = a0=>a1=>(a0*a1);
function Nat$from_base$go$(_b$1,_ds$2,_p$3,_res$4){var Nat$from_base$go$=(_b$1,_ds$2,_p$3,_res$4)=>({ctr:'TCO',arg:[_b$1,_ds$2,_p$3,_res$4]});var Nat$from_base$go=_b$1=>_ds$2=>_p$3=>_res$4=>Nat$from_base$go$(_b$1,_ds$2,_p$3,_res$4);var arg=[_b$1,_ds$2,_p$3,_res$4];while(true){let [_b$1,_ds$2,_p$3,_res$4]=arg;var R=(()=>{var self = _ds$2;switch(self._){case 'List.cons':var $2703=self.head;var $2704=self.tail;var $2705 = Nat$from_base$go$(_b$1,$2704,(_b$1*_p$3),(($2703*_p$3)+_res$4));return $2705;case 'List.nil':var $2706 = _res$4;return $2706;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Nat$from_base$go = x0=>x1=>x2=>x3=>Nat$from_base$go$(x0,x1,x2,x3);function Nat$from_base$(_base$1,_ds$2){var $2707 = Nat$from_base$go$(_base$1,List$reverse$(_ds$2),1n,0n);return $2707;};
 const Nat$from_base = x0=>x1=>Nat$from_base$(x0,x1);function Parser$nat$(_idx$1,_code$2){var self = Parser$many1$(Parser$digit,_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2709=self.idx;var $2710=self.code;var $2711=self.err;var $2712 = Parser$Reply$error$($2709,$2710,$2711);var $2708 = $2712;break;case 'Parser.Reply.value':var $2713=self.idx;var $2714=self.code;var $2715=self.val;var $2716 = Parser$Reply$value$($2713,$2714,Nat$from_base$(10n,$2715));var $2708 = $2716;break;};return $2708;};
 const Parser$nat = x0=>x1=>Parser$nat$(x0,x1);function Bits$tail$(_a$1){var self = _a$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $2718=self.slice(0,-1);var $2719 = $2718;var $2717 = $2719;break;case 'i':var $2720=self.slice(0,-1);var $2721 = $2720;var $2717 = $2721;break;case 'e':var $2722 = Bits$e;var $2717 = $2722;break;};return $2717;};
 const Bits$tail = x0=>Bits$tail$(x0);function Bits$inc$(_a$1){var self = _a$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $2724=self.slice(0,-1);var $2725 = ($2724+'1');var $2723 = $2725;break;case 'i':var $2726=self.slice(0,-1);var $2727 = (Bits$inc$($2726)+'0');var $2723 = $2727;break;case 'e':var $2728 = (Bits$e+'1');var $2723 = $2728;break;};return $2723;};
 const Bits$inc = x0=>Bits$inc$(x0);  const Nat$to_bits = a0=>(nat_to_bits(a0));
function Maybe$to_bool$(_m$2){var self = _m$2;switch(self._){case 'Maybe.none':var $2730 = Bool$false;var $2729 = $2730;break;case 'Maybe.some':var $2731 = Bool$true;var $2729 = $2731;break;};return $2729;};
 const Maybe$to_bool = x0=>Maybe$to_bool$(x0);function Kind$Term$gol$(_name$1,_dref$2,_verb$3){var $2732 = ({_:'Kind.Term.gol','name':_name$1,'dref':_dref$2,'verb':_verb$3});return $2732;};
 const Kind$Term$gol = x0=>x1=>x2=>Kind$Term$gol$(x0,x1,x2);function Kind$Parser$goal$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2734=self.idx;var $2735=self.code;var $2736=self.err;var $2737 = Parser$Reply$error$($2734,$2735,$2736);var $2733 = $2737;break;case 'Parser.Reply.value':var $2738=self.idx;var $2739=self.code;var $2740=self.val;var self = Kind$Parser$text$("?",$2738,$2739);switch(self._){case 'Parser.Reply.error':var $2742=self.idx;var $2743=self.code;var $2744=self.err;var $2745 = Parser$Reply$error$($2742,$2743,$2744);var $2741 = $2745;break;case 'Parser.Reply.value':var $2746=self.idx;var $2747=self.code;var self = Kind$Parser$name$($2746,$2747);switch(self._){case 'Parser.Reply.error':var $2749=self.idx;var $2750=self.code;var $2751=self.err;var $2752 = Parser$Reply$error$($2749,$2750,$2751);var $2748 = $2752;break;case 'Parser.Reply.value':var $2753=self.idx;var $2754=self.code;var $2755=self.val;var self = Parser$many$((_idx$12=>_code$13=>{var self = Kind$Parser$text$("-",_idx$12,_code$13);switch(self._){case 'Parser.Reply.error':var $2758=self.idx;var $2759=self.code;var $2760=self.err;var $2761 = Parser$Reply$error$($2758,$2759,$2760);var $2757 = $2761;break;case 'Parser.Reply.value':var $2762=self.idx;var $2763=self.code;var self = Parser$nat$($2762,$2763);switch(self._){case 'Parser.Reply.error':var $2765=self.idx;var $2766=self.code;var $2767=self.err;var $2768 = Parser$Reply$error$($2765,$2766,$2767);var $2764 = $2768;break;case 'Parser.Reply.value':var $2769=self.idx;var $2770=self.code;var $2771=self.val;var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($2771)))));var $2772 = Parser$Reply$value$($2769,$2770,_bits$20);var $2764 = $2772;break;};var $2757 = $2764;break;};return $2757;}))($2753)($2754);switch(self._){case 'Parser.Reply.error':var $2773=self.idx;var $2774=self.code;var $2775=self.err;var $2776 = Parser$Reply$error$($2773,$2774,$2775);var $2756 = $2776;break;case 'Parser.Reply.value':var $2777=self.idx;var $2778=self.code;var $2779=self.val;var self = Parser$maybe$(Parser$text("-"),$2777,$2778);switch(self._){case 'Parser.Reply.error':var $2781=self.idx;var $2782=self.code;var $2783=self.err;var $2784 = Parser$Reply$error$($2781,$2782,$2783);var self = $2784;break;case 'Parser.Reply.value':var $2785=self.idx;var $2786=self.code;var $2787=self.val;var $2788 = Parser$Reply$value$($2785,$2786,Maybe$to_bool$($2787));var self = $2788;break;};switch(self._){case 'Parser.Reply.error':var $2789=self.idx;var $2790=self.code;var $2791=self.err;var $2792 = Parser$Reply$error$($2789,$2790,$2791);var $2780 = $2792;break;case 'Parser.Reply.value':var $2793=self.idx;var $2794=self.code;var $2795=self.val;var self = Kind$Parser$stop$($2740,$2793,$2794);switch(self._){case 'Parser.Reply.error':var $2797=self.idx;var $2798=self.code;var $2799=self.err;var $2800 = Parser$Reply$error$($2797,$2798,$2799);var $2796 = $2800;break;case 'Parser.Reply.value':var $2801=self.idx;var $2802=self.code;var $2803=self.val;var $2804 = Parser$Reply$value$($2801,$2802,Kind$Term$ori$($2803,Kind$Term$gol$($2755,$2779,$2795)));var $2796 = $2804;break;};var $2780 = $2796;break;};var $2756 = $2780;break;};var $2748 = $2756;break;};var $2741 = $2748;break;};var $2733 = $2741;break;};return $2733;};
 const Kind$Parser$goal = x0=>x1=>Kind$Parser$goal$(x0,x1);function Kind$Parser$hole$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2806=self.idx;var $2807=self.code;var $2808=self.err;var $2809 = Parser$Reply$error$($2806,$2807,$2808);var $2805 = $2809;break;case 'Parser.Reply.value':var $2810=self.idx;var $2811=self.code;var $2812=self.val;var self = Kind$Parser$text$("_",$2810,$2811);switch(self._){case 'Parser.Reply.error':var $2814=self.idx;var $2815=self.code;var $2816=self.err;var $2817 = Parser$Reply$error$($2814,$2815,$2816);var $2813 = $2817;break;case 'Parser.Reply.value':var $2818=self.idx;var $2819=self.code;var self = Kind$Parser$stop$($2812,$2818,$2819);switch(self._){case 'Parser.Reply.error':var $2821=self.idx;var $2822=self.code;var $2823=self.err;var $2824 = Parser$Reply$error$($2821,$2822,$2823);var $2820 = $2824;break;case 'Parser.Reply.value':var $2825=self.idx;var $2826=self.code;var $2827=self.val;var $2828 = Parser$Reply$value$($2825,$2826,Kind$Term$ori$($2827,Kind$Term$hol$(Bits$e)));var $2820 = $2828;break;};var $2813 = $2820;break;};var $2805 = $2813;break;};return $2805;};
 const Kind$Parser$hole = x0=>x1=>Kind$Parser$hole$(x0,x1);function Kind$Parser$u8$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2830=self.idx;var $2831=self.code;var $2832=self.err;var $2833 = Parser$Reply$error$($2830,$2831,$2832);var $2829 = $2833;break;case 'Parser.Reply.value':var $2834=self.idx;var $2835=self.code;var $2836=self.val;var self = Kind$Parser$spaces($2834)($2835);switch(self._){case 'Parser.Reply.error':var $2838=self.idx;var $2839=self.code;var $2840=self.err;var $2841 = Parser$Reply$error$($2838,$2839,$2840);var $2837 = $2841;break;case 'Parser.Reply.value':var $2842=self.idx;var $2843=self.code;var self = Parser$nat$($2842,$2843);switch(self._){case 'Parser.Reply.error':var $2845=self.idx;var $2846=self.code;var $2847=self.err;var $2848 = Parser$Reply$error$($2845,$2846,$2847);var $2844 = $2848;break;case 'Parser.Reply.value':var $2849=self.idx;var $2850=self.code;var $2851=self.val;var self = Parser$text$("b",$2849,$2850);switch(self._){case 'Parser.Reply.error':var $2853=self.idx;var $2854=self.code;var $2855=self.err;var $2856 = Parser$Reply$error$($2853,$2854,$2855);var $2852 = $2856;break;case 'Parser.Reply.value':var $2857=self.idx;var $2858=self.code;var _term$15 = Kind$Term$ref$("Nat.to_u8");var _term$16 = Kind$Term$app$(_term$15,Kind$Term$nat$($2851));var self = Kind$Parser$stop$($2836,$2857,$2858);switch(self._){case 'Parser.Reply.error':var $2860=self.idx;var $2861=self.code;var $2862=self.err;var $2863 = Parser$Reply$error$($2860,$2861,$2862);var $2859 = $2863;break;case 'Parser.Reply.value':var $2864=self.idx;var $2865=self.code;var $2866=self.val;var $2867 = Parser$Reply$value$($2864,$2865,Kind$Term$ori$($2866,_term$16));var $2859 = $2867;break;};var $2852 = $2859;break;};var $2844 = $2852;break;};var $2837 = $2844;break;};var $2829 = $2837;break;};return $2829;};
 const Kind$Parser$u8 = x0=>x1=>Kind$Parser$u8$(x0,x1);function Kind$Parser$u16$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2869=self.idx;var $2870=self.code;var $2871=self.err;var $2872 = Parser$Reply$error$($2869,$2870,$2871);var $2868 = $2872;break;case 'Parser.Reply.value':var $2873=self.idx;var $2874=self.code;var $2875=self.val;var self = Kind$Parser$spaces($2873)($2874);switch(self._){case 'Parser.Reply.error':var $2877=self.idx;var $2878=self.code;var $2879=self.err;var $2880 = Parser$Reply$error$($2877,$2878,$2879);var $2876 = $2880;break;case 'Parser.Reply.value':var $2881=self.idx;var $2882=self.code;var self = Parser$nat$($2881,$2882);switch(self._){case 'Parser.Reply.error':var $2884=self.idx;var $2885=self.code;var $2886=self.err;var $2887 = Parser$Reply$error$($2884,$2885,$2886);var $2883 = $2887;break;case 'Parser.Reply.value':var $2888=self.idx;var $2889=self.code;var $2890=self.val;var self = Parser$text$("s",$2888,$2889);switch(self._){case 'Parser.Reply.error':var $2892=self.idx;var $2893=self.code;var $2894=self.err;var $2895 = Parser$Reply$error$($2892,$2893,$2894);var $2891 = $2895;break;case 'Parser.Reply.value':var $2896=self.idx;var $2897=self.code;var _term$15 = Kind$Term$ref$("Nat.to_u16");var _term$16 = Kind$Term$app$(_term$15,Kind$Term$nat$($2890));var self = Kind$Parser$stop$($2875,$2896,$2897);switch(self._){case 'Parser.Reply.error':var $2899=self.idx;var $2900=self.code;var $2901=self.err;var $2902 = Parser$Reply$error$($2899,$2900,$2901);var $2898 = $2902;break;case 'Parser.Reply.value':var $2903=self.idx;var $2904=self.code;var $2905=self.val;var $2906 = Parser$Reply$value$($2903,$2904,Kind$Term$ori$($2905,_term$16));var $2898 = $2906;break;};var $2891 = $2898;break;};var $2883 = $2891;break;};var $2876 = $2883;break;};var $2868 = $2876;break;};return $2868;};
 const Kind$Parser$u16 = x0=>x1=>Kind$Parser$u16$(x0,x1);function Kind$Parser$u32$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2908=self.idx;var $2909=self.code;var $2910=self.err;var $2911 = Parser$Reply$error$($2908,$2909,$2910);var $2907 = $2911;break;case 'Parser.Reply.value':var $2912=self.idx;var $2913=self.code;var $2914=self.val;var self = Kind$Parser$spaces($2912)($2913);switch(self._){case 'Parser.Reply.error':var $2916=self.idx;var $2917=self.code;var $2918=self.err;var $2919 = Parser$Reply$error$($2916,$2917,$2918);var $2915 = $2919;break;case 'Parser.Reply.value':var $2920=self.idx;var $2921=self.code;var self = Parser$nat$($2920,$2921);switch(self._){case 'Parser.Reply.error':var $2923=self.idx;var $2924=self.code;var $2925=self.err;var $2926 = Parser$Reply$error$($2923,$2924,$2925);var $2922 = $2926;break;case 'Parser.Reply.value':var $2927=self.idx;var $2928=self.code;var $2929=self.val;var self = Parser$text$("u",$2927,$2928);switch(self._){case 'Parser.Reply.error':var $2931=self.idx;var $2932=self.code;var $2933=self.err;var $2934 = Parser$Reply$error$($2931,$2932,$2933);var $2930 = $2934;break;case 'Parser.Reply.value':var $2935=self.idx;var $2936=self.code;var _term$15 = Kind$Term$ref$("Nat.to_u32");var _term$16 = Kind$Term$app$(_term$15,Kind$Term$nat$($2929));var self = Kind$Parser$stop$($2914,$2935,$2936);switch(self._){case 'Parser.Reply.error':var $2938=self.idx;var $2939=self.code;var $2940=self.err;var $2941 = Parser$Reply$error$($2938,$2939,$2940);var $2937 = $2941;break;case 'Parser.Reply.value':var $2942=self.idx;var $2943=self.code;var $2944=self.val;var $2945 = Parser$Reply$value$($2942,$2943,Kind$Term$ori$($2944,_term$16));var $2937 = $2945;break;};var $2930 = $2937;break;};var $2922 = $2930;break;};var $2915 = $2922;break;};var $2907 = $2915;break;};return $2907;};
 const Kind$Parser$u32 = x0=>x1=>Kind$Parser$u32$(x0,x1);function Kind$Parser$u64$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2947=self.idx;var $2948=self.code;var $2949=self.err;var $2950 = Parser$Reply$error$($2947,$2948,$2949);var $2946 = $2950;break;case 'Parser.Reply.value':var $2951=self.idx;var $2952=self.code;var $2953=self.val;var self = Kind$Parser$spaces($2951)($2952);switch(self._){case 'Parser.Reply.error':var $2955=self.idx;var $2956=self.code;var $2957=self.err;var $2958 = Parser$Reply$error$($2955,$2956,$2957);var $2954 = $2958;break;case 'Parser.Reply.value':var $2959=self.idx;var $2960=self.code;var self = Parser$nat$($2959,$2960);switch(self._){case 'Parser.Reply.error':var $2962=self.idx;var $2963=self.code;var $2964=self.err;var $2965 = Parser$Reply$error$($2962,$2963,$2964);var $2961 = $2965;break;case 'Parser.Reply.value':var $2966=self.idx;var $2967=self.code;var $2968=self.val;var self = Parser$text$("l",$2966,$2967);switch(self._){case 'Parser.Reply.error':var $2970=self.idx;var $2971=self.code;var $2972=self.err;var $2973 = Parser$Reply$error$($2970,$2971,$2972);var $2969 = $2973;break;case 'Parser.Reply.value':var $2974=self.idx;var $2975=self.code;var _term$15 = Kind$Term$ref$("Nat.to_u64");var _term$16 = Kind$Term$app$(_term$15,Kind$Term$nat$($2968));var self = Kind$Parser$stop$($2953,$2974,$2975);switch(self._){case 'Parser.Reply.error':var $2977=self.idx;var $2978=self.code;var $2979=self.err;var $2980 = Parser$Reply$error$($2977,$2978,$2979);var $2976 = $2980;break;case 'Parser.Reply.value':var $2981=self.idx;var $2982=self.code;var $2983=self.val;var $2984 = Parser$Reply$value$($2981,$2982,Kind$Term$ori$($2983,_term$16));var $2976 = $2984;break;};var $2969 = $2976;break;};var $2961 = $2969;break;};var $2954 = $2961;break;};var $2946 = $2954;break;};return $2946;};
 const Kind$Parser$u64 = x0=>x1=>Kind$Parser$u64$(x0,x1);function Kind$Parser$nat$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $2986=self.idx;var $2987=self.code;var $2988=self.err;var $2989 = Parser$Reply$error$($2986,$2987,$2988);var $2985 = $2989;break;case 'Parser.Reply.value':var $2990=self.idx;var $2991=self.code;var $2992=self.val;var self = Kind$Parser$spaces($2990)($2991);switch(self._){case 'Parser.Reply.error':var $2994=self.idx;var $2995=self.code;var $2996=self.err;var $2997 = Parser$Reply$error$($2994,$2995,$2996);var $2993 = $2997;break;case 'Parser.Reply.value':var $2998=self.idx;var $2999=self.code;var self = Parser$nat$($2998,$2999);switch(self._){case 'Parser.Reply.error':var $3001=self.idx;var $3002=self.code;var $3003=self.err;var $3004 = Parser$Reply$error$($3001,$3002,$3003);var $3000 = $3004;break;case 'Parser.Reply.value':var $3005=self.idx;var $3006=self.code;var $3007=self.val;var self = Kind$Parser$stop$($2992,$3005,$3006);switch(self._){case 'Parser.Reply.error':var $3009=self.idx;var $3010=self.code;var $3011=self.err;var $3012 = Parser$Reply$error$($3009,$3010,$3011);var $3008 = $3012;break;case 'Parser.Reply.value':var $3013=self.idx;var $3014=self.code;var $3015=self.val;var $3016 = Parser$Reply$value$($3013,$3014,Kind$Term$ori$($3015,Kind$Term$nat$($3007)));var $3008 = $3016;break;};var $3000 = $3008;break;};var $2993 = $3000;break;};var $2985 = $2993;break;};return $2985;};
 const Kind$Parser$nat = x0=>x1=>Kind$Parser$nat$(x0,x1);  const String$eql = a0=>a1=>(a0===a1);
function Parser$fail$(_error$2,_idx$3,_code$4){var $3017 = Parser$Reply$error$(_idx$3,_code$4,_error$2);return $3017;};
 const Parser$fail = x0=>x1=>x2=>Parser$fail$(x0,x1,x2); const Kind$Term$typ = ({_:'Kind.Term.typ'});
function Kind$Parser$reference$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $3019=self.idx;var $3020=self.code;var $3021=self.err;var $3022 = Parser$Reply$error$($3019,$3020,$3021);var $3018 = $3022;break;case 'Parser.Reply.value':var $3023=self.idx;var $3024=self.code;var $3025=self.val;var self = Kind$Parser$name1$($3023,$3024);switch(self._){case 'Parser.Reply.error':var $3027=self.idx;var $3028=self.code;var $3029=self.err;var $3030 = Parser$Reply$error$($3027,$3028,$3029);var $3026 = $3030;break;case 'Parser.Reply.value':var $3031=self.idx;var $3032=self.code;var $3033=self.val;var self = ($3033==="case");if (self) {var $3035 = Parser$fail("Reserved keyword.");var $3034 = $3035;} else {var self = ($3033==="do");if (self) {var $3037 = Parser$fail("Reserved keyword.");var $3036 = $3037;} else {var self = ($3033==="if");if (self) {var $3039 = Parser$fail("Reserved keyword.");var $3038 = $3039;} else {var self = ($3033==="with");if (self) {var $3041 = Parser$fail("Reserved keyword.");var $3040 = $3041;} else {var self = ($3033==="let");if (self) {var $3043 = Parser$fail("Reserved keyword.");var $3042 = $3043;} else {var self = ($3033==="def");if (self) {var $3045 = Parser$fail("Reserved keyword.");var $3044 = $3045;} else {var self = ($3033==="Type");if (self) {var $3047 = (_idx$9=>_code$10=>{var $3048 = Parser$Reply$value$(_idx$9,_code$10,Kind$Term$typ);return $3048;});var $3046 = $3047;} else {var self = ($3033==="true");if (self) {var $3050 = (_idx$9=>_code$10=>{var $3051 = Parser$Reply$value$(_idx$9,_code$10,Kind$Term$ref$("Bool.true"));return $3051;});var $3049 = $3050;} else {var self = ($3033==="false");if (self) {var $3053 = (_idx$9=>_code$10=>{var $3054 = Parser$Reply$value$(_idx$9,_code$10,Kind$Term$ref$("Bool.false"));return $3054;});var $3052 = $3053;} else {var self = ($3033==="unit");if (self) {var $3056 = (_idx$9=>_code$10=>{var $3057 = Parser$Reply$value$(_idx$9,_code$10,Kind$Term$ref$("Unit.new"));return $3057;});var $3055 = $3056;} else {var self = ($3033==="none");if (self) {var _term$9 = Kind$Term$ref$("Maybe.none");var _term$10 = Kind$Term$app$(_term$9,Kind$Term$hol$(Bits$e));var $3059 = (_idx$11=>_code$12=>{var $3060 = Parser$Reply$value$(_idx$11,_code$12,_term$10);return $3060;});var $3058 = $3059;} else {var self = ($3033==="refl");if (self) {var _term$9 = Kind$Term$ref$("Equal.refl");var _term$10 = Kind$Term$app$(_term$9,Kind$Term$hol$(Bits$e));var _term$11 = Kind$Term$app$(_term$10,Kind$Term$hol$(Bits$e));var $3062 = (_idx$12=>_code$13=>{var $3063 = Parser$Reply$value$(_idx$12,_code$13,_term$11);return $3063;});var $3061 = $3062;} else {var $3064 = (_idx$9=>_code$10=>{var self = Kind$Parser$stop$($3025,_idx$9,_code$10);switch(self._){case 'Parser.Reply.error':var $3066=self.idx;var $3067=self.code;var $3068=self.err;var $3069 = Parser$Reply$error$($3066,$3067,$3068);var $3065 = $3069;break;case 'Parser.Reply.value':var $3070=self.idx;var $3071=self.code;var $3072=self.val;var $3073 = Parser$Reply$value$($3070,$3071,Kind$Term$ori$($3072,Kind$Term$ref$($3033)));var $3065 = $3073;break;};return $3065;});var $3061 = $3064;};var $3058 = $3061;};var $3055 = $3058;};var $3052 = $3055;};var $3049 = $3052;};var $3046 = $3049;};var $3044 = $3046;};var $3042 = $3044;};var $3040 = $3042;};var $3038 = $3040;};var $3036 = $3038;};var $3034 = $3036;};var $3034 = $3034($3031)($3032);var $3026 = $3034;break;};var $3018 = $3026;break;};return $3018;};
 const Kind$Parser$reference = x0=>x1=>Kind$Parser$reference$(x0,x1);  const List$for = a0=>a1=>a2=>(list_for(a0)(a1)(a2));
function Kind$Parser$application$(_init$1,_func$2,_idx$3,_code$4){var self = Parser$text$("(",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3075=self.idx;var $3076=self.code;var $3077=self.err;var $3078 = Parser$Reply$error$($3075,$3076,$3077);var $3074 = $3078;break;case 'Parser.Reply.value':var $3079=self.idx;var $3080=self.code;var self = Parser$until1$(Kind$Parser$text(")"),Kind$Parser$item(Kind$Parser$term),$3079,$3080);switch(self._){case 'Parser.Reply.error':var $3082=self.idx;var $3083=self.code;var $3084=self.err;var $3085 = Parser$Reply$error$($3082,$3083,$3084);var $3081 = $3085;break;case 'Parser.Reply.value':var $3086=self.idx;var $3087=self.code;var $3088=self.val;var self = Kind$Parser$stop$(_init$1,$3086,$3087);switch(self._){case 'Parser.Reply.error':var $3090=self.idx;var $3091=self.code;var $3092=self.err;var $3093 = Parser$Reply$error$($3090,$3091,$3092);var $3089 = $3093;break;case 'Parser.Reply.value':var $3094=self.idx;var $3095=self.code;var $3096=self.val;var _expr$14 = (()=>{var $3099 = _func$2;var $3100 = $3088;let _f$15=$3099;let _x$14;while ($3100._==='List.cons') {_x$14=$3100.head;var $3099 = Kind$Term$app$(_f$15,_x$14);_f$15=$3099;$3100=$3100.tail;}return _f$15;})();var $3097 = Parser$Reply$value$($3094,$3095,Kind$Term$ori$($3096,_expr$14));var $3089 = $3097;break;};var $3081 = $3089;break;};var $3074 = $3081;break;};return $3074;};
 const Kind$Parser$application = x0=>x1=>x2=>x3=>Kind$Parser$application$(x0,x1,x2,x3); const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "),List$cons$(Parser$text("\u{a}"),List$nil))));
function Parser$spaces_text$(_text$1,_idx$2,_code$3){var self = Parser$spaces(_idx$2)(_code$3);switch(self._){case 'Parser.Reply.error':var $3102=self.idx;var $3103=self.code;var $3104=self.err;var $3105 = Parser$Reply$error$($3102,$3103,$3104);var $3101 = $3105;break;case 'Parser.Reply.value':var $3106=self.idx;var $3107=self.code;var $3108 = Parser$text$(_text$1,$3106,$3107);var $3101 = $3108;break;};return $3101;};
 const Parser$spaces_text = x0=>x1=>x2=>Parser$spaces_text$(x0,x1,x2);function Kind$Parser$application$erased$(_init$1,_func$2,_idx$3,_code$4){var self = Parser$get_index$(_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3110=self.idx;var $3111=self.code;var $3112=self.err;var $3113 = Parser$Reply$error$($3110,$3111,$3112);var $3109 = $3113;break;case 'Parser.Reply.value':var $3114=self.idx;var $3115=self.code;var $3116=self.val;var self = Parser$text$("<",$3114,$3115);switch(self._){case 'Parser.Reply.error':var $3118=self.idx;var $3119=self.code;var $3120=self.err;var $3121 = Parser$Reply$error$($3118,$3119,$3120);var $3117 = $3121;break;case 'Parser.Reply.value':var $3122=self.idx;var $3123=self.code;var self = Parser$until1$(Parser$spaces_text(">"),Kind$Parser$item(Kind$Parser$term),$3122,$3123);switch(self._){case 'Parser.Reply.error':var $3125=self.idx;var $3126=self.code;var $3127=self.err;var $3128 = Parser$Reply$error$($3125,$3126,$3127);var $3124 = $3128;break;case 'Parser.Reply.value':var $3129=self.idx;var $3130=self.code;var $3131=self.val;var self = Kind$Parser$stop$($3116,$3129,$3130);switch(self._){case 'Parser.Reply.error':var $3133=self.idx;var $3134=self.code;var $3135=self.err;var $3136 = Parser$Reply$error$($3133,$3134,$3135);var $3132 = $3136;break;case 'Parser.Reply.value':var $3137=self.idx;var $3138=self.code;var $3139=self.val;var _expr$17 = (()=>{var $3142 = _func$2;var $3143 = $3131;let _f$18=$3142;let _x$17;while ($3143._==='List.cons') {_x$17=$3143.head;var $3142 = Kind$Term$app$(_f$18,_x$17);_f$18=$3142;$3143=$3143.tail;}return _f$18;})();var $3140 = Parser$Reply$value$($3137,$3138,Kind$Term$ori$($3139,_expr$17));var $3132 = $3140;break;};var $3124 = $3132;break;};var $3117 = $3124;break;};var $3109 = $3117;break;};return $3109;};
 const Kind$Parser$application$erased = x0=>x1=>x2=>x3=>Kind$Parser$application$erased$(x0,x1,x2,x3);function Kind$Parser$arrow$(_init$1,_xtyp$2,_idx$3,_code$4){var self = Kind$Parser$text$("->",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3145=self.idx;var $3146=self.code;var $3147=self.err;var $3148 = Parser$Reply$error$($3145,$3146,$3147);var $3144 = $3148;break;case 'Parser.Reply.value':var $3149=self.idx;var $3150=self.code;var self = Kind$Parser$term$($3149,$3150);switch(self._){case 'Parser.Reply.error':var $3152=self.idx;var $3153=self.code;var $3154=self.err;var $3155 = Parser$Reply$error$($3152,$3153,$3154);var $3151 = $3155;break;case 'Parser.Reply.value':var $3156=self.idx;var $3157=self.code;var $3158=self.val;var self = Kind$Parser$stop$(_init$1,$3156,$3157);switch(self._){case 'Parser.Reply.error':var $3160=self.idx;var $3161=self.code;var $3162=self.err;var $3163 = Parser$Reply$error$($3160,$3161,$3162);var $3159 = $3163;break;case 'Parser.Reply.value':var $3164=self.idx;var $3165=self.code;var $3166=self.val;var $3167 = Parser$Reply$value$($3164,$3165,Kind$Term$ori$($3166,Kind$Term$all$(Bool$false,"","",_xtyp$2,(_s$14=>_x$15=>{var $3168 = $3158;return $3168;}))));var $3159 = $3167;break;};var $3151 = $3159;break;};var $3144 = $3151;break;};return $3144;};
 const Kind$Parser$arrow = x0=>x1=>x2=>x3=>Kind$Parser$arrow$(x0,x1,x2,x3);function Kind$Parser$op$(_sym$1,_ref$2,_init$3,_val0$4,_idx$5,_code$6){var self = Kind$Parser$text$(_sym$1,_idx$5,_code$6);switch(self._){case 'Parser.Reply.error':var $3170=self.idx;var $3171=self.code;var $3172=self.err;var $3173 = Parser$Reply$error$($3170,$3171,$3172);var $3169 = $3173;break;case 'Parser.Reply.value':var $3174=self.idx;var $3175=self.code;var self = Kind$Parser$term$($3174,$3175);switch(self._){case 'Parser.Reply.error':var $3177=self.idx;var $3178=self.code;var $3179=self.err;var $3180 = Parser$Reply$error$($3177,$3178,$3179);var $3176 = $3180;break;case 'Parser.Reply.value':var $3181=self.idx;var $3182=self.code;var $3183=self.val;var self = Kind$Parser$stop$(_init$3,$3181,$3182);switch(self._){case 'Parser.Reply.error':var $3185=self.idx;var $3186=self.code;var $3187=self.err;var $3188 = Parser$Reply$error$($3185,$3186,$3187);var $3184 = $3188;break;case 'Parser.Reply.value':var $3189=self.idx;var $3190=self.code;var $3191=self.val;var _term$16 = Kind$Term$ref$(_ref$2);var _term$17 = Kind$Term$app$(_term$16,_val0$4);var _term$18 = Kind$Term$app$(_term$17,$3183);var $3192 = Parser$Reply$value$($3189,$3190,Kind$Term$ori$($3191,_term$18));var $3184 = $3192;break;};var $3176 = $3184;break;};var $3169 = $3176;break;};return $3169;};
 const Kind$Parser$op = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Parser$op$(x0,x1,x2,x3,x4,x5); const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
 const Kind$Parser$sub = Kind$Parser$op("+")("Nat.add");
 const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
 const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
 const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
function Kind$Parser$cons$(_init$1,_head$2,_idx$3,_code$4){var self = Kind$Parser$text$("&",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3194=self.idx;var $3195=self.code;var $3196=self.err;var $3197 = Parser$Reply$error$($3194,$3195,$3196);var $3193 = $3197;break;case 'Parser.Reply.value':var $3198=self.idx;var $3199=self.code;var self = Kind$Parser$term$($3198,$3199);switch(self._){case 'Parser.Reply.error':var $3201=self.idx;var $3202=self.code;var $3203=self.err;var $3204 = Parser$Reply$error$($3201,$3202,$3203);var $3200 = $3204;break;case 'Parser.Reply.value':var $3205=self.idx;var $3206=self.code;var $3207=self.val;var self = Kind$Parser$stop$(_init$1,$3205,$3206);switch(self._){case 'Parser.Reply.error':var $3209=self.idx;var $3210=self.code;var $3211=self.err;var $3212 = Parser$Reply$error$($3209,$3210,$3211);var $3208 = $3212;break;case 'Parser.Reply.value':var $3213=self.idx;var $3214=self.code;var _term$14 = Kind$Term$ref$("List.cons");var _term$15 = Kind$Term$app$(_term$14,Kind$Term$hol$(Bits$e));var _term$16 = Kind$Term$app$(_term$15,_head$2);var _term$17 = Kind$Term$app$(_term$16,$3207);var self = Kind$Parser$stop$(_init$1,$3213,$3214);switch(self._){case 'Parser.Reply.error':var $3216=self.idx;var $3217=self.code;var $3218=self.err;var $3219 = Parser$Reply$error$($3216,$3217,$3218);var $3215 = $3219;break;case 'Parser.Reply.value':var $3220=self.idx;var $3221=self.code;var $3222=self.val;var $3223 = Parser$Reply$value$($3220,$3221,Kind$Term$ori$($3222,_term$17));var $3215 = $3223;break;};var $3208 = $3215;break;};var $3200 = $3208;break;};var $3193 = $3200;break;};return $3193;};
 const Kind$Parser$cons = x0=>x1=>x2=>x3=>Kind$Parser$cons$(x0,x1,x2,x3);function Kind$Parser$concat$(_init$1,_lst0$2,_idx$3,_code$4){var self = Kind$Parser$text$("++",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3225=self.idx;var $3226=self.code;var $3227=self.err;var $3228 = Parser$Reply$error$($3225,$3226,$3227);var $3224 = $3228;break;case 'Parser.Reply.value':var $3229=self.idx;var $3230=self.code;var self = Kind$Parser$term$($3229,$3230);switch(self._){case 'Parser.Reply.error':var $3232=self.idx;var $3233=self.code;var $3234=self.err;var $3235 = Parser$Reply$error$($3232,$3233,$3234);var $3231 = $3235;break;case 'Parser.Reply.value':var $3236=self.idx;var $3237=self.code;var $3238=self.val;var self = Kind$Parser$stop$(_init$1,$3236,$3237);switch(self._){case 'Parser.Reply.error':var $3240=self.idx;var $3241=self.code;var $3242=self.err;var $3243 = Parser$Reply$error$($3240,$3241,$3242);var $3239 = $3243;break;case 'Parser.Reply.value':var $3244=self.idx;var $3245=self.code;var _term$14 = Kind$Term$ref$("List.concat");var _term$15 = Kind$Term$app$(_term$14,Kind$Term$hol$(Bits$e));var _term$16 = Kind$Term$app$(_term$15,_lst0$2);var _term$17 = Kind$Term$app$(_term$16,$3238);var self = Kind$Parser$stop$(_init$1,$3244,$3245);switch(self._){case 'Parser.Reply.error':var $3247=self.idx;var $3248=self.code;var $3249=self.err;var $3250 = Parser$Reply$error$($3247,$3248,$3249);var $3246 = $3250;break;case 'Parser.Reply.value':var $3251=self.idx;var $3252=self.code;var $3253=self.val;var $3254 = Parser$Reply$value$($3251,$3252,Kind$Term$ori$($3253,_term$17));var $3246 = $3254;break;};var $3239 = $3246;break;};var $3231 = $3239;break;};var $3224 = $3231;break;};return $3224;};
 const Kind$Parser$concat = x0=>x1=>x2=>x3=>Kind$Parser$concat$(x0,x1,x2,x3);function Kind$Parser$string_concat$(_init$1,_str0$2,_idx$3,_code$4){var self = Kind$Parser$text$("|",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3256=self.idx;var $3257=self.code;var $3258=self.err;var $3259 = Parser$Reply$error$($3256,$3257,$3258);var $3255 = $3259;break;case 'Parser.Reply.value':var $3260=self.idx;var $3261=self.code;var self = Kind$Parser$term$($3260,$3261);switch(self._){case 'Parser.Reply.error':var $3263=self.idx;var $3264=self.code;var $3265=self.err;var $3266 = Parser$Reply$error$($3263,$3264,$3265);var $3262 = $3266;break;case 'Parser.Reply.value':var $3267=self.idx;var $3268=self.code;var $3269=self.val;var self = Kind$Parser$stop$(_init$1,$3267,$3268);switch(self._){case 'Parser.Reply.error':var $3271=self.idx;var $3272=self.code;var $3273=self.err;var $3274 = Parser$Reply$error$($3271,$3272,$3273);var $3270 = $3274;break;case 'Parser.Reply.value':var $3275=self.idx;var $3276=self.code;var _term$14 = Kind$Term$ref$("String.concat");var _term$15 = Kind$Term$app$(_term$14,_str0$2);var _term$16 = Kind$Term$app$(_term$15,$3269);var self = Kind$Parser$stop$(_init$1,$3275,$3276);switch(self._){case 'Parser.Reply.error':var $3278=self.idx;var $3279=self.code;var $3280=self.err;var $3281 = Parser$Reply$error$($3278,$3279,$3280);var $3277 = $3281;break;case 'Parser.Reply.value':var $3282=self.idx;var $3283=self.code;var $3284=self.val;var $3285 = Parser$Reply$value$($3282,$3283,Kind$Term$ori$($3284,_term$16));var $3277 = $3285;break;};var $3270 = $3277;break;};var $3262 = $3270;break;};var $3255 = $3262;break;};return $3255;};
 const Kind$Parser$string_concat = x0=>x1=>x2=>x3=>Kind$Parser$string_concat$(x0,x1,x2,x3);function Kind$Parser$sigma$(_init$1,_val0$2,_idx$3,_code$4){var self = Kind$Parser$text$("~",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3287=self.idx;var $3288=self.code;var $3289=self.err;var $3290 = Parser$Reply$error$($3287,$3288,$3289);var $3286 = $3290;break;case 'Parser.Reply.value':var $3291=self.idx;var $3292=self.code;var self = Kind$Parser$term$($3291,$3292);switch(self._){case 'Parser.Reply.error':var $3294=self.idx;var $3295=self.code;var $3296=self.err;var $3297 = Parser$Reply$error$($3294,$3295,$3296);var $3293 = $3297;break;case 'Parser.Reply.value':var $3298=self.idx;var $3299=self.code;var $3300=self.val;var self = Kind$Parser$stop$(_init$1,$3298,$3299);switch(self._){case 'Parser.Reply.error':var $3302=self.idx;var $3303=self.code;var $3304=self.err;var $3305 = Parser$Reply$error$($3302,$3303,$3304);var $3301 = $3305;break;case 'Parser.Reply.value':var $3306=self.idx;var $3307=self.code;var $3308=self.val;var _term$14 = Kind$Term$ref$("Sigma.new");var _term$15 = Kind$Term$app$(_term$14,Kind$Term$hol$(Bits$e));var _term$16 = Kind$Term$app$(_term$15,Kind$Term$hol$(Bits$e));var _term$17 = Kind$Term$app$(_term$16,_val0$2);var _term$18 = Kind$Term$app$(_term$17,$3300);var $3309 = Parser$Reply$value$($3306,$3307,Kind$Term$ori$($3308,_term$18));var $3301 = $3309;break;};var $3293 = $3301;break;};var $3286 = $3293;break;};return $3286;};
 const Kind$Parser$sigma = x0=>x1=>x2=>x3=>Kind$Parser$sigma$(x0,x1,x2,x3);function Kind$Parser$equality$(_init$1,_val0$2,_idx$3,_code$4){var self = Kind$Parser$text$("==",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3311=self.idx;var $3312=self.code;var $3313=self.err;var $3314 = Parser$Reply$error$($3311,$3312,$3313);var $3310 = $3314;break;case 'Parser.Reply.value':var $3315=self.idx;var $3316=self.code;var self = Kind$Parser$term$($3315,$3316);switch(self._){case 'Parser.Reply.error':var $3318=self.idx;var $3319=self.code;var $3320=self.err;var $3321 = Parser$Reply$error$($3318,$3319,$3320);var $3317 = $3321;break;case 'Parser.Reply.value':var $3322=self.idx;var $3323=self.code;var $3324=self.val;var self = Kind$Parser$stop$(_init$1,$3322,$3323);switch(self._){case 'Parser.Reply.error':var $3326=self.idx;var $3327=self.code;var $3328=self.err;var $3329 = Parser$Reply$error$($3326,$3327,$3328);var $3325 = $3329;break;case 'Parser.Reply.value':var $3330=self.idx;var $3331=self.code;var $3332=self.val;var _term$14 = Kind$Term$ref$("Equal");var _term$15 = Kind$Term$app$(_term$14,Kind$Term$hol$(Bits$e));var _term$16 = Kind$Term$app$(_term$15,_val0$2);var _term$17 = Kind$Term$app$(_term$16,$3324);var $3333 = Parser$Reply$value$($3330,$3331,Kind$Term$ori$($3332,_term$17));var $3325 = $3333;break;};var $3317 = $3325;break;};var $3310 = $3317;break;};return $3310;};
 const Kind$Parser$equality = x0=>x1=>x2=>x3=>Kind$Parser$equality$(x0,x1,x2,x3);function Kind$Parser$inequality$(_init$1,_val0$2,_idx$3,_code$4){var self = Kind$Parser$text$("!=",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3335=self.idx;var $3336=self.code;var $3337=self.err;var $3338 = Parser$Reply$error$($3335,$3336,$3337);var $3334 = $3338;break;case 'Parser.Reply.value':var $3339=self.idx;var $3340=self.code;var self = Kind$Parser$term$($3339,$3340);switch(self._){case 'Parser.Reply.error':var $3342=self.idx;var $3343=self.code;var $3344=self.err;var $3345 = Parser$Reply$error$($3342,$3343,$3344);var $3341 = $3345;break;case 'Parser.Reply.value':var $3346=self.idx;var $3347=self.code;var $3348=self.val;var self = Kind$Parser$stop$(_init$1,$3346,$3347);switch(self._){case 'Parser.Reply.error':var $3350=self.idx;var $3351=self.code;var $3352=self.err;var $3353 = Parser$Reply$error$($3350,$3351,$3352);var $3349 = $3353;break;case 'Parser.Reply.value':var $3354=self.idx;var $3355=self.code;var $3356=self.val;var _term$14 = Kind$Term$ref$("Equal");var _term$15 = Kind$Term$app$(_term$14,Kind$Term$hol$(Bits$e));var _term$16 = Kind$Term$app$(_term$15,_val0$2);var _term$17 = Kind$Term$app$(_term$16,$3348);var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"),_term$17);var $3357 = Parser$Reply$value$($3354,$3355,Kind$Term$ori$($3356,_term$18));var $3349 = $3357;break;};var $3341 = $3349;break;};var $3334 = $3341;break;};return $3334;};
 const Kind$Parser$inequality = x0=>x1=>x2=>x3=>Kind$Parser$inequality$(x0,x1,x2,x3);function Kind$Parser$rewrite$(_init$1,_subt$2,_idx$3,_code$4){var self = Kind$Parser$text$("::",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3359=self.idx;var $3360=self.code;var $3361=self.err;var $3362 = Parser$Reply$error$($3359,$3360,$3361);var $3358 = $3362;break;case 'Parser.Reply.value':var $3363=self.idx;var $3364=self.code;var self = Kind$Parser$text$("rewrite",$3363,$3364);switch(self._){case 'Parser.Reply.error':var $3366=self.idx;var $3367=self.code;var $3368=self.err;var $3369 = Parser$Reply$error$($3366,$3367,$3368);var $3365 = $3369;break;case 'Parser.Reply.value':var $3370=self.idx;var $3371=self.code;var self = Kind$Parser$name1$($3370,$3371);switch(self._){case 'Parser.Reply.error':var $3373=self.idx;var $3374=self.code;var $3375=self.err;var $3376 = Parser$Reply$error$($3373,$3374,$3375);var $3372 = $3376;break;case 'Parser.Reply.value':var $3377=self.idx;var $3378=self.code;var $3379=self.val;var self = Kind$Parser$text$("in",$3377,$3378);switch(self._){case 'Parser.Reply.error':var $3381=self.idx;var $3382=self.code;var $3383=self.err;var $3384 = Parser$Reply$error$($3381,$3382,$3383);var $3380 = $3384;break;case 'Parser.Reply.value':var $3385=self.idx;var $3386=self.code;var self = Kind$Parser$term$($3385,$3386);switch(self._){case 'Parser.Reply.error':var $3388=self.idx;var $3389=self.code;var $3390=self.err;var $3391 = Parser$Reply$error$($3388,$3389,$3390);var $3387 = $3391;break;case 'Parser.Reply.value':var $3392=self.idx;var $3393=self.code;var $3394=self.val;var self = Kind$Parser$text$("with",$3392,$3393);switch(self._){case 'Parser.Reply.error':var $3396=self.idx;var $3397=self.code;var $3398=self.err;var $3399 = Parser$Reply$error$($3396,$3397,$3398);var $3395 = $3399;break;case 'Parser.Reply.value':var $3400=self.idx;var $3401=self.code;var self = Kind$Parser$term$($3400,$3401);switch(self._){case 'Parser.Reply.error':var $3403=self.idx;var $3404=self.code;var $3405=self.err;var $3406 = Parser$Reply$error$($3403,$3404,$3405);var $3402 = $3406;break;case 'Parser.Reply.value':var $3407=self.idx;var $3408=self.code;var $3409=self.val;var self = Kind$Parser$stop$(_init$1,$3407,$3408);switch(self._){case 'Parser.Reply.error':var $3411=self.idx;var $3412=self.code;var $3413=self.err;var $3414 = Parser$Reply$error$($3411,$3412,$3413);var $3410 = $3414;break;case 'Parser.Reply.value':var $3415=self.idx;var $3416=self.code;var $3417=self.val;var _term$29 = Kind$Term$ref$("Equal.rewrite");var _term$30 = Kind$Term$app$(_term$29,Kind$Term$hol$(Bits$e));var _term$31 = Kind$Term$app$(_term$30,Kind$Term$hol$(Bits$e));var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,$3409);var _term$34 = Kind$Term$app$(_term$33,Kind$Term$lam$($3379,(_x$34=>{var $3419 = $3394;return $3419;})));var _term$35 = Kind$Term$app$(_term$34,_subt$2);var $3418 = Parser$Reply$value$($3415,$3416,Kind$Term$ori$($3417,_term$35));var $3410 = $3418;break;};var $3402 = $3410;break;};var $3395 = $3402;break;};var $3387 = $3395;break;};var $3380 = $3387;break;};var $3372 = $3380;break;};var $3365 = $3372;break;};var $3358 = $3365;break;};return $3358;};
 const Kind$Parser$rewrite = x0=>x1=>x2=>x3=>Kind$Parser$rewrite$(x0,x1,x2,x3);function Kind$Term$ann$(_done$1,_term$2,_type$3){var $3420 = ({_:'Kind.Term.ann','done':_done$1,'term':_term$2,'type':_type$3});return $3420;};
 const Kind$Term$ann = x0=>x1=>x2=>Kind$Term$ann$(x0,x1,x2);function Kind$Parser$annotation$(_init$1,_term$2,_idx$3,_code$4){var self = Kind$Parser$text$("::",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3422=self.idx;var $3423=self.code;var $3424=self.err;var $3425 = Parser$Reply$error$($3422,$3423,$3424);var $3421 = $3425;break;case 'Parser.Reply.value':var $3426=self.idx;var $3427=self.code;var self = Kind$Parser$term$($3426,$3427);switch(self._){case 'Parser.Reply.error':var $3429=self.idx;var $3430=self.code;var $3431=self.err;var $3432 = Parser$Reply$error$($3429,$3430,$3431);var $3428 = $3432;break;case 'Parser.Reply.value':var $3433=self.idx;var $3434=self.code;var $3435=self.val;var self = Kind$Parser$stop$(_init$1,$3433,$3434);switch(self._){case 'Parser.Reply.error':var $3437=self.idx;var $3438=self.code;var $3439=self.err;var $3440 = Parser$Reply$error$($3437,$3438,$3439);var $3436 = $3440;break;case 'Parser.Reply.value':var $3441=self.idx;var $3442=self.code;var $3443=self.val;var $3444 = Parser$Reply$value$($3441,$3442,Kind$Term$ori$($3443,Kind$Term$ann$(Bool$false,_term$2,$3435)));var $3436 = $3444;break;};var $3428 = $3436;break;};var $3421 = $3428;break;};return $3421;};
 const Kind$Parser$annotation = x0=>x1=>x2=>x3=>Kind$Parser$annotation$(x0,x1,x2,x3);function Kind$Parser$application$hole$(_init$1,_term$2,_idx$3,_code$4){var self = Kind$Parser$text$("!",_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3446=self.idx;var $3447=self.code;var $3448=self.err;var $3449 = Parser$Reply$error$($3446,$3447,$3448);var $3445 = $3449;break;case 'Parser.Reply.value':var $3450=self.idx;var $3451=self.code;var self = Kind$Parser$stop$(_init$1,$3450,$3451);switch(self._){case 'Parser.Reply.error':var $3453=self.idx;var $3454=self.code;var $3455=self.err;var $3456 = Parser$Reply$error$($3453,$3454,$3455);var $3452 = $3456;break;case 'Parser.Reply.value':var $3457=self.idx;var $3458=self.code;var $3459=self.val;var $3460 = Parser$Reply$value$($3457,$3458,Kind$Term$ori$($3459,Kind$Term$app$(_term$2,Kind$Term$hol$(Bits$e))));var $3452 = $3460;break;};var $3445 = $3452;break;};return $3445;};
 const Kind$Parser$application$hole = x0=>x1=>x2=>x3=>Kind$Parser$application$hole$(x0,x1,x2,x3);function Kind$Parser$suffix$(_init$1,_term$2,_idx$3,_code$4){var Kind$Parser$suffix$=(_init$1,_term$2,_idx$3,_code$4)=>({ctr:'TCO',arg:[_init$1,_term$2,_idx$3,_code$4]});var Kind$Parser$suffix=_init$1=>_term$2=>_idx$3=>_code$4=>Kind$Parser$suffix$(_init$1,_term$2,_idx$3,_code$4);var arg=[_init$1,_term$2,_idx$3,_code$4];while(true){let [_init$1,_term$2,_idx$3,_code$4]=arg;var R=(()=>{var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2),List$cons$(Kind$Parser$application$erased(_init$1)(_term$2),List$cons$(Kind$Parser$arrow(_init$1)(_term$2),List$cons$(Kind$Parser$add(_init$1)(_term$2),List$cons$(Kind$Parser$sub(_init$1)(_term$2),List$cons$(Kind$Parser$mul(_init$1)(_term$2),List$cons$(Kind$Parser$div(_init$1)(_term$2),List$cons$(Kind$Parser$mod(_init$1)(_term$2),List$cons$(Kind$Parser$cons(_init$1)(_term$2),List$cons$(Kind$Parser$concat(_init$1)(_term$2),List$cons$(Kind$Parser$string_concat(_init$1)(_term$2),List$cons$(Kind$Parser$sigma(_init$1)(_term$2),List$cons$(Kind$Parser$equality(_init$1)(_term$2),List$cons$(Kind$Parser$inequality(_init$1)(_term$2),List$cons$(Kind$Parser$rewrite(_init$1)(_term$2),List$cons$(Kind$Parser$annotation(_init$1)(_term$2),List$cons$(Kind$Parser$application$hole(_init$1)(_term$2),List$nil))))))))))))))))));var self = _suffix_parser$5(_idx$3)(_code$4);switch(self._){case 'Parser.Reply.value':var $3462=self.idx;var $3463=self.code;var $3464=self.val;var $3465 = Kind$Parser$suffix$(_init$1,$3464,$3462,$3463);var $3461 = $3465;break;case 'Parser.Reply.error':var $3466 = Parser$Reply$value$(_idx$3,_code$4,_term$2);var $3461 = $3466;break;};return $3461;})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$Parser$suffix = x0=>x1=>x2=>x3=>Kind$Parser$suffix$(x0,x1,x2,x3);function Kind$Parser$term$(_idx$1,_code$2){var self = Kind$Parser$init$(_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $3468=self.idx;var $3469=self.code;var $3470=self.err;var $3471 = Parser$Reply$error$($3468,$3469,$3470);var $3467 = $3471;break;case 'Parser.Reply.value':var $3472=self.idx;var $3473=self.code;var $3474=self.val;var self = Parser$first_of$(List$cons$(Kind$Parser$forall,List$cons$(Kind$Parser$lambda,List$cons$(Kind$Parser$lambda$erased,List$cons$(Kind$Parser$lambda$nameless,List$cons$(Kind$Parser$parenthesis,List$cons$(Kind$Parser$letforrange$u32,List$cons$(Kind$Parser$letforrange$nat,List$cons$(Kind$Parser$letforin,List$cons$(Kind$Parser$let,List$cons$(Kind$Parser$get,List$cons$(Kind$Parser$def,List$cons$(Kind$Parser$goal_rewrite,List$cons$(Kind$Parser$if,List$cons$(Kind$Parser$char,List$cons$(Kind$Parser$string,List$cons$(Kind$Parser$pair,List$cons$(Kind$Parser$sigma$type,List$cons$(Kind$Parser$some,List$cons$(Kind$Parser$apply,List$cons$(Kind$Parser$mirror,List$cons$(Kind$Parser$list,List$cons$(Kind$Parser$map,List$cons$(Kind$Parser$log,List$cons$(Kind$Parser$do,List$cons$(Kind$Parser$case,List$cons$(Kind$Parser$open,List$cons$(Kind$Parser$without,List$cons$(Kind$Parser$switch,List$cons$(Kind$Parser$goal,List$cons$(Kind$Parser$hole,List$cons$(Kind$Parser$u8,List$cons$(Kind$Parser$u16,List$cons$(Kind$Parser$u32,List$cons$(Kind$Parser$u64,List$cons$(Kind$Parser$nat,List$cons$(Kind$Parser$reference,List$nil)))))))))))))))))))))))))))))))))))))($3472)($3473);switch(self._){case 'Parser.Reply.error':var $3476=self.idx;var $3477=self.code;var $3478=self.err;var $3479 = Parser$Reply$error$($3476,$3477,$3478);var $3475 = $3479;break;case 'Parser.Reply.value':var $3480=self.idx;var $3481=self.code;var $3482=self.val;var $3483 = Kind$Parser$suffix$($3474,$3482,$3480,$3481);var $3475 = $3483;break;};var $3467 = $3475;break;};return $3467;};
 const Kind$Parser$term = x0=>x1=>Kind$Parser$term$(x0,x1);function Kind$Parser$name_term$(_sep$1,_idx$2,_code$3){var self = Kind$Parser$name$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $3485=self.idx;var $3486=self.code;var $3487=self.err;var $3488 = Parser$Reply$error$($3485,$3486,$3487);var $3484 = $3488;break;case 'Parser.Reply.value':var $3489=self.idx;var $3490=self.code;var $3491=self.val;var self = Kind$Parser$text$(_sep$1,$3489,$3490);switch(self._){case 'Parser.Reply.error':var $3493=self.idx;var $3494=self.code;var $3495=self.err;var $3496 = Parser$Reply$error$($3493,$3494,$3495);var $3492 = $3496;break;case 'Parser.Reply.value':var $3497=self.idx;var $3498=self.code;var self = Kind$Parser$term$($3497,$3498);switch(self._){case 'Parser.Reply.error':var $3500=self.idx;var $3501=self.code;var $3502=self.err;var $3503 = Parser$Reply$error$($3500,$3501,$3502);var $3499 = $3503;break;case 'Parser.Reply.value':var $3504=self.idx;var $3505=self.code;var $3506=self.val;var $3507 = Parser$Reply$value$($3504,$3505,Pair$new$($3491,$3506));var $3499 = $3507;break;};var $3492 = $3499;break;};var $3484 = $3492;break;};return $3484;};
 const Kind$Parser$name_term = x0=>x1=>x2=>Kind$Parser$name_term$(x0,x1,x2);function Kind$Binder$new$(_eras$1,_name$2,_term$3){var $3508 = ({_:'Kind.Binder.new','eras':_eras$1,'name':_name$2,'term':_term$3});return $3508;};
 const Kind$Binder$new = x0=>x1=>x2=>Kind$Binder$new$(x0,x1,x2);function Kind$Parser$binder$homo$(_sep$1,_eras$2,_idx$3,_code$4){var self = Kind$Parser$text$((()=>{var self = _eras$2;if (self) {var $3510 = "<";return $3510;} else {var $3511 = "(";return $3511;};})(),_idx$3,_code$4);switch(self._){case 'Parser.Reply.error':var $3512=self.idx;var $3513=self.code;var $3514=self.err;var $3515 = Parser$Reply$error$($3512,$3513,$3514);var $3509 = $3515;break;case 'Parser.Reply.value':var $3516=self.idx;var $3517=self.code;var self = Parser$until1$(Kind$Parser$text((()=>{var self = _eras$2;if (self) {var $3519 = ">";return $3519;} else {var $3520 = ")";return $3520;};})()),Kind$Parser$item(Kind$Parser$name_term(_sep$1)),$3516,$3517);switch(self._){case 'Parser.Reply.error':var $3521=self.idx;var $3522=self.code;var $3523=self.err;var $3524 = Parser$Reply$error$($3521,$3522,$3523);var $3518 = $3524;break;case 'Parser.Reply.value':var $3525=self.idx;var $3526=self.code;var $3527=self.val;var $3528 = Parser$Reply$value$($3525,$3526,List$mapped$($3527,(_pair$11=>{var self = _pair$11;switch(self._){case 'Pair.new':var $3530=self.fst;var $3531=self.snd;var $3532 = Kind$Binder$new$(_eras$2,$3530,$3531);var $3529 = $3532;break;};return $3529;})));var $3518 = $3528;break;};var $3509 = $3518;break;};return $3509;};
 const Kind$Parser$binder$homo = x0=>x1=>x2=>x3=>Kind$Parser$binder$homo$(x0,x1,x2,x3);function List$concat$(_as$2,_bs$3){var self = _as$2;switch(self._){case 'List.cons':var $3534=self.head;var $3535=self.tail;var $3536 = List$cons$($3534,List$concat$($3535,_bs$3));var $3533 = $3536;break;case 'List.nil':var $3537 = _bs$3;var $3533 = $3537;break;};return $3533;};
 const List$concat = x0=>x1=>List$concat$(x0,x1);function List$flatten$(_xs$2){var self = _xs$2;switch(self._){case 'List.cons':var $3539=self.head;var $3540=self.tail;var $3541 = List$concat$($3539,List$flatten$($3540));var $3538 = $3541;break;case 'List.nil':var $3542 = List$nil;var $3538 = $3542;break;};return $3538;};
 const List$flatten = x0=>List$flatten$(x0);function Kind$Parser$binder$(_sep$1,_idx$2,_code$3){var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true),List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false),List$nil))),_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $3544=self.idx;var $3545=self.code;var $3546=self.err;var $3547 = Parser$Reply$error$($3544,$3545,$3546);var $3543 = $3547;break;case 'Parser.Reply.value':var $3548=self.idx;var $3549=self.code;var $3550=self.val;var $3551 = Parser$Reply$value$($3548,$3549,List$flatten$($3550));var $3543 = $3551;break;};return $3543;};
 const Kind$Parser$binder = x0=>x1=>x2=>Kind$Parser$binder$(x0,x1,x2);  const List$length = a0=>(list_length(a0));
function Kind$Parser$make_forall$(_binds$1,_body$2){var self = _binds$1;switch(self._){case 'List.cons':var $3553=self.head;var $3554=self.tail;var self = $3553;switch(self._){case 'Kind.Binder.new':var $3556=self.eras;var $3557=self.name;var $3558=self.term;var $3559 = Kind$Term$all$($3556,"",$3557,$3558,(_s$8=>_x$9=>{var $3560 = Kind$Parser$make_forall$($3554,_body$2);return $3560;}));var $3555 = $3559;break;};var $3552 = $3555;break;case 'List.nil':var $3561 = _body$2;var $3552 = $3561;break;};return $3552;};
 const Kind$Parser$make_forall = x0=>x1=>Kind$Parser$make_forall$(x0,x1);function List$at$(_index$2,_list$3){var List$at$=(_index$2,_list$3)=>({ctr:'TCO',arg:[_index$2,_list$3]});var List$at=_index$2=>_list$3=>List$at$(_index$2,_list$3);var arg=[_index$2,_list$3];while(true){let [_index$2,_list$3]=arg;var R=(()=>{var self = _list$3;switch(self._){case 'List.cons':var $3562=self.head;var $3563=self.tail;var self = _index$2;if (self===0n) {var $3565 = Maybe$some$($3562);var $3564 = $3565;} else {var $3566=(self-1n);var $3567 = List$at$($3566,$3563);var $3564 = $3567;};return $3564;case 'List.nil':var $3568 = Maybe$none;return $3568;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const List$at = x0=>x1=>List$at$(x0,x1);function List$at_last$(_index$2,_list$3){var $3569 = List$at$(_index$2,List$reverse$(_list$3));return $3569;};
 const List$at_last = x0=>x1=>List$at_last$(x0,x1);function Kind$Term$var$(_name$1,_indx$2){var $3570 = ({_:'Kind.Term.var','name':_name$1,'indx':_indx$2});return $3570;};
 const Kind$Term$var = x0=>x1=>Kind$Term$var$(x0,x1);function Pair$snd$(_pair$3){var self = _pair$3;switch(self._){case 'Pair.new':var $3572=self.snd;var $3573 = $3572;var $3571 = $3573;break;};return $3571;};
 const Pair$snd = x0=>Pair$snd$(x0);function Kind$Context$get_name_skips$(_name$1){var self = _name$1;if (self.length===0) {var $3575 = Pair$new$("",0n);var $3574 = $3575;} else {var $3576=self.charCodeAt(0);var $3577=self.slice(1);var _name_skips$4 = Kind$Context$get_name_skips$($3577);var self = _name_skips$4;switch(self._){case 'Pair.new':var $3579=self.fst;var $3580=self.snd;var self = ($3576===94);if (self) {var $3582 = Pair$new$($3579,Nat$succ$($3580));var $3581 = $3582;} else {var $3583 = Pair$new$(String$cons$($3576,$3579),$3580);var $3581 = $3583;};var $3578 = $3581;break;};var $3574 = $3578;};return $3574;};
 const Kind$Context$get_name_skips = x0=>Kind$Context$get_name_skips$(x0);function Kind$Name$eql$(_a$1,_b$2){var $3584 = (_a$1===_b$2);return $3584;};
 const Kind$Name$eql = x0=>x1=>Kind$Name$eql$(x0,x1);function Kind$Context$find$go$(_name$1,_skip$2,_ctx$3){var Kind$Context$find$go$=(_name$1,_skip$2,_ctx$3)=>({ctr:'TCO',arg:[_name$1,_skip$2,_ctx$3]});var Kind$Context$find$go=_name$1=>_skip$2=>_ctx$3=>Kind$Context$find$go$(_name$1,_skip$2,_ctx$3);var arg=[_name$1,_skip$2,_ctx$3];while(true){let [_name$1,_skip$2,_ctx$3]=arg;var R=(()=>{var self = _ctx$3;switch(self._){case 'List.cons':var $3585=self.head;var $3586=self.tail;var self = $3585;switch(self._){case 'Pair.new':var $3588=self.fst;var $3589=self.snd;var self = Kind$Name$eql$(_name$1,$3588);if (self) {var self = _skip$2;if (self===0n) {var $3592 = Maybe$some$($3589);var $3591 = $3592;} else {var $3593=(self-1n);var $3594 = Kind$Context$find$go$(_name$1,$3593,$3586);var $3591 = $3594;};var $3590 = $3591;} else {var $3595 = Kind$Context$find$go$(_name$1,_skip$2,$3586);var $3590 = $3595;};var $3587 = $3590;break;};return $3587;case 'List.nil':var $3596 = Maybe$none;return $3596;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$Context$find$go = x0=>x1=>x2=>Kind$Context$find$go$(x0,x1,x2);function Kind$Context$find$(_name$1,_ctx$2){var self = Kind$Context$get_name_skips$(_name$1);switch(self._){case 'Pair.new':var $3598=self.fst;var $3599=self.snd;var $3600 = Kind$Context$find$go$($3598,$3599,_ctx$2);var $3597 = $3600;break;};return $3597;};
 const Kind$Context$find = x0=>x1=>Kind$Context$find$(x0,x1);function Kind$Path$o$(_path$1,_x$2){var $3601 = _path$1((_x$2+'0'));return $3601;};
 const Kind$Path$o = x0=>x1=>Kind$Path$o$(x0,x1);function Kind$Path$i$(_path$1,_x$2){var $3602 = _path$1((_x$2+'1'));return $3602;};
 const Kind$Path$i = x0=>x1=>Kind$Path$i$(x0,x1);function Kind$Path$to_bits$(_path$1){var $3603 = _path$1(Bits$e);return $3603;};
 const Kind$Path$to_bits = x0=>Kind$Path$to_bits$(x0);function Kind$Term$bind$(_vars$1,_path$2,_term$3){var self = _term$3;switch(self._){case 'Kind.Term.var':var $3605=self.name;var $3606=self.indx;var self = List$at_last$($3606,_vars$1);switch(self._){case 'Maybe.some':var $3608=self.value;var $3609 = Pair$snd$($3608);var $3607 = $3609;break;case 'Maybe.none':var $3610 = Kind$Term$var$($3605,$3606);var $3607 = $3610;break;};var $3604 = $3607;break;case 'Kind.Term.ref':var $3611=self.name;var self = Kind$Context$find$($3611,_vars$1);switch(self._){case 'Maybe.some':var $3613=self.value;var $3614 = $3613;var $3612 = $3614;break;case 'Maybe.none':var $3615 = Kind$Term$ref$($3611);var $3612 = $3615;break;};var $3604 = $3612;break;case 'Kind.Term.all':var $3616=self.eras;var $3617=self.self;var $3618=self.name;var $3619=self.xtyp;var $3620=self.body;var _vlen$9 = (list_length(_vars$1));var $3621 = Kind$Term$all$($3616,$3617,$3618,Kind$Term$bind$(_vars$1,Kind$Path$o(_path$2),$3619),(_s$10=>_x$11=>{var $3622 = Kind$Term$bind$(List$cons$(Pair$new$($3618,_x$11),List$cons$(Pair$new$($3617,_s$10),_vars$1)),Kind$Path$i(_path$2),$3620(Kind$Term$var$($3617,_vlen$9))(Kind$Term$var$($3618,Nat$succ$(_vlen$9))));return $3622;}));var $3604 = $3621;break;case 'Kind.Term.lam':var $3623=self.name;var $3624=self.body;var _vlen$6 = (list_length(_vars$1));var $3625 = Kind$Term$lam$($3623,(_x$7=>{var $3626 = Kind$Term$bind$(List$cons$(Pair$new$($3623,_x$7),_vars$1),Kind$Path$o(_path$2),$3624(Kind$Term$var$($3623,_vlen$6)));return $3626;}));var $3604 = $3625;break;case 'Kind.Term.app':var $3627=self.func;var $3628=self.argm;var $3629 = Kind$Term$app$(Kind$Term$bind$(_vars$1,Kind$Path$o(_path$2),$3627),Kind$Term$bind$(_vars$1,Kind$Path$i(_path$2),$3628));var $3604 = $3629;break;case 'Kind.Term.let':var $3630=self.name;var $3631=self.expr;var $3632=self.body;var _vlen$7 = (list_length(_vars$1));var $3633 = Kind$Term$let$($3630,Kind$Term$bind$(_vars$1,Kind$Path$o(_path$2),$3631),(_x$8=>{var $3634 = Kind$Term$bind$(List$cons$(Pair$new$($3630,_x$8),_vars$1),Kind$Path$i(_path$2),$3632(Kind$Term$var$($3630,_vlen$7)));return $3634;}));var $3604 = $3633;break;case 'Kind.Term.def':var $3635=self.name;var $3636=self.expr;var $3637=self.body;var _vlen$7 = (list_length(_vars$1));var $3638 = Kind$Term$def$($3635,Kind$Term$bind$(_vars$1,Kind$Path$o(_path$2),$3636),(_x$8=>{var $3639 = Kind$Term$bind$(List$cons$(Pair$new$($3635,_x$8),_vars$1),Kind$Path$i(_path$2),$3637(Kind$Term$var$($3635,_vlen$7)));return $3639;}));var $3604 = $3638;break;case 'Kind.Term.ann':var $3640=self.done;var $3641=self.term;var $3642=self.type;var $3643 = Kind$Term$ann$($3640,Kind$Term$bind$(_vars$1,Kind$Path$o(_path$2),$3641),Kind$Term$bind$(_vars$1,Kind$Path$i(_path$2),$3642));var $3604 = $3643;break;case 'Kind.Term.gol':var $3644=self.name;var $3645=self.dref;var $3646=self.verb;var $3647 = Kind$Term$gol$($3644,$3645,$3646);var $3604 = $3647;break;case 'Kind.Term.nat':var $3648=self.natx;var $3649 = Kind$Term$nat$($3648);var $3604 = $3649;break;case 'Kind.Term.chr':var $3650=self.chrx;var $3651 = Kind$Term$chr$($3650);var $3604 = $3651;break;case 'Kind.Term.str':var $3652=self.strx;var $3653 = Kind$Term$str$($3652);var $3604 = $3653;break;case 'Kind.Term.cse':var $3654=self.expr;var $3655=self.name;var $3656=self.with;var $3657=self.cses;var $3658=self.moti;var _expr$10 = Kind$Term$bind$(_vars$1,Kind$Path$o(_path$2),$3654);var _name$11 = $3655;var _wyth$12 = $3656;var _cses$13 = $3657;var _moti$14 = $3658;var $3659 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2),_expr$10,_name$11,_wyth$12,_cses$13,_moti$14);var $3604 = $3659;break;case 'Kind.Term.ori':var $3660=self.orig;var $3661=self.expr;var $3662 = Kind$Term$ori$($3660,Kind$Term$bind$(_vars$1,_path$2,$3661));var $3604 = $3662;break;case 'Kind.Term.typ':var $3663 = Kind$Term$typ;var $3604 = $3663;break;case 'Kind.Term.hol':var $3664 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));var $3604 = $3664;break;};return $3604;};
 const Kind$Term$bind = x0=>x1=>x2=>Kind$Term$bind$(x0,x1,x2); const Kind$Status$done = ({_:'Kind.Status.done'});
function Kind$define$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_done$9,_defs$10){var self = _done$9;if (self) {var $3666 = Kind$Status$done;var _stat$11 = $3666;} else {var $3667 = Kind$Status$init;var _stat$11 = $3667;};var $3665 = Kind$Map$set$(_name$4,Kind$Def$new$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_stat$11),_defs$10);return $3665;};
 const Kind$define = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>x9=>Kind$define$(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9);function Kind$Parser$file$def$(_file$1,_code$2,_defs$3,_idx$4,_code$5){var self = Kind$Parser$init$(_idx$4,_code$5);switch(self._){case 'Parser.Reply.error':var $3669=self.idx;var $3670=self.code;var $3671=self.err;var $3672 = Parser$Reply$error$($3669,$3670,$3671);var $3668 = $3672;break;case 'Parser.Reply.value':var $3673=self.idx;var $3674=self.code;var $3675=self.val;var self = Kind$Parser$name1$($3673,$3674);switch(self._){case 'Parser.Reply.error':var $3677=self.idx;var $3678=self.code;var $3679=self.err;var $3680 = Parser$Reply$error$($3677,$3678,$3679);var $3676 = $3680;break;case 'Parser.Reply.value':var $3681=self.idx;var $3682=self.code;var $3683=self.val;var self = Parser$many$(Kind$Parser$binder(":"))($3681)($3682);switch(self._){case 'Parser.Reply.error':var $3685=self.idx;var $3686=self.code;var $3687=self.err;var $3688 = Parser$Reply$error$($3685,$3686,$3687);var $3684 = $3688;break;case 'Parser.Reply.value':var $3689=self.idx;var $3690=self.code;var $3691=self.val;var _args$15 = List$flatten$($3691);var self = Kind$Parser$text$(":",$3689,$3690);switch(self._){case 'Parser.Reply.error':var $3693=self.idx;var $3694=self.code;var $3695=self.err;var $3696 = Parser$Reply$error$($3693,$3694,$3695);var $3692 = $3696;break;case 'Parser.Reply.value':var $3697=self.idx;var $3698=self.code;var self = Kind$Parser$term$($3697,$3698);switch(self._){case 'Parser.Reply.error':var $3700=self.idx;var $3701=self.code;var $3702=self.err;var $3703 = Parser$Reply$error$($3700,$3701,$3702);var $3699 = $3703;break;case 'Parser.Reply.value':var $3704=self.idx;var $3705=self.code;var $3706=self.val;var self = Kind$Parser$term$($3704,$3705);switch(self._){case 'Parser.Reply.error':var $3708=self.idx;var $3709=self.code;var $3710=self.err;var $3711 = Parser$Reply$error$($3708,$3709,$3710);var $3707 = $3711;break;case 'Parser.Reply.value':var $3712=self.idx;var $3713=self.code;var $3714=self.val;var self = Kind$Parser$stop$($3675,$3712,$3713);switch(self._){case 'Parser.Reply.error':var $3716=self.idx;var $3717=self.code;var $3718=self.err;var $3719 = Parser$Reply$error$($3716,$3717,$3718);var $3715 = $3719;break;case 'Parser.Reply.value':var $3720=self.idx;var $3721=self.code;var $3722=self.val;var _arit$28 = (list_length(_args$15));var _type$29 = Kind$Parser$make_forall$(_args$15,$3706);var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15,(_x$30=>{var self = _x$30;switch(self._){case 'Kind.Binder.new':var $3725=self.name;var $3726 = $3725;var $3724 = $3726;break;};return $3724;})),$3714);var _type$31 = Kind$Term$bind$(List$nil,(_x$31=>{var $3727 = (_x$31+'1');return $3727;}),_type$29);var _term$32 = Kind$Term$bind$(List$nil,(_x$32=>{var $3728 = (_x$32+'0');return $3728;}),_term$30);var _defs$33 = Kind$define$(_file$1,_code$2,$3722,$3683,_term$32,_type$31,Bool$false,_arit$28,Bool$false,_defs$3);var $3723 = Parser$Reply$value$($3720,$3721,_defs$33);var $3715 = $3723;break;};var $3707 = $3715;break;};var $3699 = $3707;break;};var $3692 = $3699;break;};var $3684 = $3692;break;};var $3676 = $3684;break;};var $3668 = $3676;break;};return $3668;};
 const Kind$Parser$file$def = x0=>x1=>x2=>x3=>x4=>Kind$Parser$file$def$(x0,x1,x2,x3,x4);function Maybe$default$(_a$2,_m$3){var self = _m$3;switch(self._){case 'Maybe.some':var $3730=self.value;var $3731 = $3730;var $3729 = $3731;break;case 'Maybe.none':var $3732 = _a$2;var $3729 = $3732;break;};return $3729;};
 const Maybe$default = x0=>x1=>Maybe$default$(x0,x1);function Kind$Constructor$new$(_name$1,_args$2,_inds$3){var $3733 = ({_:'Kind.Constructor.new','name':_name$1,'args':_args$2,'inds':_inds$3});return $3733;};
 const Kind$Constructor$new = x0=>x1=>x2=>Kind$Constructor$new$(x0,x1,x2);function Kind$Parser$constructor$(_namespace$1,_idx$2,_code$3){var self = Kind$Parser$name1$(_idx$2,_code$3);switch(self._){case 'Parser.Reply.error':var $3735=self.idx;var $3736=self.code;var $3737=self.err;var $3738 = Parser$Reply$error$($3735,$3736,$3737);var $3734 = $3738;break;case 'Parser.Reply.value':var $3739=self.idx;var $3740=self.code;var $3741=self.val;var self = Parser$maybe$(Kind$Parser$binder(":"),$3739,$3740);switch(self._){case 'Parser.Reply.error':var $3743=self.idx;var $3744=self.code;var $3745=self.err;var $3746 = Parser$Reply$error$($3743,$3744,$3745);var $3742 = $3746;break;case 'Parser.Reply.value':var $3747=self.idx;var $3748=self.code;var $3749=self.val;var self = Parser$maybe$((_idx$10=>_code$11=>{var self = Kind$Parser$text$("~",_idx$10,_code$11);switch(self._){case 'Parser.Reply.error':var $3752=self.idx;var $3753=self.code;var $3754=self.err;var $3755 = Parser$Reply$error$($3752,$3753,$3754);var $3751 = $3755;break;case 'Parser.Reply.value':var $3756=self.idx;var $3757=self.code;var $3758 = Kind$Parser$binder$("=",$3756,$3757);var $3751 = $3758;break;};return $3751;}),$3747,$3748);switch(self._){case 'Parser.Reply.error':var $3759=self.idx;var $3760=self.code;var $3761=self.err;var $3762 = Parser$Reply$error$($3759,$3760,$3761);var $3750 = $3762;break;case 'Parser.Reply.value':var $3763=self.idx;var $3764=self.code;var $3765=self.val;var _args$13 = Maybe$default$(List$nil,$3749);var _inds$14 = Maybe$default$(List$nil,$3765);var $3766 = Parser$Reply$value$($3763,$3764,Kind$Constructor$new$($3741,_args$13,_inds$14));var $3750 = $3766;break;};var $3742 = $3750;break;};var $3734 = $3742;break;};return $3734;};
 const Kind$Parser$constructor = x0=>x1=>x2=>Kind$Parser$constructor$(x0,x1,x2);function Kind$Datatype$new$(_name$1,_pars$2,_inds$3,_ctrs$4){var $3767 = ({_:'Kind.Datatype.new','name':_name$1,'pars':_pars$2,'inds':_inds$3,'ctrs':_ctrs$4});return $3767;};
 const Kind$Datatype$new = x0=>x1=>x2=>x3=>Kind$Datatype$new$(x0,x1,x2,x3);function Kind$Parser$datatype$(_idx$1,_code$2){var self = Kind$Parser$text$("type ",_idx$1,_code$2);switch(self._){case 'Parser.Reply.error':var $3769=self.idx;var $3770=self.code;var $3771=self.err;var $3772 = Parser$Reply$error$($3769,$3770,$3771);var $3768 = $3772;break;case 'Parser.Reply.value':var $3773=self.idx;var $3774=self.code;var self = Kind$Parser$name1$($3773,$3774);switch(self._){case 'Parser.Reply.error':var $3776=self.idx;var $3777=self.code;var $3778=self.err;var $3779 = Parser$Reply$error$($3776,$3777,$3778);var $3775 = $3779;break;case 'Parser.Reply.value':var $3780=self.idx;var $3781=self.code;var $3782=self.val;var self = Parser$maybe$(Kind$Parser$binder(":"),$3780,$3781);switch(self._){case 'Parser.Reply.error':var $3784=self.idx;var $3785=self.code;var $3786=self.err;var $3787 = Parser$Reply$error$($3784,$3785,$3786);var $3783 = $3787;break;case 'Parser.Reply.value':var $3788=self.idx;var $3789=self.code;var $3790=self.val;var self = Parser$maybe$((_idx$12=>_code$13=>{var self = Kind$Parser$text$("~",_idx$12,_code$13);switch(self._){case 'Parser.Reply.error':var $3793=self.idx;var $3794=self.code;var $3795=self.err;var $3796 = Parser$Reply$error$($3793,$3794,$3795);var $3792 = $3796;break;case 'Parser.Reply.value':var $3797=self.idx;var $3798=self.code;var $3799 = Kind$Parser$binder$(":",$3797,$3798);var $3792 = $3799;break;};return $3792;}),$3788,$3789);switch(self._){case 'Parser.Reply.error':var $3800=self.idx;var $3801=self.code;var $3802=self.err;var $3803 = Parser$Reply$error$($3800,$3801,$3802);var $3791 = $3803;break;case 'Parser.Reply.value':var $3804=self.idx;var $3805=self.code;var $3806=self.val;var _pars$15 = Maybe$default$(List$nil,$3790);var _inds$16 = Maybe$default$(List$nil,$3806);var self = Kind$Parser$text$("{",$3804,$3805);switch(self._){case 'Parser.Reply.error':var $3808=self.idx;var $3809=self.code;var $3810=self.err;var $3811 = Parser$Reply$error$($3808,$3809,$3810);var $3807 = $3811;break;case 'Parser.Reply.value':var $3812=self.idx;var $3813=self.code;var self = Parser$until$(Kind$Parser$text("}"),Kind$Parser$item(Kind$Parser$constructor($3782)))($3812)($3813);switch(self._){case 'Parser.Reply.error':var $3815=self.idx;var $3816=self.code;var $3817=self.err;var $3818 = Parser$Reply$error$($3815,$3816,$3817);var $3814 = $3818;break;case 'Parser.Reply.value':var $3819=self.idx;var $3820=self.code;var $3821=self.val;var $3822 = Parser$Reply$value$($3819,$3820,Kind$Datatype$new$($3782,_pars$15,_inds$16,$3821));var $3814 = $3822;break;};var $3807 = $3814;break;};var $3791 = $3807;break;};var $3783 = $3791;break;};var $3775 = $3783;break;};var $3768 = $3775;break;};return $3768;};
 const Kind$Parser$datatype = x0=>x1=>Kind$Parser$datatype$(x0,x1);function Kind$Datatype$build_term$motive$go$(_type$1,_name$2,_inds$3){var self = _inds$3;switch(self._){case 'List.cons':var $3824=self.head;var $3825=self.tail;var self = $3824;switch(self._){case 'Kind.Binder.new':var $3827=self.eras;var $3828=self.name;var $3829=self.term;var $3830 = Kind$Term$all$($3827,"",$3828,$3829,(_s$9=>_x$10=>{var $3831 = Kind$Datatype$build_term$motive$go$(_type$1,_name$2,$3825);return $3831;}));var $3826 = $3830;break;};var $3823 = $3826;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3833=self.pars;var $3834=self.inds;var _slf$8 = Kind$Term$ref$(_name$2);var _slf$9 = (()=>{var $3837 = _slf$8;var $3838 = $3833;let _slf$10=$3837;let _v$9;while ($3838._==='List.cons') {_v$9=$3838.head;var $3837 = Kind$Term$app$(_slf$10,Kind$Term$ref$((()=>{var self = _v$9;switch(self._){case 'Kind.Binder.new':var $3839=self.name;var $3840 = $3839;return $3840;};})()));_slf$10=$3837;$3838=$3838.tail;}return _slf$10;})();var _slf$10 = (()=>{var $3842 = _slf$9;var $3843 = $3834;let _slf$11=$3842;let _v$10;while ($3843._==='List.cons') {_v$10=$3843.head;var $3842 = Kind$Term$app$(_slf$11,Kind$Term$ref$((()=>{var self = _v$10;switch(self._){case 'Kind.Binder.new':var $3844=self.name;var $3845 = $3844;return $3845;};})()));_slf$11=$3842;$3843=$3843.tail;}return _slf$11;})();var $3835 = Kind$Term$all$(Bool$false,"","",_slf$10,(_s$11=>_x$12=>{var $3846 = Kind$Term$typ;return $3846;}));var $3832 = $3835;break;};var $3823 = $3832;break;};return $3823;};
 const Kind$Datatype$build_term$motive$go = x0=>x1=>x2=>Kind$Datatype$build_term$motive$go$(x0,x1,x2);function Kind$Datatype$build_term$motive$(_type$1){var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3848=self.name;var $3849=self.inds;var $3850 = Kind$Datatype$build_term$motive$go$(_type$1,$3848,$3849);var $3847 = $3850;break;};return $3847;};
 const Kind$Datatype$build_term$motive = x0=>Kind$Datatype$build_term$motive$(x0);function Kind$Datatype$build_term$constructor$go$(_type$1,_ctor$2,_args$3){var self = _args$3;switch(self._){case 'List.cons':var $3852=self.head;var $3853=self.tail;var self = $3852;switch(self._){case 'Kind.Binder.new':var $3855=self.eras;var $3856=self.name;var $3857=self.term;var _eras$9 = $3855;var _name$10 = $3856;var _xtyp$11 = $3857;var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1,_ctor$2,$3853);var $3858 = Kind$Term$all$(_eras$9,"",_name$10,_xtyp$11,(_s$13=>_x$14=>{var $3859 = _body$12;return $3859;}));var $3854 = $3858;break;};var $3851 = $3854;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3861=self.name;var $3862=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Constructor.new':var $3864=self.name;var $3865=self.args;var $3866=self.inds;var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));var _ret$12 = (()=>{var $3869 = _ret$11;var $3870 = $3866;let _ret$13=$3869;let _v$12;while ($3870._==='List.cons') {_v$12=$3870.head;var $3869 = Kind$Term$app$(_ret$13,(()=>{var self = _v$12;switch(self._){case 'Kind.Binder.new':var $3871=self.term;var $3872 = $3871;return $3872;};})());_ret$13=$3869;$3870=$3870.tail;}return _ret$13;})();var _ctr$13 = String$flatten$(List$cons$($3861,List$cons$(Kind$Name$read$("."),List$cons$($3864,List$nil))));var _slf$14 = Kind$Term$ref$(_ctr$13);var _slf$15 = (()=>{var $3874 = _slf$14;var $3875 = $3862;let _slf$16=$3874;let _v$15;while ($3875._==='List.cons') {_v$15=$3875.head;var $3874 = Kind$Term$app$(_slf$16,Kind$Term$ref$((()=>{var self = _v$15;switch(self._){case 'Kind.Binder.new':var $3876=self.name;var $3877 = $3876;return $3877;};})()));_slf$16=$3874;$3875=$3875.tail;}return _slf$16;})();var _slf$16 = (()=>{var $3879 = _slf$15;var $3880 = $3865;let _slf$17=$3879;let _v$16;while ($3880._==='List.cons') {_v$16=$3880.head;var $3879 = Kind$Term$app$(_slf$17,Kind$Term$ref$((()=>{var self = _v$16;switch(self._){case 'Kind.Binder.new':var $3881=self.name;var $3882 = $3881;return $3882;};})()));_slf$17=$3879;$3880=$3880.tail;}return _slf$17;})();var $3867 = Kind$Term$app$(_ret$12,_slf$16);var $3863 = $3867;break;};var $3860 = $3863;break;};var $3851 = $3860;break;};return $3851;};
 const Kind$Datatype$build_term$constructor$go = x0=>x1=>x2=>Kind$Datatype$build_term$constructor$go$(x0,x1,x2);function Kind$Datatype$build_term$constructor$(_type$1,_ctor$2){var self = _ctor$2;switch(self._){case 'Kind.Constructor.new':var $3884=self.args;var $3885 = Kind$Datatype$build_term$constructor$go$(_type$1,_ctor$2,$3884);var $3883 = $3885;break;};return $3883;};
 const Kind$Datatype$build_term$constructor = x0=>x1=>Kind$Datatype$build_term$constructor$(x0,x1);function Kind$Datatype$build_term$constructors$go$(_type$1,_name$2,_ctrs$3){var self = _ctrs$3;switch(self._){case 'List.cons':var $3887=self.head;var $3888=self.tail;var self = $3887;switch(self._){case 'Kind.Constructor.new':var $3890=self.name;var $3891 = Kind$Term$all$(Bool$false,"",$3890,Kind$Datatype$build_term$constructor$(_type$1,$3887),(_s$9=>_x$10=>{var $3892 = Kind$Datatype$build_term$constructors$go$(_type$1,_name$2,$3888);return $3892;}));var $3889 = $3891;break;};var $3886 = $3889;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3894=self.inds;var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));var _ret$9 = (()=>{var $3897 = _ret$8;var $3898 = $3894;let _ret$10=$3897;let _v$9;while ($3898._==='List.cons') {_v$9=$3898.head;var $3897 = Kind$Term$app$(_ret$10,Kind$Term$ref$((()=>{var self = _v$9;switch(self._){case 'Kind.Binder.new':var $3899=self.name;var $3900 = $3899;return $3900;};})()));_ret$10=$3897;$3898=$3898.tail;}return _ret$10;})();var $3895 = Kind$Term$app$(_ret$9,Kind$Term$ref$((_name$2+".Self")));var $3893 = $3895;break;};var $3886 = $3893;break;};return $3886;};
 const Kind$Datatype$build_term$constructors$go = x0=>x1=>x2=>Kind$Datatype$build_term$constructors$go$(x0,x1,x2);function Kind$Datatype$build_term$constructors$(_type$1){var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3902=self.name;var $3903=self.ctrs;var $3904 = Kind$Datatype$build_term$constructors$go$(_type$1,$3902,$3903);var $3901 = $3904;break;};return $3901;};
 const Kind$Datatype$build_term$constructors = x0=>Kind$Datatype$build_term$constructors$(x0);function Kind$Datatype$build_term$go$(_type$1,_name$2,_pars$3,_inds$4){var self = _pars$3;switch(self._){case 'List.cons':var $3906=self.head;var $3907=self.tail;var self = $3906;switch(self._){case 'Kind.Binder.new':var $3909=self.name;var $3910 = Kind$Term$lam$($3909,(_x$10=>{var $3911 = Kind$Datatype$build_term$go$(_type$1,_name$2,$3907,_inds$4);return $3911;}));var $3908 = $3910;break;};var $3905 = $3908;break;case 'List.nil':var self = _inds$4;switch(self._){case 'List.cons':var $3913=self.head;var $3914=self.tail;var self = $3913;switch(self._){case 'Kind.Binder.new':var $3916=self.name;var $3917 = Kind$Term$lam$($3916,(_x$10=>{var $3918 = Kind$Datatype$build_term$go$(_type$1,_name$2,_pars$3,$3914);return $3918;}));var $3915 = $3917;break;};var $3912 = $3915;break;case 'List.nil':var $3919 = Kind$Term$all$(Bool$true,(_name$2+".Self"),Kind$Name$read$("P"),Kind$Datatype$build_term$motive$(_type$1),(_s$5=>_x$6=>{var $3920 = Kind$Datatype$build_term$constructors$(_type$1);return $3920;}));var $3912 = $3919;break;};var $3905 = $3912;break;};return $3905;};
 const Kind$Datatype$build_term$go = x0=>x1=>x2=>x3=>Kind$Datatype$build_term$go$(x0,x1,x2,x3);function Kind$Datatype$build_term$(_type$1){var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3922=self.name;var $3923=self.pars;var $3924=self.inds;var $3925 = Kind$Datatype$build_term$go$(_type$1,$3922,$3923,$3924);var $3921 = $3925;break;};return $3921;};
 const Kind$Datatype$build_term = x0=>Kind$Datatype$build_term$(x0);function Kind$Datatype$build_type$go$(_type$1,_name$2,_pars$3,_inds$4){var self = _pars$3;switch(self._){case 'List.cons':var $3927=self.head;var $3928=self.tail;var self = $3927;switch(self._){case 'Kind.Binder.new':var $3930=self.name;var $3931=self.term;var $3932 = Kind$Term$all$(Bool$false,"",$3930,$3931,(_s$10=>_x$11=>{var $3933 = Kind$Datatype$build_type$go$(_type$1,_name$2,$3928,_inds$4);return $3933;}));var $3929 = $3932;break;};var $3926 = $3929;break;case 'List.nil':var self = _inds$4;switch(self._){case 'List.cons':var $3935=self.head;var $3936=self.tail;var self = $3935;switch(self._){case 'Kind.Binder.new':var $3938=self.name;var $3939=self.term;var $3940 = Kind$Term$all$(Bool$false,"",$3938,$3939,(_s$10=>_x$11=>{var $3941 = Kind$Datatype$build_type$go$(_type$1,_name$2,_pars$3,$3936);return $3941;}));var $3937 = $3940;break;};var $3934 = $3937;break;case 'List.nil':var $3942 = Kind$Term$typ;var $3934 = $3942;break;};var $3926 = $3934;break;};return $3926;};
 const Kind$Datatype$build_type$go = x0=>x1=>x2=>x3=>Kind$Datatype$build_type$go$(x0,x1,x2,x3);function Kind$Datatype$build_type$(_type$1){var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3944=self.name;var $3945=self.pars;var $3946=self.inds;var $3947 = Kind$Datatype$build_type$go$(_type$1,$3944,$3945,$3946);var $3943 = $3947;break;};return $3943;};
 const Kind$Datatype$build_type = x0=>Kind$Datatype$build_type$(x0);function Kind$Constructor$build_term$opt$go$(_type$1,_ctor$2,_ctrs$3){var self = _ctrs$3;switch(self._){case 'List.cons':var $3949=self.head;var $3950=self.tail;var self = $3949;switch(self._){case 'Kind.Constructor.new':var $3952=self.name;var $3953 = Kind$Term$lam$($3952,(_x$9=>{var $3954 = Kind$Constructor$build_term$opt$go$(_type$1,_ctor$2,$3950);return $3954;}));var $3951 = $3953;break;};var $3948 = $3951;break;case 'List.nil':var self = _ctor$2;switch(self._){case 'Kind.Constructor.new':var $3956=self.name;var $3957=self.args;var _ret$7 = Kind$Term$ref$($3956);var _ret$8 = (()=>{var $3960 = _ret$7;var $3961 = $3957;let _ret$9=$3960;let _arg$8;while ($3961._==='List.cons') {_arg$8=$3961.head;var $3960 = Kind$Term$app$(_ret$9,Kind$Term$ref$((()=>{var self = _arg$8;switch(self._){case 'Kind.Binder.new':var $3962=self.name;var $3963 = $3962;return $3963;};})()));_ret$9=$3960;$3961=$3961.tail;}return _ret$9;})();var $3958 = _ret$8;var $3955 = $3958;break;};var $3948 = $3955;break;};return $3948;};
 const Kind$Constructor$build_term$opt$go = x0=>x1=>x2=>Kind$Constructor$build_term$opt$go$(x0,x1,x2);function Kind$Constructor$build_term$opt$(_type$1,_ctor$2){var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3965=self.ctrs;var $3966 = Kind$Constructor$build_term$opt$go$(_type$1,_ctor$2,$3965);var $3964 = $3966;break;};return $3964;};
 const Kind$Constructor$build_term$opt = x0=>x1=>Kind$Constructor$build_term$opt$(x0,x1);function Kind$Constructor$build_term$go$(_type$1,_ctor$2,_name$3,_pars$4,_args$5){var self = _pars$4;switch(self._){case 'List.cons':var $3968=self.head;var $3969=self.tail;var self = $3968;switch(self._){case 'Kind.Binder.new':var $3971=self.name;var $3972 = Kind$Term$lam$($3971,(_x$11=>{var $3973 = Kind$Constructor$build_term$go$(_type$1,_ctor$2,_name$3,$3969,_args$5);return $3973;}));var $3970 = $3972;break;};var $3967 = $3970;break;case 'List.nil':var self = _args$5;switch(self._){case 'List.cons':var $3975=self.head;var $3976=self.tail;var self = $3975;switch(self._){case 'Kind.Binder.new':var $3978=self.name;var $3979 = Kind$Term$lam$($3978,(_x$11=>{var $3980 = Kind$Constructor$build_term$go$(_type$1,_ctor$2,_name$3,_pars$4,$3976);return $3980;}));var $3977 = $3979;break;};var $3974 = $3977;break;case 'List.nil':var $3981 = Kind$Term$lam$(Kind$Name$read$("P"),(_x$6=>{var $3982 = Kind$Constructor$build_term$opt$(_type$1,_ctor$2);return $3982;}));var $3974 = $3981;break;};var $3967 = $3974;break;};return $3967;};
 const Kind$Constructor$build_term$go = x0=>x1=>x2=>x3=>x4=>Kind$Constructor$build_term$go$(x0,x1,x2,x3,x4);function Kind$Constructor$build_term$(_type$1,_ctor$2){var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $3984=self.name;var $3985=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Constructor.new':var $3987=self.args;var $3988 = Kind$Constructor$build_term$go$(_type$1,_ctor$2,$3984,$3985,$3987);var $3986 = $3988;break;};var $3983 = $3986;break;};return $3983;};
 const Kind$Constructor$build_term = x0=>x1=>Kind$Constructor$build_term$(x0,x1);function Kind$Constructor$build_type$go$(_type$1,_ctor$2,_name$3,_pars$4,_args$5){var self = _pars$4;switch(self._){case 'List.cons':var $3990=self.head;var $3991=self.tail;var self = $3990;switch(self._){case 'Kind.Binder.new':var $3993=self.eras;var $3994=self.name;var $3995=self.term;var $3996 = Kind$Term$all$($3993,"",$3994,$3995,(_s$11=>_x$12=>{var $3997 = Kind$Constructor$build_type$go$(_type$1,_ctor$2,_name$3,$3991,_args$5);return $3997;}));var $3992 = $3996;break;};var $3989 = $3992;break;case 'List.nil':var self = _args$5;switch(self._){case 'List.cons':var $3999=self.head;var $4000=self.tail;var self = $3999;switch(self._){case 'Kind.Binder.new':var $4002=self.eras;var $4003=self.name;var $4004=self.term;var $4005 = Kind$Term$all$($4002,"",$4003,$4004,(_s$11=>_x$12=>{var $4006 = Kind$Constructor$build_type$go$(_type$1,_ctor$2,_name$3,_pars$4,$4000);return $4006;}));var $4001 = $4005;break;};var $3998 = $4001;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $4008=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Constructor.new':var $4010=self.inds;var _type$13 = Kind$Term$ref$(_name$3);var _type$14 = (()=>{var $4013 = _type$13;var $4014 = $4008;let _type$15=$4013;let _v$14;while ($4014._==='List.cons') {_v$14=$4014.head;var $4013 = Kind$Term$app$(_type$15,Kind$Term$ref$((()=>{var self = _v$14;switch(self._){case 'Kind.Binder.new':var $4015=self.name;var $4016 = $4015;return $4016;};})()));_type$15=$4013;$4014=$4014.tail;}return _type$15;})();var _type$15 = (()=>{var $4018 = _type$14;var $4019 = $4010;let _type$16=$4018;let _v$15;while ($4019._==='List.cons') {_v$15=$4019.head;var $4018 = Kind$Term$app$(_type$16,(()=>{var self = _v$15;switch(self._){case 'Kind.Binder.new':var $4020=self.term;var $4021 = $4020;return $4021;};})());_type$16=$4018;$4019=$4019.tail;}return _type$16;})();var $4011 = _type$15;var $4009 = $4011;break;};var $4007 = $4009;break;};var $3998 = $4007;break;};var $3989 = $3998;break;};return $3989;};
 const Kind$Constructor$build_type$go = x0=>x1=>x2=>x3=>x4=>Kind$Constructor$build_type$go$(x0,x1,x2,x3,x4);function Kind$Constructor$build_type$(_type$1,_ctor$2){var self = _type$1;switch(self._){case 'Kind.Datatype.new':var $4023=self.name;var $4024=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Constructor.new':var $4026=self.args;var $4027 = Kind$Constructor$build_type$go$(_type$1,_ctor$2,$4023,$4024,$4026);var $4025 = $4027;break;};var $4022 = $4025;break;};return $4022;};
 const Kind$Constructor$build_type = x0=>x1=>Kind$Constructor$build_type$(x0,x1);function Kind$Parser$file$adt$(_file$1,_code$2,_defs$3,_idx$4,_code$5){var self = Kind$Parser$init$(_idx$4,_code$5);switch(self._){case 'Parser.Reply.error':var $4029=self.idx;var $4030=self.code;var $4031=self.err;var $4032 = Parser$Reply$error$($4029,$4030,$4031);var $4028 = $4032;break;case 'Parser.Reply.value':var $4033=self.idx;var $4034=self.code;var $4035=self.val;var self = Kind$Parser$datatype$($4033,$4034);switch(self._){case 'Parser.Reply.error':var $4037=self.idx;var $4038=self.code;var $4039=self.err;var $4040 = Parser$Reply$error$($4037,$4038,$4039);var $4036 = $4040;break;case 'Parser.Reply.value':var $4041=self.idx;var $4042=self.code;var $4043=self.val;var self = Kind$Parser$stop$($4035,$4041,$4042);switch(self._){case 'Parser.Reply.error':var $4045=self.idx;var $4046=self.code;var $4047=self.err;var $4048 = Parser$Reply$error$($4045,$4046,$4047);var $4044 = $4048;break;case 'Parser.Reply.value':var $4049=self.idx;var $4050=self.code;var $4051=self.val;var self = $4043;switch(self._){case 'Kind.Datatype.new':var $4053=self.name;var $4054=self.pars;var $4055=self.inds;var $4056=self.ctrs;var _term$19 = Kind$Datatype$build_term$($4043);var _term$20 = Kind$Term$bind$(List$nil,(_x$20=>{var $4058 = (_x$20+'1');return $4058;}),_term$19);var _type$21 = Kind$Datatype$build_type$($4043);var _type$22 = Kind$Term$bind$(List$nil,(_x$22=>{var $4059 = (_x$22+'0');return $4059;}),_type$21);var _arit$23 = ((list_length($4054))+(list_length($4055)));var _defs$24 = Kind$define$(_file$1,_code$2,$4051,$4053,_term$20,_type$22,Bool$false,_arit$23,Bool$false,_defs$3);var _defs$25 = List$fold$($4056,_defs$24,(_ctr$25=>_defs$26=>{var _typ_name$27 = $4053;var _ctr_arit$28 = (_arit$23+(list_length((()=>{var self = _ctr$25;switch(self._){case 'Kind.Constructor.new':var $4061=self.args;var $4062 = $4061;return $4062;};})())));var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27,List$cons$(Kind$Name$read$("."),List$cons$((()=>{var self = _ctr$25;switch(self._){case 'Kind.Constructor.new':var $4063=self.name;var $4064 = $4063;return $4064;};})(),List$nil))));var _ctr_term$30 = Kind$Constructor$build_term$($4043,_ctr$25);var _ctr_term$31 = Kind$Term$bind$(List$nil,(_x$31=>{var $4065 = (_x$31+'1');return $4065;}),_ctr_term$30);var _ctr_type$32 = Kind$Constructor$build_type$($4043,_ctr$25);var _ctr_type$33 = Kind$Term$bind$(List$nil,(_x$33=>{var $4066 = (_x$33+'0');return $4066;}),_ctr_type$32);var $4060 = Kind$define$(_file$1,_code$2,$4051,_ctr_name$29,_ctr_term$31,_ctr_type$33,Bool$true,_ctr_arit$28,Bool$false,_defs$26);return $4060;}));var $4057 = (_idx$26=>_code$27=>{var $4067 = Parser$Reply$value$(_idx$26,_code$27,_defs$25);return $4067;});var $4052 = $4057;break;};var $4052 = $4052($4049)($4050);var $4044 = $4052;break;};var $4036 = $4044;break;};var $4028 = $4036;break;};return $4028;};
 const Kind$Parser$file$adt = x0=>x1=>x2=>x3=>x4=>Kind$Parser$file$adt$(x0,x1,x2,x3,x4);function Parser$eof$(_idx$1,_code$2){var self = _code$2;if (self.length===0) {var $4069 = Parser$Reply$value$(_idx$1,_code$2,Unit$new);var $4068 = $4069;} else {var $4070=self.charCodeAt(0);var $4071=self.slice(1);var $4072 = Parser$Reply$error$(_idx$1,_code$2,"Expected end-of-file.");var $4068 = $4072;};return $4068;};
 const Parser$eof = x0=>x1=>Parser$eof$(x0,x1);function Kind$Parser$file$end$(_file$1,_code$2,_defs$3,_idx$4,_code$5){var self = Kind$Parser$spaces(_idx$4)(_code$5);switch(self._){case 'Parser.Reply.error':var $4074=self.idx;var $4075=self.code;var $4076=self.err;var $4077 = Parser$Reply$error$($4074,$4075,$4076);var $4073 = $4077;break;case 'Parser.Reply.value':var $4078=self.idx;var $4079=self.code;var self = Parser$eof$($4078,$4079);switch(self._){case 'Parser.Reply.error':var $4081=self.idx;var $4082=self.code;var $4083=self.err;var $4084 = Parser$Reply$error$($4081,$4082,$4083);var $4080 = $4084;break;case 'Parser.Reply.value':var $4085=self.idx;var $4086=self.code;var $4087 = Parser$Reply$value$($4085,$4086,_defs$3);var $4080 = $4087;break;};var $4073 = $4080;break;};return $4073;};
 const Kind$Parser$file$end = x0=>x1=>x2=>x3=>x4=>Kind$Parser$file$end$(x0,x1,x2,x3,x4);function Kind$Parser$file$(_file$1,_code$2,_defs$3,_idx$4,_code$5){var self = Parser$is_eof$(_idx$4,_code$5);switch(self._){case 'Parser.Reply.error':var $4089=self.idx;var $4090=self.code;var $4091=self.err;var $4092 = Parser$Reply$error$($4089,$4090,$4091);var $4088 = $4092;break;case 'Parser.Reply.value':var $4093=self.idx;var $4094=self.code;var $4095=self.val;var self = $4095;if (self) {var $4097 = (_idx$9=>_code$10=>{var $4098 = Parser$Reply$value$(_idx$9,_code$10,_defs$3);return $4098;});var $4096 = $4097;} else {var $4099 = (_idx$9=>_code$10=>{var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3),List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3),List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3),List$nil))))(_idx$9)(_code$10);switch(self._){case 'Parser.Reply.error':var $4101=self.idx;var $4102=self.code;var $4103=self.err;var $4104 = Parser$Reply$error$($4101,$4102,$4103);var $4100 = $4104;break;case 'Parser.Reply.value':var $4105=self.idx;var $4106=self.code;var $4107=self.val;var $4108 = Kind$Parser$file$(_file$1,_code$2,$4107,$4105,$4106);var $4100 = $4108;break;};return $4100;});var $4096 = $4099;};var $4096 = $4096($4093)($4094);var $4088 = $4096;break;};return $4088;};
 const Kind$Parser$file = x0=>x1=>x2=>x3=>x4=>Kind$Parser$file$(x0,x1,x2,x3,x4);function Either$(_A$1,_B$2){var $4109 = null;return $4109;};
 const Either = x0=>x1=>Either$(x0,x1);function String$join$go$(_sep$1,_list$2,_fst$3){var self = _list$2;switch(self._){case 'List.cons':var $4111=self.head;var $4112=self.tail;var $4113 = String$flatten$(List$cons$((()=>{var self = _fst$3;if (self) {var $4114 = "";return $4114;} else {var $4115 = _sep$1;return $4115;};})(),List$cons$($4111,List$cons$(String$join$go$(_sep$1,$4112,Bool$false),List$nil))));var $4110 = $4113;break;case 'List.nil':var $4116 = "";var $4110 = $4116;break;};return $4110;};
 const String$join$go = x0=>x1=>x2=>String$join$go$(x0,x1,x2);function String$join$(_sep$1,_list$2){var $4117 = String$join$go$(_sep$1,_list$2,Bool$true);return $4117;};
 const String$join = x0=>x1=>String$join$(x0,x1);function Kind$highlight$end$(_col$1,_row$2,_res$3){var $4118 = String$join$("\u{a}",_res$3);return $4118;};
 const Kind$highlight$end = x0=>x1=>x2=>Kind$highlight$end$(x0,x1,x2);function Maybe$extract$(_m$2,_a$4,_f$5){var self = _m$2;switch(self._){case 'Maybe.some':var $4120=self.value;var $4121 = _f$5($4120);var $4119 = $4121;break;case 'Maybe.none':var $4122 = _a$4;var $4119 = $4122;break;};return $4119;};
 const Maybe$extract = x0=>x1=>x2=>Maybe$extract$(x0,x1,x2);function Nat$is_zero$(_n$1){var self = _n$1;if (self===0n) {var $4124 = Bool$true;var $4123 = $4124;} else {var $4125=(self-1n);var $4126 = Bool$false;var $4123 = $4126;};return $4123;};
 const Nat$is_zero = x0=>Nat$is_zero$(x0);function Nat$double$(_n$1){var self = _n$1;if (self===0n) {var $4128 = Nat$zero;var $4127 = $4128;} else {var $4129=(self-1n);var $4130 = Nat$succ$(Nat$succ$(Nat$double$($4129)));var $4127 = $4130;};return $4127;};
 const Nat$double = x0=>Nat$double$(x0);function Nat$pred$(_n$1){var self = _n$1;if (self===0n) {var $4132 = Nat$zero;var $4131 = $4132;} else {var $4133=(self-1n);var $4134 = $4133;var $4131 = $4134;};return $4131;};
 const Nat$pred = x0=>Nat$pred$(x0);function String$pad_right$(_size$1,_chr$2,_str$3){var self = _size$1;if (self===0n) {var $4136 = _str$3;var $4135 = $4136;} else {var $4137=(self-1n);var self = _str$3;if (self.length===0) {var $4139 = String$cons$(_chr$2,String$pad_right$($4137,_chr$2,""));var $4138 = $4139;} else {var $4140=self.charCodeAt(0);var $4141=self.slice(1);var $4142 = String$cons$($4140,String$pad_right$($4137,_chr$2,$4141));var $4138 = $4142;};var $4135 = $4138;};return $4135;};
 const String$pad_right = x0=>x1=>x2=>String$pad_right$(x0,x1,x2);function String$pad_left$(_size$1,_chr$2,_str$3){var $4143 = String$reverse$(String$pad_right$(_size$1,_chr$2,String$reverse$(_str$3)));return $4143;};
 const String$pad_left = x0=>x1=>x2=>String$pad_left$(x0,x1,x2);function Either$left$(_value$3){var $4144 = ({_:'Either.left','value':_value$3});return $4144;};
 const Either$left = x0=>Either$left$(x0);function Either$right$(_value$3){var $4145 = ({_:'Either.right','value':_value$3});return $4145;};
 const Either$right = x0=>Either$right$(x0);function Nat$sub_rem$(_n$1,_m$2){var Nat$sub_rem$=(_n$1,_m$2)=>({ctr:'TCO',arg:[_n$1,_m$2]});var Nat$sub_rem=_n$1=>_m$2=>Nat$sub_rem$(_n$1,_m$2);var arg=[_n$1,_m$2];while(true){let [_n$1,_m$2]=arg;var R=(()=>{var self = _m$2;if (self===0n) {var $4146 = Either$left$(_n$1);return $4146;} else {var $4147=(self-1n);var self = _n$1;if (self===0n) {var $4149 = Either$right$(Nat$succ$($4147));var $4148 = $4149;} else {var $4150=(self-1n);var $4151 = Nat$sub_rem$($4150,$4147);var $4148 = $4151;};return $4148;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Nat$sub_rem = x0=>x1=>Nat$sub_rem$(x0,x1);function Nat$div_mod$go$(_n$1,_m$2,_d$3){var Nat$div_mod$go$=(_n$1,_m$2,_d$3)=>({ctr:'TCO',arg:[_n$1,_m$2,_d$3]});var Nat$div_mod$go=_n$1=>_m$2=>_d$3=>Nat$div_mod$go$(_n$1,_m$2,_d$3);var arg=[_n$1,_m$2,_d$3];while(true){let [_n$1,_m$2,_d$3]=arg;var R=(()=>{var self = Nat$sub_rem$(_n$1,_m$2);switch(self._){case 'Either.left':var $4152=self.value;var $4153 = Nat$div_mod$go$($4152,_m$2,Nat$succ$(_d$3));return $4153;case 'Either.right':var $4154 = Pair$new$(_d$3,_n$1);return $4154;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Nat$div_mod$go = x0=>x1=>x2=>Nat$div_mod$go$(x0,x1,x2);  const Nat$div_mod = a0=>a1=>(({_:'Pair.new','fst':a0/a1,'snd':a0%a1}));
function Nat$to_base$go$(_base$1,_nat$2,_res$3){var Nat$to_base$go$=(_base$1,_nat$2,_res$3)=>({ctr:'TCO',arg:[_base$1,_nat$2,_res$3]});var Nat$to_base$go=_base$1=>_nat$2=>_res$3=>Nat$to_base$go$(_base$1,_nat$2,_res$3);var arg=[_base$1,_nat$2,_res$3];while(true){let [_base$1,_nat$2,_res$3]=arg;var R=(()=>{var self = (({_:'Pair.new','fst':_nat$2/_base$1,'snd':_nat$2%_base$1}));switch(self._){case 'Pair.new':var $4155=self.fst;var $4156=self.snd;var self = $4155;if (self===0n) {var $4158 = List$cons$($4156,_res$3);var $4157 = $4158;} else {var $4159=(self-1n);var $4160 = Nat$to_base$go$(_base$1,$4155,List$cons$($4156,_res$3));var $4157 = $4160;};return $4157;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Nat$to_base$go = x0=>x1=>x2=>Nat$to_base$go$(x0,x1,x2);function Nat$to_base$(_base$1,_nat$2){var $4161 = Nat$to_base$go$(_base$1,_nat$2,List$nil);return $4161;};
 const Nat$to_base = x0=>x1=>Nat$to_base$(x0,x1);function Nat$mod$go$(_n$1,_m$2,_r$3){var Nat$mod$go$=(_n$1,_m$2,_r$3)=>({ctr:'TCO',arg:[_n$1,_m$2,_r$3]});var Nat$mod$go=_n$1=>_m$2=>_r$3=>Nat$mod$go$(_n$1,_m$2,_r$3);var arg=[_n$1,_m$2,_r$3];while(true){let [_n$1,_m$2,_r$3]=arg;var R=(()=>{var self = _m$2;if (self===0n) {var $4162 = Nat$mod$go$(_n$1,_r$3,_m$2);return $4162;} else {var $4163=(self-1n);var self = _n$1;if (self===0n) {var $4165 = _r$3;var $4164 = $4165;} else {var $4166=(self-1n);var $4167 = Nat$mod$go$($4166,$4163,Nat$succ$(_r$3));var $4164 = $4167;};return $4164;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Nat$mod$go = x0=>x1=>x2=>Nat$mod$go$(x0,x1,x2);function Nat$mod$(_n$1,_m$2){var $4168 = Nat$mod$go$(_n$1,_m$2,0n);return $4168;};
 const Nat$mod = x0=>x1=>Nat$mod$(x0,x1);  const Nat$lte = a0=>a1=>(a0<=a1);
function Nat$show_digit$(_base$1,_n$2){var _m$3 = Nat$mod$(_n$2,_base$1);var _base64$4 = List$cons$(48,List$cons$(49,List$cons$(50,List$cons$(51,List$cons$(52,List$cons$(53,List$cons$(54,List$cons$(55,List$cons$(56,List$cons$(57,List$cons$(65,List$cons$(66,List$cons$(67,List$cons$(68,List$cons$(69,List$cons$(70,List$cons$(71,List$cons$(72,List$cons$(73,List$cons$(74,List$cons$(75,List$cons$(76,List$cons$(77,List$cons$(78,List$cons$(79,List$cons$(80,List$cons$(81,List$cons$(82,List$cons$(83,List$cons$(84,List$cons$(85,List$cons$(86,List$cons$(87,List$cons$(88,List$cons$(89,List$cons$(90,List$cons$(97,List$cons$(98,List$cons$(99,List$cons$(100,List$cons$(101,List$cons$(102,List$cons$(103,List$cons$(104,List$cons$(105,List$cons$(106,List$cons$(107,List$cons$(108,List$cons$(109,List$cons$(110,List$cons$(111,List$cons$(112,List$cons$(113,List$cons$(114,List$cons$(115,List$cons$(116,List$cons$(117,List$cons$(118,List$cons$(119,List$cons$(120,List$cons$(121,List$cons$(122,List$cons$(43,List$cons$(47,List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));var self = ((_base$1>0n)&&(_base$1<=64n));if (self) {var self = List$at$(_m$3,_base64$4);switch(self._){case 'Maybe.some':var $4171=self.value;var $4172 = $4171;var $4170 = $4172;break;case 'Maybe.none':var $4173 = 35;var $4170 = $4173;break;};var $4169 = $4170;} else {var $4174 = 35;var $4169 = $4174;};return $4169;};
 const Nat$show_digit = x0=>x1=>Nat$show_digit$(x0,x1);function Nat$to_string_base$(_base$1,_nat$2){var $4175 = List$fold$(Nat$to_base$(_base$1,_nat$2),String$nil,(_n$3=>_str$4=>{var $4176 = String$cons$(Nat$show_digit$(_base$1,_n$3),_str$4);return $4176;}));return $4175;};
 const Nat$to_string_base = x0=>x1=>Nat$to_string_base$(x0,x1);function Nat$show$(_n$1){var $4177 = Nat$to_string_base$(10n,_n$1);return $4177;};
 const Nat$show = x0=>Nat$show$(x0);  const Bool$not = a0=>(!a0);
function Kind$color$(_col$1,_str$2){var $4178 = String$cons$(27,String$cons$(91,(_col$1+String$cons$(109,(_str$2+String$cons$(27,String$cons$(91,String$cons$(48,String$cons$(109,String$nil)))))))));return $4178;};
 const Kind$color = x0=>x1=>Kind$color$(x0,x1);  const Nat$eql = a0=>a1=>(a0===a1);
function List$take$(_n$2,_xs$3){var self = _xs$3;switch(self._){case 'List.cons':var $4180=self.head;var $4181=self.tail;var self = _n$2;if (self===0n) {var $4183 = List$nil;var $4182 = $4183;} else {var $4184=(self-1n);var $4185 = List$cons$($4180,List$take$($4184,$4181));var $4182 = $4185;};var $4179 = $4182;break;case 'List.nil':var $4186 = List$nil;var $4179 = $4186;break;};return $4179;};
 const List$take = x0=>x1=>List$take$(x0,x1);function Kind$highlight$go$(_code$1,_ix0$2,_ix1$3,_col$4,_row$5,_lft$6,_lin$7,_res$8){var Kind$highlight$go$=(_code$1,_ix0$2,_ix1$3,_col$4,_row$5,_lft$6,_lin$7,_res$8)=>({ctr:'TCO',arg:[_code$1,_ix0$2,_ix1$3,_col$4,_row$5,_lft$6,_lin$7,_res$8]});var Kind$highlight$go=_code$1=>_ix0$2=>_ix1$3=>_col$4=>_row$5=>_lft$6=>_lin$7=>_res$8=>Kind$highlight$go$(_code$1,_ix0$2,_ix1$3,_col$4,_row$5,_lft$6,_lin$7,_res$8);var arg=[_code$1,_ix0$2,_ix1$3,_col$4,_row$5,_lft$6,_lin$7,_res$8];while(true){let [_code$1,_ix0$2,_ix1$3,_col$4,_row$5,_lft$6,_lin$7,_res$8]=arg;var R=(()=>{var _spa$9 = 3n;var self = _code$1;if (self.length===0) {var $4188 = Kind$highlight$end$(_col$4,_row$5,List$reverse$(_res$8));var $4187 = $4188;} else {var $4189=self.charCodeAt(0);var $4190=self.slice(1);var self = ($4189===10);if (self) {var _stp$12 = Maybe$extract$(_lft$6,Bool$false,Nat$is_zero);var self = _stp$12;if (self) {var $4193 = Kind$highlight$end$(_col$4,_row$5,List$reverse$(_res$8));var $4192 = $4193;} else {var _siz$13 = Nat$succ$(Nat$double$(_spa$9));var self = _ix1$3;if (self===0n) {var self = _lft$6;switch(self._){case 'Maybe.some':var $4196=self.value;var $4197 = Maybe$some$(Nat$pred$($4196));var $4195 = $4197;break;case 'Maybe.none':var $4198 = Maybe$some$(_spa$9);var $4195 = $4198;break;};var _lft$14 = $4195;} else {var $4199=(self-1n);var $4200 = _lft$6;var _lft$14 = $4200;};var _ix0$15 = Nat$pred$(_ix0$2);var _ix1$16 = Nat$pred$(_ix1$3);var _col$17 = 0n;var _row$18 = Nat$succ$(_row$5);var _res$19 = List$cons$(String$reverse$(_lin$7),_res$8);var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n,32,Nat$show$(_row$18)),List$cons$(" | ",List$nil))));var $4194 = Kind$highlight$go$($4190,_ix0$15,_ix1$16,_col$17,_row$18,_lft$14,_lin$20,_res$19);var $4192 = $4194;};var $4191 = $4192;} else {var _chr$12 = String$cons$($4189,String$nil);var self = (Nat$is_zero$(_ix0$2)&&(!Nat$is_zero$(_ix1$3)));if (self) {var $4202 = String$reverse$(Kind$color$("31",Kind$color$("4",_chr$12)));var _chr$13 = $4202;} else {var $4203 = _chr$12;var _chr$13 = $4203;};var self = (_ix0$2===1n);if (self) {var $4204 = List$take$(_spa$9,_res$8);var _res$14 = $4204;} else {var $4205 = _res$8;var _res$14 = $4205;};var _ix0$15 = Nat$pred$(_ix0$2);var _ix1$16 = Nat$pred$(_ix1$3);var _col$17 = Nat$succ$(_col$4);var _lin$18 = String$flatten$(List$cons$(_chr$13,List$cons$(_lin$7,List$nil)));var $4201 = Kind$highlight$go$($4190,_ix0$15,_ix1$16,_col$17,_row$5,_lft$6,_lin$18,_res$14);var $4191 = $4201;};var $4187 = $4191;};return $4187;})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$highlight$go = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>Kind$highlight$go$(x0,x1,x2,x3,x4,x5,x6,x7);function Kind$highlight$(_code$1,_idx0$2,_idx1$3){var $4206 = Kind$highlight$go$(_code$1,_idx0$2,_idx1$3,0n,1n,Maybe$none,String$reverse$("   1 | "),List$nil);return $4206;};
 const Kind$highlight = x0=>x1=>x2=>Kind$highlight$(x0,x1,x2);function Kind$Defs$read$(_file$1,_code$2,_defs$3){var self = Kind$Parser$file$(_file$1,_code$2,_defs$3,0n,_code$2);switch(self._){case 'Parser.Reply.error':var $4208=self.idx;var $4209=self.err;var _err$7 = $4209;var _hig$8 = Kind$highlight$(_code$2,$4208,Nat$succ$($4208));var _str$9 = String$flatten$(List$cons$(_err$7,List$cons$("\u{a}",List$cons$(_hig$8,List$nil))));var $4210 = Either$left$(_str$9);var $4207 = $4210;break;case 'Parser.Reply.value':var $4211=self.val;var $4212 = Either$right$($4211);var $4207 = $4212;break;};return $4207;};
 const Kind$Defs$read = x0=>x1=>x2=>Kind$Defs$read$(x0,x1,x2);function Kind$Synth$load$go$(_name$1,_files$2,_defs$3){var self = _files$2;switch(self._){case 'List.cons':var $4214=self.head;var $4215=self.tail;var $4216 = IO$monad$((_m$bind$6=>_m$pure$7=>{var $4217 = _m$bind$6;return $4217;}))(IO$get_file$($4214))((_code$6=>{var _read$7 = Kind$Defs$read$($4214,_code$6,_defs$3);var self = _read$7;switch(self._){case 'Either.right':var $4219=self.value;var _defs$9 = $4219;var self = Kind$Map$get$(_name$1,_defs$9);switch(self._){case 'Maybe.none':var $4221 = Kind$Synth$load$go$(_name$1,$4215,_defs$9);var $4220 = $4221;break;case 'Maybe.some':var $4222 = IO$monad$((_m$bind$11=>_m$pure$12=>{var $4223 = _m$pure$12;return $4223;}))(Maybe$some$(_defs$9));var $4220 = $4222;break;};var $4218 = $4220;break;case 'Either.left':var $4224 = Kind$Synth$load$go$(_name$1,$4215,_defs$3);var $4218 = $4224;break;};return $4218;}));var $4213 = $4216;break;case 'List.nil':var $4225 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $4226 = _m$pure$5;return $4226;}))(Maybe$none);var $4213 = $4225;break;};return $4213;};
 const Kind$Synth$load$go = x0=>x1=>x2=>Kind$Synth$load$go$(x0,x1,x2);function Kind$Synth$files_of$make$(_names$1,_last$2){var self = _names$1;switch(self._){case 'List.cons':var $4228=self.head;var $4229=self.tail;var _head$5 = (_last$2+($4228+".kind"));var _tail$6 = Kind$Synth$files_of$make$($4229,(_last$2+($4228+"/")));var $4230 = List$cons$(_head$5,_tail$6);var $4227 = $4230;break;case 'List.nil':var $4231 = List$nil;var $4227 = $4231;break;};return $4227;};
 const Kind$Synth$files_of$make = x0=>x1=>Kind$Synth$files_of$make$(x0,x1);function Char$eql$(_a$1,_b$2){var $4232 = (_a$1===_b$2);return $4232;};
 const Char$eql = x0=>x1=>Char$eql$(x0,x1);function String$starts_with$(_xs$1,_match$2){var String$starts_with$=(_xs$1,_match$2)=>({ctr:'TCO',arg:[_xs$1,_match$2]});var String$starts_with=_xs$1=>_match$2=>String$starts_with$(_xs$1,_match$2);var arg=[_xs$1,_match$2];while(true){let [_xs$1,_match$2]=arg;var R=(()=>{var self = _match$2;if (self.length===0) {var $4233 = Bool$true;return $4233;} else {var $4234=self.charCodeAt(0);var $4235=self.slice(1);var self = _xs$1;if (self.length===0) {var $4237 = Bool$false;var $4236 = $4237;} else {var $4238=self.charCodeAt(0);var $4239=self.slice(1);var self = Char$eql$($4234,$4238);if (self) {var $4241 = String$starts_with$($4239,$4235);var $4240 = $4241;} else {var $4242 = Bool$false;var $4240 = $4242;};var $4236 = $4240;};return $4236;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const String$starts_with = x0=>x1=>String$starts_with$(x0,x1);function String$drop$(_n$1,_xs$2){var String$drop$=(_n$1,_xs$2)=>({ctr:'TCO',arg:[_n$1,_xs$2]});var String$drop=_n$1=>_xs$2=>String$drop$(_n$1,_xs$2);var arg=[_n$1,_xs$2];while(true){let [_n$1,_xs$2]=arg;var R=(()=>{var self = _n$1;if (self===0n) {var $4243 = _xs$2;return $4243;} else {var $4244=(self-1n);var self = _xs$2;if (self.length===0) {var $4246 = String$nil;var $4245 = $4246;} else {var $4247=self.charCodeAt(0);var $4248=self.slice(1);var $4249 = String$drop$($4244,$4248);var $4245 = $4249;};return $4245;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const String$drop = x0=>x1=>String$drop$(x0,x1);function String$length$go$(_xs$1,_n$2){var String$length$go$=(_xs$1,_n$2)=>({ctr:'TCO',arg:[_xs$1,_n$2]});var String$length$go=_xs$1=>_n$2=>String$length$go$(_xs$1,_n$2);var arg=[_xs$1,_n$2];while(true){let [_xs$1,_n$2]=arg;var R=(()=>{var self = _xs$1;if (self.length===0) {var $4250 = _n$2;return $4250;} else {var $4251=self.charCodeAt(0);var $4252=self.slice(1);var $4253 = String$length$go$($4252,Nat$succ$(_n$2));return $4253;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const String$length$go = x0=>x1=>String$length$go$(x0,x1);function String$length$(_xs$1){var $4254 = String$length$go$(_xs$1,0n);return $4254;};
 const String$length = x0=>String$length$(x0);function String$split$go$(_xs$1,_match$2,_last$3){var self = _xs$1;if (self.length===0) {var $4256 = List$cons$(_last$3,List$nil);var $4255 = $4256;} else {var $4257=self.charCodeAt(0);var $4258=self.slice(1);var self = String$starts_with$(_xs$1,_match$2);if (self) {var _rest$6 = String$drop$(String$length$(_match$2),_xs$1);var $4260 = List$cons$(_last$3,String$split$go$(_rest$6,_match$2,""));var $4259 = $4260;} else {var _next$6 = String$cons$($4257,String$nil);var $4261 = String$split$go$($4258,_match$2,(_last$3+_next$6));var $4259 = $4261;};var $4255 = $4259;};return $4255;};
 const String$split$go = x0=>x1=>x2=>String$split$go$(x0,x1,x2);function String$split$(_xs$1,_match$2){var $4262 = String$split$go$(_xs$1,_match$2,"");return $4262;};
 const String$split = x0=>x1=>String$split$(x0,x1);function Kind$Synth$files_of$(_name$1){var $4263 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1,"."),""));return $4263;};
 const Kind$Synth$files_of = x0=>Kind$Synth$files_of$(x0);function Kind$Synth$load$(_name$1,_defs$2){var $4264 = Kind$Synth$load$go$(_name$1,Kind$Synth$files_of$(_name$1),_defs$2);return $4264;};
 const Kind$Synth$load = x0=>x1=>Kind$Synth$load$(x0,x1); const Kind$Status$wait = ({_:'Kind.Status.wait'});
function Kind$Check$(_V$1){var $4265 = null;return $4265;};
 const Kind$Check = x0=>Kind$Check$(x0);function Kind$Check$result$(_value$2,_errors$3){var $4266 = ({_:'Kind.Check.result','value':_value$2,'errors':_errors$3});return $4266;};
 const Kind$Check$result = x0=>x1=>Kind$Check$result$(x0,x1);function Kind$Error$undefined_reference$(_origin$1,_name$2){var $4267 = ({_:'Kind.Error.undefined_reference','origin':_origin$1,'name':_name$2});return $4267;};
 const Kind$Error$undefined_reference = x0=>x1=>Kind$Error$undefined_reference$(x0,x1);function Kind$Error$waiting$(_name$1){var $4268 = ({_:'Kind.Error.waiting','name':_name$1});return $4268;};
 const Kind$Error$waiting = x0=>Kind$Error$waiting$(x0);function Kind$Error$indirect$(_name$1){var $4269 = ({_:'Kind.Error.indirect','name':_name$1});return $4269;};
 const Kind$Error$indirect = x0=>Kind$Error$indirect$(x0);function Maybe$mapped$(_m$2,_f$4){var self = _m$2;switch(self._){case 'Maybe.some':var $4271=self.value;var $4272 = Maybe$some$(_f$4($4271));var $4270 = $4272;break;case 'Maybe.none':var $4273 = Maybe$none;var $4270 = $4273;break;};return $4270;};
 const Maybe$mapped = x0=>x1=>Maybe$mapped$(x0,x1);function Kind$MPath$o$(_path$1){var $4274 = Maybe$mapped$(_path$1,Kind$Path$o);return $4274;};
 const Kind$MPath$o = x0=>Kind$MPath$o$(x0);function Kind$MPath$i$(_path$1){var $4275 = Maybe$mapped$(_path$1,Kind$Path$i);return $4275;};
 const Kind$MPath$i = x0=>Kind$MPath$i$(x0);function Kind$Error$patch$(_path$1,_term$2){var $4276 = ({_:'Kind.Error.patch','path':_path$1,'term':_term$2});return $4276;};
 const Kind$Error$patch = x0=>x1=>Kind$Error$patch$(x0,x1);function Kind$MPath$to_bits$(_path$1){var self = _path$1;switch(self._){case 'Maybe.some':var $4278=self.value;var $4279 = $4278(Bits$e);var $4277 = $4279;break;case 'Maybe.none':var $4280 = Bits$e;var $4277 = $4280;break;};return $4277;};
 const Kind$MPath$to_bits = x0=>Kind$MPath$to_bits$(x0);function Kind$Error$type_mismatch$(_origin$1,_expected$2,_detected$3,_context$4){var $4281 = ({_:'Kind.Error.type_mismatch','origin':_origin$1,'expected':_expected$2,'detected':_detected$3,'context':_context$4});return $4281;};
 const Kind$Error$type_mismatch = x0=>x1=>x2=>x3=>Kind$Error$type_mismatch$(x0,x1,x2,x3);function Kind$Error$show_goal$(_origin$1,_name$2,_dref$3,_verb$4,_goal$5,_context$6){var $4282 = ({_:'Kind.Error.show_goal','origin':_origin$1,'name':_name$2,'dref':_dref$3,'verb':_verb$4,'goal':_goal$5,'context':_context$6});return $4282;};
 const Kind$Error$show_goal = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Error$show_goal$(x0,x1,x2,x3,x4,x5);function Kind$Term$normalize$(_term$1,_defs$2){var self = Kind$Term$reduce$(_term$1,_defs$2);switch(self._){case 'Kind.Term.var':var $4284=self.name;var $4285=self.indx;var $4286 = Kind$Term$var$($4284,$4285);var $4283 = $4286;break;case 'Kind.Term.ref':var $4287=self.name;var $4288 = Kind$Term$ref$($4287);var $4283 = $4288;break;case 'Kind.Term.all':var $4289=self.eras;var $4290=self.self;var $4291=self.name;var $4292=self.xtyp;var $4293=self.body;var $4294 = Kind$Term$all$($4289,$4290,$4291,Kind$Term$normalize$($4292,_defs$2),(_s$8=>_x$9=>{var $4295 = Kind$Term$normalize$($4293(_s$8)(_x$9),_defs$2);return $4295;}));var $4283 = $4294;break;case 'Kind.Term.lam':var $4296=self.name;var $4297=self.body;var $4298 = Kind$Term$lam$($4296,(_x$5=>{var $4299 = Kind$Term$normalize$($4297(_x$5),_defs$2);return $4299;}));var $4283 = $4298;break;case 'Kind.Term.app':var $4300=self.func;var $4301=self.argm;var $4302 = Kind$Term$app$(Kind$Term$normalize$($4300,_defs$2),Kind$Term$normalize$($4301,_defs$2));var $4283 = $4302;break;case 'Kind.Term.let':var $4303=self.name;var $4304=self.expr;var $4305=self.body;var $4306 = Kind$Term$let$($4303,Kind$Term$normalize$($4304,_defs$2),(_x$6=>{var $4307 = Kind$Term$normalize$($4305(_x$6),_defs$2);return $4307;}));var $4283 = $4306;break;case 'Kind.Term.def':var $4308=self.name;var $4309=self.expr;var $4310=self.body;var $4311 = Kind$Term$def$($4308,Kind$Term$normalize$($4309,_defs$2),(_x$6=>{var $4312 = Kind$Term$normalize$($4310(_x$6),_defs$2);return $4312;}));var $4283 = $4311;break;case 'Kind.Term.ann':var $4313=self.done;var $4314=self.term;var $4315=self.type;var $4316 = Kind$Term$ann$($4313,Kind$Term$normalize$($4314,_defs$2),Kind$Term$normalize$($4315,_defs$2));var $4283 = $4316;break;case 'Kind.Term.gol':var $4317=self.name;var $4318=self.dref;var $4319=self.verb;var $4320 = Kind$Term$gol$($4317,$4318,$4319);var $4283 = $4320;break;case 'Kind.Term.hol':var $4321=self.path;var $4322 = Kind$Term$hol$($4321);var $4283 = $4322;break;case 'Kind.Term.nat':var $4323=self.natx;var $4324 = Kind$Term$nat$($4323);var $4283 = $4324;break;case 'Kind.Term.chr':var $4325=self.chrx;var $4326 = Kind$Term$chr$($4325);var $4283 = $4326;break;case 'Kind.Term.str':var $4327=self.strx;var $4328 = Kind$Term$str$($4327);var $4283 = $4328;break;case 'Kind.Term.ori':var $4329=self.expr;var $4330 = Kind$Term$normalize$($4329,_defs$2);var $4283 = $4330;break;case 'Kind.Term.typ':var $4331 = Kind$Term$typ;var $4283 = $4331;break;case 'Kind.Term.cse':var $4332 = _term$1;var $4283 = $4332;break;};return $4283;};
 const Kind$Term$normalize = x0=>x1=>Kind$Term$normalize$(x0,x1);function List$tail$(_xs$2){var self = _xs$2;switch(self._){case 'List.cons':var $4334=self.tail;var $4335 = $4334;var $4333 = $4335;break;case 'List.nil':var $4336 = List$nil;var $4333 = $4336;break;};return $4333;};
 const List$tail = x0=>List$tail$(x0);function Kind$SmartMotive$vals$cont$(_expr$1,_term$2,_args$3,_defs$4){var Kind$SmartMotive$vals$cont$=(_expr$1,_term$2,_args$3,_defs$4)=>({ctr:'TCO',arg:[_expr$1,_term$2,_args$3,_defs$4]});var Kind$SmartMotive$vals$cont=_expr$1=>_term$2=>_args$3=>_defs$4=>Kind$SmartMotive$vals$cont$(_expr$1,_term$2,_args$3,_defs$4);var arg=[_expr$1,_term$2,_args$3,_defs$4];while(true){let [_expr$1,_term$2,_args$3,_defs$4]=arg;var R=(()=>{var self = Kind$Term$reduce$(_term$2,_defs$4);switch(self._){case 'Kind.Term.app':var $4337=self.func;var $4338=self.argm;var $4339 = Kind$SmartMotive$vals$cont$(_expr$1,$4337,List$cons$($4338,_args$3),_defs$4);return $4339;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4340 = List$cons$(_expr$1,List$tail$(List$reverse$(_args$3)));return $4340;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$SmartMotive$vals$cont = x0=>x1=>x2=>x3=>Kind$SmartMotive$vals$cont$(x0,x1,x2,x3);function Kind$SmartMotive$vals$(_expr$1,_type$2,_defs$3){var Kind$SmartMotive$vals$=(_expr$1,_type$2,_defs$3)=>({ctr:'TCO',arg:[_expr$1,_type$2,_defs$3]});var Kind$SmartMotive$vals=_expr$1=>_type$2=>_defs$3=>Kind$SmartMotive$vals$(_expr$1,_type$2,_defs$3);var arg=[_expr$1,_type$2,_defs$3];while(true){let [_expr$1,_type$2,_defs$3]=arg;var R=(()=>{var self = Kind$Term$reduce$(_type$2,_defs$3);switch(self._){case 'Kind.Term.all':var $4341=self.body;var $4342 = Kind$SmartMotive$vals$(_expr$1,$4341(Kind$Term$typ)(Kind$Term$typ),_defs$3);return $4342;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4343 = Kind$SmartMotive$vals$cont$(_expr$1,_type$2,List$nil,_defs$3);return $4343;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$SmartMotive$vals = x0=>x1=>x2=>Kind$SmartMotive$vals$(x0,x1,x2);function Kind$SmartMotive$nams$cont$(_name$1,_term$2,_binds$3,_defs$4){var Kind$SmartMotive$nams$cont$=(_name$1,_term$2,_binds$3,_defs$4)=>({ctr:'TCO',arg:[_name$1,_term$2,_binds$3,_defs$4]});var Kind$SmartMotive$nams$cont=_name$1=>_term$2=>_binds$3=>_defs$4=>Kind$SmartMotive$nams$cont$(_name$1,_term$2,_binds$3,_defs$4);var arg=[_name$1,_term$2,_binds$3,_defs$4];while(true){let [_name$1,_term$2,_binds$3,_defs$4]=arg;var R=(()=>{var self = Kind$Term$reduce$(_term$2,_defs$4);switch(self._){case 'Kind.Term.all':var $4344=self.self;var $4345=self.name;var $4346=self.body;var $4347 = Kind$SmartMotive$nams$cont$(_name$1,$4346(Kind$Term$ref$($4344))(Kind$Term$ref$($4345)),List$cons$(String$flatten$(List$cons$(_name$1,List$cons$(".",List$cons$($4345,List$nil)))),_binds$3),_defs$4);return $4347;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4348 = List$cons$(_name$1,List$tail$(_binds$3));return $4348;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$SmartMotive$nams$cont = x0=>x1=>x2=>x3=>Kind$SmartMotive$nams$cont$(x0,x1,x2,x3);function Kind$SmartMotive$nams$(_name$1,_type$2,_defs$3){var self = Kind$Term$reduce$(_type$2,_defs$3);switch(self._){case 'Kind.Term.all':var $4350=self.xtyp;var $4351 = Kind$SmartMotive$nams$cont$(_name$1,$4350,List$nil,_defs$3);var $4349 = $4351;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4352 = List$nil;var $4349 = $4352;break;};return $4349;};
 const Kind$SmartMotive$nams = x0=>x1=>x2=>Kind$SmartMotive$nams$(x0,x1,x2);function List$zip$(_as$3,_bs$4){var self = _as$3;switch(self._){case 'List.cons':var $4354=self.head;var $4355=self.tail;var self = _bs$4;switch(self._){case 'List.cons':var $4357=self.head;var $4358=self.tail;var $4359 = List$cons$(Pair$new$($4354,$4357),List$zip$($4355,$4358));var $4356 = $4359;break;case 'List.nil':var $4360 = List$nil;var $4356 = $4360;break;};var $4353 = $4356;break;case 'List.nil':var $4361 = List$nil;var $4353 = $4361;break;};return $4353;};
 const List$zip = x0=>x1=>List$zip$(x0,x1);  const Nat$gte = a0=>a1=>(a0>=a1);
  const Nat$sub = a0=>a1=>(a0-a1<=0n?0n:a0-a1);
function Kind$Term$serialize$name$(_name$1){var $4362 = (kind_name_to_bits(_name$1));return $4362;};
 const Kind$Term$serialize$name = x0=>Kind$Term$serialize$name$(x0);function Kind$Term$serialize$(_term$1,_depth$2,_init$3,_diff$4,_x$5){var self = _term$1;switch(self._){case 'Kind.Term.var':var $4364=self.indx;var self = ($4364>=_init$3);if (self) {var _name$8 = a1=>(a1+(nat_to_bits(Nat$pred$((_depth$2-$4364<=0n?0n:_depth$2-$4364)))));var $4366 = (((_name$8(_x$5)+'1')+'0')+'0');var $4365 = $4366;} else {var _name$8 = a1=>(a1+(nat_to_bits($4364)));var $4367 = (((_name$8(_x$5)+'0')+'1')+'0');var $4365 = $4367;};var $4363 = $4365;break;case 'Kind.Term.ref':var $4368=self.name;var _name$7 = a1=>(a1+Kind$Term$serialize$name$($4368));var $4369 = (((_name$7(_x$5)+'0')+'0')+'0');var $4363 = $4369;break;case 'Kind.Term.all':var $4370=self.eras;var $4371=self.self;var $4372=self.name;var $4373=self.xtyp;var $4374=self.body;var self = $4370;if (self) {var $4376 = Bits$i;var _eras$11 = $4376;} else {var $4377 = Bits$o;var _eras$11 = $4377;};var _self$12 = a1=>(a1+(kind_name_to_bits($4371)));var _xtyp$13 = Kind$Term$serialize($4373)(_depth$2)(_init$3)(_diff$4);var _body$14 = Kind$Term$serialize($4374(Kind$Term$var$($4371,_depth$2))(Kind$Term$var$($4372,Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);var $4375 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5))))+'0')+'0')+'1');var $4363 = $4375;break;case 'Kind.Term.lam':var $4378=self.name;var $4379=self.body;var _body$8 = Kind$Term$serialize($4379(Kind$Term$var$($4378,_depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);var $4380 = (((_body$8(_x$5)+'1')+'0')+'1');var $4363 = $4380;break;case 'Kind.Term.app':var $4381=self.func;var $4382=self.argm;var _func$8 = Kind$Term$serialize($4381)(_depth$2)(_init$3)(_diff$4);var _argm$9 = Kind$Term$serialize($4382)(_depth$2)(_init$3)(_diff$4);var $4383 = (((_func$8(_argm$9(_x$5))+'0')+'1')+'1');var $4363 = $4383;break;case 'Kind.Term.let':var $4384=self.name;var $4385=self.expr;var $4386=self.body;var _expr$9 = Kind$Term$serialize($4385)(_depth$2)(_init$3)(_diff$4);var _body$10 = Kind$Term$serialize($4386(Kind$Term$var$($4384,_depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);var $4387 = (((_expr$9(_body$10(_x$5))+'1')+'1')+'1');var $4363 = $4387;break;case 'Kind.Term.def':var $4388=self.expr;var $4389=self.body;var $4390 = Kind$Term$serialize$($4389($4388),_depth$2,_init$3,_diff$4,_x$5);var $4363 = $4390;break;case 'Kind.Term.ann':var $4391=self.term;var $4392 = Kind$Term$serialize$($4391,_depth$2,_init$3,_diff$4,_x$5);var $4363 = $4392;break;case 'Kind.Term.gol':var $4393=self.name;var _name$9 = a1=>(a1+(kind_name_to_bits($4393)));var $4394 = (((_name$9(_x$5)+'0')+'0')+'0');var $4363 = $4394;break;case 'Kind.Term.nat':var $4395=self.natx;var $4396 = Kind$Term$serialize$(Kind$Term$unroll_nat$($4395),_depth$2,_init$3,_diff$4,_x$5);var $4363 = $4396;break;case 'Kind.Term.chr':var $4397=self.chrx;var $4398 = Kind$Term$serialize$(Kind$Term$unroll_chr$($4397),_depth$2,_init$3,_diff$4,_x$5);var $4363 = $4398;break;case 'Kind.Term.str':var $4399=self.strx;var $4400 = Kind$Term$serialize$(Kind$Term$unroll_str$($4399),_depth$2,_init$3,_diff$4,_x$5);var $4363 = $4400;break;case 'Kind.Term.ori':var $4401=self.expr;var $4402 = Kind$Term$serialize$($4401,_depth$2,_init$3,_diff$4,_x$5);var $4363 = $4402;break;case 'Kind.Term.typ':var $4403 = (((_x$5+'1')+'1')+'0');var $4363 = $4403;break;case 'Kind.Term.hol':var $4404 = _x$5;var $4363 = $4404;break;case 'Kind.Term.cse':var $4405 = _diff$4(_x$5);var $4363 = $4405;break;};return $4363;};
 const Kind$Term$serialize = x0=>x1=>x2=>x3=>x4=>Kind$Term$serialize$(x0,x1,x2,x3,x4);  const Bits$eql = a0=>a1=>(a1===a0);
function Kind$Term$identical$(_a$1,_b$2,_lv$3){var _ah$4 = Kind$Term$serialize$(_a$1,_lv$3,_lv$3,Bits$o,Bits$e);var _bh$5 = Kind$Term$serialize$(_b$2,_lv$3,_lv$3,Bits$i,Bits$e);var $4406 = (_bh$5===_ah$4);return $4406;};
 const Kind$Term$identical = x0=>x1=>x2=>Kind$Term$identical$(x0,x1,x2);function Kind$SmartMotive$replace$(_term$1,_from$2,_to$3,_lv$4){var self = Kind$Term$identical$(_term$1,_from$2,_lv$4);if (self) {var $4408 = _to$3;var $4407 = $4408;} else {var self = _term$1;switch(self._){case 'Kind.Term.var':var $4410=self.name;var $4411=self.indx;var $4412 = Kind$Term$var$($4410,$4411);var $4409 = $4412;break;case 'Kind.Term.ref':var $4413=self.name;var $4414 = Kind$Term$ref$($4413);var $4409 = $4414;break;case 'Kind.Term.all':var $4415=self.eras;var $4416=self.self;var $4417=self.name;var $4418=self.xtyp;var $4419=self.body;var _xtyp$10 = Kind$SmartMotive$replace$($4418,_from$2,_to$3,_lv$4);var _body$11 = $4419(Kind$Term$ref$($4416))(Kind$Term$ref$($4417));var _body$12 = Kind$SmartMotive$replace$(_body$11,_from$2,_to$3,Nat$succ$(Nat$succ$(_lv$4)));var $4420 = Kind$Term$all$($4415,$4416,$4417,_xtyp$10,(_s$13=>_x$14=>{var $4421 = _body$12;return $4421;}));var $4409 = $4420;break;case 'Kind.Term.lam':var $4422=self.name;var $4423=self.body;var _body$7 = $4423(Kind$Term$ref$($4422));var _body$8 = Kind$SmartMotive$replace$(_body$7,_from$2,_to$3,Nat$succ$(_lv$4));var $4424 = Kind$Term$lam$($4422,(_x$9=>{var $4425 = _body$8;return $4425;}));var $4409 = $4424;break;case 'Kind.Term.app':var $4426=self.func;var $4427=self.argm;var _func$7 = Kind$SmartMotive$replace$($4426,_from$2,_to$3,_lv$4);var _argm$8 = Kind$SmartMotive$replace$($4427,_from$2,_to$3,_lv$4);var $4428 = Kind$Term$app$(_func$7,_argm$8);var $4409 = $4428;break;case 'Kind.Term.let':var $4429=self.name;var $4430=self.expr;var $4431=self.body;var _expr$8 = Kind$SmartMotive$replace$($4430,_from$2,_to$3,_lv$4);var _body$9 = $4431(Kind$Term$ref$($4429));var _body$10 = Kind$SmartMotive$replace$(_body$9,_from$2,_to$3,Nat$succ$(_lv$4));var $4432 = Kind$Term$let$($4429,_expr$8,(_x$11=>{var $4433 = _body$10;return $4433;}));var $4409 = $4432;break;case 'Kind.Term.def':var $4434=self.name;var $4435=self.expr;var $4436=self.body;var _expr$8 = Kind$SmartMotive$replace$($4435,_from$2,_to$3,_lv$4);var _body$9 = $4436(Kind$Term$ref$($4434));var _body$10 = Kind$SmartMotive$replace$(_body$9,_from$2,_to$3,Nat$succ$(_lv$4));var $4437 = Kind$Term$def$($4434,_expr$8,(_x$11=>{var $4438 = _body$10;return $4438;}));var $4409 = $4437;break;case 'Kind.Term.ann':var $4439=self.done;var $4440=self.term;var $4441=self.type;var _term$8 = Kind$SmartMotive$replace$($4440,_from$2,_to$3,_lv$4);var _type$9 = Kind$SmartMotive$replace$($4441,_from$2,_to$3,_lv$4);var $4442 = Kind$Term$ann$($4439,_term$8,_type$9);var $4409 = $4442;break;case 'Kind.Term.ori':var $4443=self.expr;var $4444 = Kind$SmartMotive$replace$($4443,_from$2,_to$3,_lv$4);var $4409 = $4444;break;case 'Kind.Term.typ':var $4445 = Kind$Term$typ;var $4409 = $4445;break;case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4446 = _term$1;var $4409 = $4446;break;};var $4407 = $4409;};return $4407;};
 const Kind$SmartMotive$replace = x0=>x1=>x2=>x3=>Kind$SmartMotive$replace$(x0,x1,x2,x3);function Kind$SmartMotive$make$(_name$1,_expr$2,_type$3,_moti$4,_lv$5,_defs$6){var _vals$7 = Kind$SmartMotive$vals$(_expr$2,_type$3,_defs$6);var _nams$8 = Kind$SmartMotive$nams$(_name$1,_type$3,_defs$6);var _subs$9 = List$zip$(_nams$8,_vals$7);var _moti$10 = List$fold$(_subs$9,_moti$4,(_sub$10=>_moti$11=>{var self = _sub$10;switch(self._){case 'Pair.new':var $4449=self.fst;var $4450=self.snd;var $4451 = Kind$SmartMotive$replace$(_moti$11,$4450,Kind$Term$ref$($4449),_lv$5);var $4448 = $4451;break;};return $4448;}));var $4447 = _moti$10;return $4447;};
 const Kind$SmartMotive$make = x0=>x1=>x2=>x3=>x4=>x5=>Kind$SmartMotive$make$(x0,x1,x2,x3,x4,x5);function Kind$Term$desugar_cse$motive$(_wyth$1,_moti$2){var self = _wyth$1;switch(self._){case 'List.cons':var $4453=self.head;var $4454=self.tail;var self = $4453;switch(self._){case 'Kind.Def.new':var $4456=self.name;var $4457=self.type;var $4458 = Kind$Term$all$(Bool$false,"",$4456,$4457,(_s$14=>_x$15=>{var $4459 = Kind$Term$desugar_cse$motive$($4454,_moti$2);return $4459;}));var $4455 = $4458;break;};var $4452 = $4455;break;case 'List.nil':var $4460 = _moti$2;var $4452 = $4460;break;};return $4452;};
 const Kind$Term$desugar_cse$motive = x0=>x1=>Kind$Term$desugar_cse$motive$(x0,x1);function String$is_empty$(_str$1){var self = _str$1;if (self.length===0) {var $4462 = Bool$true;var $4461 = $4462;} else {var $4463=self.charCodeAt(0);var $4464=self.slice(1);var $4465 = Bool$false;var $4461 = $4465;};return $4461;};
 const String$is_empty = x0=>String$is_empty$(x0);function Kind$Term$desugar_cse$argument$(_name$1,_wyth$2,_type$3,_body$4,_defs$5){var self = Kind$Term$reduce$(_type$3,_defs$5);switch(self._){case 'Kind.Term.all':var $4467=self.self;var $4468=self.name;var $4469=self.body;var $4470 = Kind$Term$lam$((()=>{var self = String$is_empty$($4468);if (self) {var $4471 = _name$1;return $4471;} else {var $4472 = String$flatten$(List$cons$(_name$1,List$cons$(".",List$cons$($4468,List$nil))));return $4472;};})(),(_x$11=>{var $4473 = Kind$Term$desugar_cse$argument$(_name$1,_wyth$2,$4469(Kind$Term$var$($4467,0n))(Kind$Term$var$($4468,0n)),_body$4,_defs$5);return $4473;}));var $4466 = $4470;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.ori':var self = _wyth$2;switch(self._){case 'List.cons':var $4475=self.head;var $4476=self.tail;var self = $4475;switch(self._){case 'Kind.Def.new':var $4478=self.name;var $4479 = Kind$Term$lam$($4478,(_x$19=>{var $4480 = Kind$Term$desugar_cse$argument$(_name$1,$4476,_type$3,_body$4,_defs$5);return $4480;}));var $4477 = $4479;break;};var $4474 = $4477;break;case 'List.nil':var $4481 = _body$4;var $4474 = $4481;break;};var $4466 = $4474;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var self = _wyth$2;switch(self._){case 'List.cons':var $4483=self.head;var $4484=self.tail;var self = $4483;switch(self._){case 'Kind.Def.new':var $4486=self.name;var $4487 = Kind$Term$lam$($4486,(_x$18=>{var $4488 = Kind$Term$desugar_cse$argument$(_name$1,$4484,_type$3,_body$4,_defs$5);return $4488;}));var $4485 = $4487;break;};var $4482 = $4485;break;case 'List.nil':var $4489 = _body$4;var $4482 = $4489;break;};var $4466 = $4482;break;case 'Kind.Term.typ':var self = _wyth$2;switch(self._){case 'List.cons':var $4491=self.head;var $4492=self.tail;var self = $4491;switch(self._){case 'Kind.Def.new':var $4494=self.name;var $4495 = Kind$Term$lam$($4494,(_x$17=>{var $4496 = Kind$Term$desugar_cse$argument$(_name$1,$4492,_type$3,_body$4,_defs$5);return $4496;}));var $4493 = $4495;break;};var $4490 = $4493;break;case 'List.nil':var $4497 = _body$4;var $4490 = $4497;break;};var $4466 = $4490;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var self = _wyth$2;switch(self._){case 'List.cons':var $4499=self.head;var $4500=self.tail;var self = $4499;switch(self._){case 'Kind.Def.new':var $4502=self.name;var $4503 = Kind$Term$lam$($4502,(_x$20=>{var $4504 = Kind$Term$desugar_cse$argument$(_name$1,$4500,_type$3,_body$4,_defs$5);return $4504;}));var $4501 = $4503;break;};var $4498 = $4501;break;case 'List.nil':var $4505 = _body$4;var $4498 = $4505;break;};var $4466 = $4498;break;case 'Kind.Term.cse':var self = _wyth$2;switch(self._){case 'List.cons':var $4507=self.head;var $4508=self.tail;var self = $4507;switch(self._){case 'Kind.Def.new':var $4510=self.name;var $4511 = Kind$Term$lam$($4510,(_x$23=>{var $4512 = Kind$Term$desugar_cse$argument$(_name$1,$4508,_type$3,_body$4,_defs$5);return $4512;}));var $4509 = $4511;break;};var $4506 = $4509;break;case 'List.nil':var $4513 = _body$4;var $4506 = $4513;break;};var $4466 = $4506;break;};return $4466;};
 const Kind$Term$desugar_cse$argument = x0=>x1=>x2=>x3=>x4=>Kind$Term$desugar_cse$argument$(x0,x1,x2,x3,x4);function Maybe$or$(_a$2,_b$3){var self = _a$2;switch(self._){case 'Maybe.some':var $4515=self.value;var $4516 = Maybe$some$($4515);var $4514 = $4516;break;case 'Maybe.none':var $4517 = _b$3;var $4514 = $4517;break;};return $4514;};
 const Maybe$or = x0=>x1=>Maybe$or$(x0,x1);function Kind$Term$desugar_cse$cases$(_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7){var Kind$Term$desugar_cse$cases$=(_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7)=>({ctr:'TCO',arg:[_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7]});var Kind$Term$desugar_cse$cases=_expr$1=>_name$2=>_wyth$3=>_cses$4=>_type$5=>_defs$6=>_ctxt$7=>Kind$Term$desugar_cse$cases$(_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7);var arg=[_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7];while(true){let [_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7]=arg;var R=(()=>{var self = Kind$Term$reduce$(_type$5,_defs$6);switch(self._){case 'Kind.Term.all':var $4518=self.self;var $4519=self.name;var $4520=self.xtyp;var $4521=self.body;var _got$13 = Maybe$or$(Kind$Map$get$($4519,_cses$4),Kind$Map$get$("_",_cses$4));var self = _got$13;switch(self._){case 'Maybe.some':var $4523=self.value;var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2,_wyth$3,$4520,$4523,_defs$6);var _expr$16 = Kind$Term$app$(_expr$1,_argm$15);var _type$17 = $4521(Kind$Term$var$($4518,0n))(Kind$Term$var$($4519,0n));var $4524 = Kind$Term$desugar_cse$cases$(_expr$16,_name$2,_wyth$3,_cses$4,_type$17,_defs$6,_ctxt$7);var $4522 = $4524;break;case 'Maybe.none':var _expr$14 = (()=>{var $4527 = _expr$1;var $4528 = _wyth$3;let _expr$15=$4527;let _defn$14;while ($4528._==='List.cons') {_defn$14=$4528.head;var self = _defn$14;switch(self._){case 'Kind.Def.new':var $4529=self.term;var $4530 = Kind$Term$app$(_expr$15,$4529);var $4527 = $4530;break;};_expr$15=$4527;$4528=$4528.tail;}return _expr$15;})();var $4525 = _expr$14;var $4522 = $4525;break;};return $4522;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.ori':var _expr$10 = (()=>{var $4533 = _expr$1;var $4534 = _wyth$3;let _expr$11=$4533;let _defn$10;while ($4534._==='List.cons') {_defn$10=$4534.head;var $4533 = Kind$Term$app$(_expr$11,(()=>{var self = _defn$10;switch(self._){case 'Kind.Def.new':var $4535=self.term;var $4536 = $4535;return $4536;};})());_expr$11=$4533;$4534=$4534.tail;}return _expr$11;})();var $4531 = _expr$10;return $4531;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var _expr$9 = (()=>{var $4539 = _expr$1;var $4540 = _wyth$3;let _expr$10=$4539;let _defn$9;while ($4540._==='List.cons') {_defn$9=$4540.head;var $4539 = Kind$Term$app$(_expr$10,(()=>{var self = _defn$9;switch(self._){case 'Kind.Def.new':var $4541=self.term;var $4542 = $4541;return $4542;};})());_expr$10=$4539;$4540=$4540.tail;}return _expr$10;})();var $4537 = _expr$9;return $4537;case 'Kind.Term.typ':var _expr$8 = (()=>{var $4545 = _expr$1;var $4546 = _wyth$3;let _expr$9=$4545;let _defn$8;while ($4546._==='List.cons') {_defn$8=$4546.head;var $4545 = Kind$Term$app$(_expr$9,(()=>{var self = _defn$8;switch(self._){case 'Kind.Def.new':var $4547=self.term;var $4548 = $4547;return $4548;};})());_expr$9=$4545;$4546=$4546.tail;}return _expr$9;})();var $4543 = _expr$8;return $4543;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var _expr$11 = (()=>{var $4551 = _expr$1;var $4552 = _wyth$3;let _expr$12=$4551;let _defn$11;while ($4552._==='List.cons') {_defn$11=$4552.head;var $4551 = Kind$Term$app$(_expr$12,(()=>{var self = _defn$11;switch(self._){case 'Kind.Def.new':var $4553=self.term;var $4554 = $4553;return $4554;};})());_expr$12=$4551;$4552=$4552.tail;}return _expr$12;})();var $4549 = _expr$11;return $4549;case 'Kind.Term.cse':var _expr$14 = (()=>{var $4557 = _expr$1;var $4558 = _wyth$3;let _expr$15=$4557;let _defn$14;while ($4558._==='List.cons') {_defn$14=$4558.head;var $4557 = Kind$Term$app$(_expr$15,(()=>{var self = _defn$14;switch(self._){case 'Kind.Def.new':var $4559=self.term;var $4560 = $4559;return $4560;};})());_expr$15=$4557;$4558=$4558.tail;}return _expr$15;})();var $4555 = _expr$14;return $4555;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$Term$desugar_cse$cases = x0=>x1=>x2=>x3=>x4=>x5=>x6=>Kind$Term$desugar_cse$cases$(x0,x1,x2,x3,x4,x5,x6);function Kind$Term$desugar_cse$(_expr$1,_name$2,_wyth$3,_cses$4,_moti$5,_type$6,_defs$7,_ctxt$8){var self = Kind$Term$reduce$(_type$6,_defs$7);switch(self._){case 'Kind.Term.all':var $4562=self.self;var $4563=self.name;var $4564=self.xtyp;var $4565=self.body;var _moti$14 = Kind$Term$desugar_cse$motive$(_wyth$3,_moti$5);var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2,List$nil,$4564,_moti$14,_defs$7);var _expr$16 = Kind$Term$app$(_expr$1,_argm$15);var _type$17 = $4565(Kind$Term$var$($4562,0n))(Kind$Term$var$($4563,0n));var $4566 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$16,_name$2,_wyth$3,_cses$4,_type$17,_defs$7,_ctxt$8));var $4561 = $4566;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4567 = Maybe$none;var $4561 = $4567;break;};return $4561;};
 const Kind$Term$desugar_cse = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>Kind$Term$desugar_cse$(x0,x1,x2,x3,x4,x5,x6,x7);function Kind$Error$cant_infer$(_origin$1,_term$2,_context$3){var $4568 = ({_:'Kind.Error.cant_infer','origin':_origin$1,'term':_term$2,'context':_context$3});return $4568;};
 const Kind$Error$cant_infer = x0=>x1=>x2=>Kind$Error$cant_infer$(x0,x1,x2);function BitsSet$has$(_bits$1,_set$2){var self = BitsMap$get$(_bits$1,_set$2);switch(self._){case 'Maybe.none':var $4570 = Bool$false;var $4569 = $4570;break;case 'Maybe.some':var $4571 = Bool$true;var $4569 = $4571;break;};return $4569;};
 const BitsSet$has = x0=>x1=>BitsSet$has$(x0,x1);function BitsSet$mut$has$(_bits$1,_set$2){var $4572 = BitsSet$has$(_bits$1,_set$2);return $4572;};
 const BitsSet$mut$has = x0=>x1=>BitsSet$mut$has$(x0,x1);function Kind$Term$equal$extra_holes$funari$(_term$1,_arity$2){var Kind$Term$equal$extra_holes$funari$=(_term$1,_arity$2)=>({ctr:'TCO',arg:[_term$1,_arity$2]});var Kind$Term$equal$extra_holes$funari=_term$1=>_arity$2=>Kind$Term$equal$extra_holes$funari$(_term$1,_arity$2);var arg=[_term$1,_arity$2];while(true){let [_term$1,_arity$2]=arg;var R=(()=>{var self = _term$1;switch(self._){case 'Kind.Term.var':var $4573=self.name;var $4574 = Maybe$some$(Pair$new$($4573,_arity$2));return $4574;case 'Kind.Term.ref':var $4575=self.name;var $4576 = Maybe$some$(Pair$new$($4575,_arity$2));return $4576;case 'Kind.Term.app':var $4577=self.func;var $4578 = Kind$Term$equal$extra_holes$funari$($4577,Nat$succ$(_arity$2));return $4578;case 'Kind.Term.ori':var $4579=self.expr;var $4580 = Kind$Term$equal$extra_holes$funari$($4579,_arity$2);return $4580;case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4581 = Maybe$none;return $4581;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$Term$equal$extra_holes$funari = x0=>x1=>Kind$Term$equal$extra_holes$funari$(x0,x1);  const Bool$or = a0=>a1=>(a0||a1);
function Kind$Term$has_holes$(_term$1){var self = _term$1;switch(self._){case 'Kind.Term.all':var $4583=self.xtyp;var $4584=self.body;var $4585 = (Kind$Term$has_holes$($4583)||Kind$Term$has_holes$($4584(Kind$Term$typ)(Kind$Term$typ)));var $4582 = $4585;break;case 'Kind.Term.lam':var $4586=self.body;var $4587 = Kind$Term$has_holes$($4586(Kind$Term$typ));var $4582 = $4587;break;case 'Kind.Term.app':var $4588=self.func;var $4589=self.argm;var $4590 = (Kind$Term$has_holes$($4588)||Kind$Term$has_holes$($4589));var $4582 = $4590;break;case 'Kind.Term.let':var $4591=self.expr;var $4592=self.body;var $4593 = (Kind$Term$has_holes$($4591)||Kind$Term$has_holes$($4592(Kind$Term$typ)));var $4582 = $4593;break;case 'Kind.Term.def':var $4594=self.expr;var $4595=self.body;var $4596 = (Kind$Term$has_holes$($4594)||Kind$Term$has_holes$($4595(Kind$Term$typ)));var $4582 = $4596;break;case 'Kind.Term.ann':var $4597=self.term;var $4598=self.type;var $4599 = (Kind$Term$has_holes$($4597)||Kind$Term$has_holes$($4598));var $4582 = $4599;break;case 'Kind.Term.ori':var $4600=self.expr;var $4601 = Kind$Term$has_holes$($4600);var $4582 = $4601;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4602 = Bool$false;var $4582 = $4602;break;case 'Kind.Term.hol':var $4603 = Bool$true;var $4582 = $4603;break;};return $4582;};
 const Kind$Term$has_holes = x0=>Kind$Term$has_holes$(x0);function Kind$Term$equal$hole$(_path$1,_term$2){var self = _term$2;switch(self._){case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var self = Kind$Term$has_holes$(_term$2);if (self) {var $4606 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4605 = $4606;} else {var $4607 = Kind$Check$result$(Maybe$some$(Bool$true),List$cons$(Kind$Error$patch$(_path$1,Kind$Term$normalize$(_term$2,Kind$Map$new)),List$nil));var $4605 = $4607;};var $4604 = $4605;break;case 'Kind.Term.hol':var $4608 = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);var $4604 = $4608;break;};return $4604;};
 const Kind$Term$equal$hole = x0=>x1=>Kind$Term$equal$hole$(x0,x1);function Kind$Term$equal$extra_holes$filler$(_a$1,_b$2){var self = _a$1;switch(self._){case 'Kind.Term.app':var $4610=self.func;var $4611=self.argm;var self = _b$2;switch(self._){case 'Kind.Term.app':var $4613=self.func;var $4614=self.argm;var self = Kind$Term$equal$extra_holes$filler$($4610,$4613);switch(self._){case 'Kind.Check.result':var $4616=self.value;var $4617=self.errors;var self = $4616;switch(self._){case 'Maybe.none':var $4619 = Kind$Check$result$(Maybe$none,$4617);var $4618 = $4619;break;case 'Maybe.some':var self = Kind$Term$equal$extra_holes$filler$($4611,$4614);switch(self._){case 'Kind.Check.result':var $4621=self.value;var $4622=self.errors;var $4623 = Kind$Check$result$($4621,List$concat$($4617,$4622));var $4620 = $4623;break;};var $4618 = $4620;break;};var $4615 = $4618;break;};var $4612 = $4615;break;case 'Kind.Term.hol':var $4624=self.path;var self = Kind$Term$equal$hole$($4624,_a$1);switch(self._){case 'Kind.Check.result':var $4626=self.value;var $4627=self.errors;var self = $4626;switch(self._){case 'Maybe.none':var $4629 = Kind$Check$result$(Maybe$none,$4627);var $4628 = $4629;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4631=self.value;var $4632=self.errors;var $4633 = Kind$Check$result$($4631,List$concat$($4627,$4632));var $4630 = $4633;break;};var $4628 = $4630;break;};var $4625 = $4628;break;};var $4612 = $4625;break;case 'Kind.Term.ori':var $4634=self.expr;var $4635 = Kind$Term$equal$extra_holes$filler$(_a$1,$4634);var $4612 = $4635;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4636 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4612 = $4636;break;};var $4609 = $4612;break;case 'Kind.Term.hol':var $4637=self.path;var self = Kind$Term$equal$hole$($4637,_b$2);switch(self._){case 'Kind.Check.result':var $4639=self.value;var $4640=self.errors;var self = $4639;switch(self._){case 'Maybe.none':var $4642 = Kind$Check$result$(Maybe$none,$4640);var $4641 = $4642;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4644=self.value;var $4645=self.errors;var $4646 = Kind$Check$result$($4644,List$concat$($4640,$4645));var $4643 = $4646;break;};var $4641 = $4643;break;};var $4638 = $4641;break;};var $4609 = $4638;break;case 'Kind.Term.ori':var $4647=self.expr;var $4648 = Kind$Term$equal$extra_holes$filler$($4647,_b$2);var $4609 = $4648;break;case 'Kind.Term.var':case 'Kind.Term.lam':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $4650=self.path;var self = Kind$Term$equal$hole$($4650,_a$1);switch(self._){case 'Kind.Check.result':var $4652=self.value;var $4653=self.errors;var self = $4652;switch(self._){case 'Maybe.none':var $4655 = Kind$Check$result$(Maybe$none,$4653);var $4654 = $4655;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4657=self.value;var $4658=self.errors;var $4659 = Kind$Check$result$($4657,List$concat$($4653,$4658));var $4656 = $4659;break;};var $4654 = $4656;break;};var $4651 = $4654;break;};var $4649 = $4651;break;case 'Kind.Term.ori':var $4660=self.expr;var $4661 = Kind$Term$equal$extra_holes$filler$(_a$1,$4660);var $4649 = $4661;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4662 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4649 = $4662;break;};var $4609 = $4649;break;case 'Kind.Term.ref':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $4664=self.path;var self = Kind$Term$equal$hole$($4664,_a$1);switch(self._){case 'Kind.Check.result':var $4666=self.value;var $4667=self.errors;var self = $4666;switch(self._){case 'Maybe.none':var $4669 = Kind$Check$result$(Maybe$none,$4667);var $4668 = $4669;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4671=self.value;var $4672=self.errors;var $4673 = Kind$Check$result$($4671,List$concat$($4667,$4672));var $4670 = $4673;break;};var $4668 = $4670;break;};var $4665 = $4668;break;};var $4663 = $4665;break;case 'Kind.Term.ori':var $4674=self.expr;var $4675 = Kind$Term$equal$extra_holes$filler$(_a$1,$4674);var $4663 = $4675;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4676 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4663 = $4676;break;};var $4609 = $4663;break;case 'Kind.Term.typ':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $4678=self.path;var self = Kind$Term$equal$hole$($4678,_a$1);switch(self._){case 'Kind.Check.result':var $4680=self.value;var $4681=self.errors;var self = $4680;switch(self._){case 'Maybe.none':var $4683 = Kind$Check$result$(Maybe$none,$4681);var $4682 = $4683;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4685=self.value;var $4686=self.errors;var $4687 = Kind$Check$result$($4685,List$concat$($4681,$4686));var $4684 = $4687;break;};var $4682 = $4684;break;};var $4679 = $4682;break;};var $4677 = $4679;break;case 'Kind.Term.ori':var $4688=self.expr;var $4689 = Kind$Term$equal$extra_holes$filler$(_a$1,$4688);var $4677 = $4689;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4690 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4677 = $4690;break;};var $4609 = $4677;break;case 'Kind.Term.all':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $4692=self.path;var self = Kind$Term$equal$hole$($4692,_a$1);switch(self._){case 'Kind.Check.result':var $4694=self.value;var $4695=self.errors;var self = $4694;switch(self._){case 'Maybe.none':var $4697 = Kind$Check$result$(Maybe$none,$4695);var $4696 = $4697;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4699=self.value;var $4700=self.errors;var $4701 = Kind$Check$result$($4699,List$concat$($4695,$4700));var $4698 = $4701;break;};var $4696 = $4698;break;};var $4693 = $4696;break;};var $4691 = $4693;break;case 'Kind.Term.ori':var $4702=self.expr;var $4703 = Kind$Term$equal$extra_holes$filler$(_a$1,$4702);var $4691 = $4703;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4704 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4691 = $4704;break;};var $4609 = $4691;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $4706=self.path;var self = Kind$Term$equal$hole$($4706,_a$1);switch(self._){case 'Kind.Check.result':var $4708=self.value;var $4709=self.errors;var self = $4708;switch(self._){case 'Maybe.none':var $4711 = Kind$Check$result$(Maybe$none,$4709);var $4710 = $4711;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4713=self.value;var $4714=self.errors;var $4715 = Kind$Check$result$($4713,List$concat$($4709,$4714));var $4712 = $4715;break;};var $4710 = $4712;break;};var $4707 = $4710;break;};var $4705 = $4707;break;case 'Kind.Term.ori':var $4716=self.expr;var $4717 = Kind$Term$equal$extra_holes$filler$(_a$1,$4716);var $4705 = $4717;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4718 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4705 = $4718;break;};var $4609 = $4705;break;case 'Kind.Term.cse':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $4720=self.path;var self = Kind$Term$equal$hole$($4720,_a$1);switch(self._){case 'Kind.Check.result':var $4722=self.value;var $4723=self.errors;var self = $4722;switch(self._){case 'Maybe.none':var $4725 = Kind$Check$result$(Maybe$none,$4723);var $4724 = $4725;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $4727=self.value;var $4728=self.errors;var $4729 = Kind$Check$result$($4727,List$concat$($4723,$4728));var $4726 = $4729;break;};var $4724 = $4726;break;};var $4721 = $4724;break;};var $4719 = $4721;break;case 'Kind.Term.ori':var $4730=self.expr;var $4731 = Kind$Term$equal$extra_holes$filler$(_a$1,$4730);var $4719 = $4731;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $4732 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4719 = $4732;break;};var $4609 = $4719;break;};return $4609;};
 const Kind$Term$equal$extra_holes$filler = x0=>x1=>Kind$Term$equal$extra_holes$filler$(x0,x1);function Kind$Term$equal$extra_holes$(_a$1,_b$2){var self = Kind$Term$equal$extra_holes$funari$(_a$1,0n);switch(self._){case 'Maybe.some':var $4734=self.value;var self = Kind$Term$equal$extra_holes$funari$(_b$2,0n);switch(self._){case 'Maybe.some':var $4736=self.value;var self = $4734;switch(self._){case 'Pair.new':var $4738=self.fst;var $4739=self.snd;var self = $4736;switch(self._){case 'Pair.new':var $4741=self.fst;var $4742=self.snd;var _same_fun$9 = ($4738===$4741);var _same_ari$10 = ($4739===$4742);var self = (_same_fun$9&&_same_ari$10);if (self) {var $4744 = Kind$Term$equal$extra_holes$filler$(_a$1,_b$2);var $4743 = $4744;} else {var $4745 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4743 = $4745;};var $4740 = $4743;break;};var $4737 = $4740;break;};var $4735 = $4737;break;case 'Maybe.none':var $4746 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4735 = $4746;break;};var $4733 = $4735;break;case 'Maybe.none':var $4747 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $4733 = $4747;break;};return $4733;};
 const Kind$Term$equal$extra_holes = x0=>x1=>Kind$Term$equal$extra_holes$(x0,x1);function BitsSet$set$(_bits$1,_set$2){var $4748 = BitsMap$set$(_bits$1,Unit$new,_set$2);return $4748;};
 const BitsSet$set = x0=>x1=>BitsSet$set$(x0,x1);function BitsSet$mut$set$(_bits$1,_set$2){var $4749 = BitsSet$set$(_bits$1,_set$2);return $4749;};
 const BitsSet$mut$set = x0=>x1=>BitsSet$mut$set$(x0,x1);function Bool$eql$(_a$1,_b$2){var self = _a$1;if (self) {var $4751 = _b$2;var $4750 = $4751;} else {var $4752 = (!_b$2);var $4750 = $4752;};return $4750;};
 const Bool$eql = x0=>x1=>Bool$eql$(x0,x1);function Kind$Term$equal$(_a$1,_b$2,_defs$3,_lv$4,_seen$5){var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1,Kind$Map$new),_lv$4,_lv$4,Bits$o,Bits$e);var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2,Kind$Map$new),_lv$4,_lv$4,Bits$i,Bits$e);var self = (_bh$7===_ah$6);if (self) {var $4754 = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);var $4753 = $4754;} else {var _a1$8 = Kind$Term$reduce$(_a$1,_defs$3);var _b1$9 = Kind$Term$reduce$(_b$2,_defs$3);var _ah$10 = Kind$Term$serialize$(_a1$8,_lv$4,_lv$4,Bits$o,Bits$e);var _bh$11 = Kind$Term$serialize$(_b1$9,_lv$4,_lv$4,Bits$i,Bits$e);var self = (_bh$11===_ah$10);if (self) {var $4756 = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);var $4755 = $4756;} else {var _id$12 = (_bh$11+_ah$10);var self = BitsSet$mut$has$(_id$12,_seen$5);if (self) {var self = Kind$Term$equal$extra_holes$(_a$1,_b$2);switch(self._){case 'Kind.Check.result':var $4759=self.value;var $4760=self.errors;var self = $4759;switch(self._){case 'Maybe.none':var $4762 = Kind$Check$result$(Maybe$none,$4760);var $4761 = $4762;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);switch(self._){case 'Kind.Check.result':var $4764=self.value;var $4765=self.errors;var $4766 = Kind$Check$result$($4764,List$concat$($4760,$4765));var $4763 = $4766;break;};var $4761 = $4763;break;};var $4758 = $4761;break;};var $4757 = $4758;} else {var self = _a1$8;switch(self._){case 'Kind.Term.all':var $4768=self.eras;var $4769=self.self;var $4770=self.name;var $4771=self.xtyp;var $4772=self.body;var self = _b1$9;switch(self._){case 'Kind.Term.all':var $4774=self.eras;var $4775=self.self;var $4776=self.name;var $4777=self.xtyp;var $4778=self.body;var _seen$23 = BitsSet$mut$set$(_id$12,_seen$5);var _a1_body$24 = $4772(Kind$Term$var$($4769,_lv$4))(Kind$Term$var$($4770,Nat$succ$(_lv$4)));var _b1_body$25 = $4778(Kind$Term$var$($4775,_lv$4))(Kind$Term$var$($4776,Nat$succ$(_lv$4)));var _eq_self$26 = ($4769===$4775);var _eq_eras$27 = Bool$eql$($4768,$4774);var self = (_eq_self$26&&_eq_eras$27);if (self) {var self = Kind$Term$equal$($4771,$4777,_defs$3,_lv$4,_seen$23);switch(self._){case 'Kind.Check.result':var $4781=self.value;var $4782=self.errors;var self = $4781;switch(self._){case 'Maybe.some':var $4784=self.value;var self = Kind$Term$equal$(_a1_body$24,_b1_body$25,_defs$3,Nat$succ$(Nat$succ$(_lv$4)),_seen$23);switch(self._){case 'Kind.Check.result':var $4786=self.value;var $4787=self.errors;var self = $4786;switch(self._){case 'Maybe.some':var $4789=self.value;var self = Kind$Check$result$(Maybe$some$(($4784&&$4789)),List$nil);switch(self._){case 'Kind.Check.result':var $4791=self.value;var $4792=self.errors;var $4793 = Kind$Check$result$($4791,List$concat$($4787,$4792));var $4790 = $4793;break;};var $4788 = $4790;break;case 'Maybe.none':var $4794 = Kind$Check$result$(Maybe$none,$4787);var $4788 = $4794;break;};var self = $4788;break;};switch(self._){case 'Kind.Check.result':var $4795=self.value;var $4796=self.errors;var $4797 = Kind$Check$result$($4795,List$concat$($4782,$4796));var $4785 = $4797;break;};var $4783 = $4785;break;case 'Maybe.none':var $4798 = Kind$Check$result$(Maybe$none,$4782);var $4783 = $4798;break;};var $4780 = $4783;break;};var $4779 = $4780;} else {var $4799 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4779 = $4799;};var $4773 = $4779;break;case 'Kind.Term.hol':var $4800=self.path;var $4801 = Kind$Term$equal$hole$($4800,_a$1);var $4773 = $4801;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4802 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4773 = $4802;break;};var $4767 = $4773;break;case 'Kind.Term.lam':var $4803=self.name;var $4804=self.body;var self = _b1$9;switch(self._){case 'Kind.Term.lam':var $4806=self.name;var $4807=self.body;var _seen$17 = BitsSet$mut$set$(_id$12,_seen$5);var _a1_body$18 = $4804(Kind$Term$var$($4803,_lv$4));var _b1_body$19 = $4807(Kind$Term$var$($4806,_lv$4));var self = Kind$Term$equal$(_a1_body$18,_b1_body$19,_defs$3,Nat$succ$(_lv$4),_seen$17);switch(self._){case 'Kind.Check.result':var $4809=self.value;var $4810=self.errors;var self = $4809;switch(self._){case 'Maybe.some':var $4812=self.value;var self = Kind$Check$result$(Maybe$some$($4812),List$nil);switch(self._){case 'Kind.Check.result':var $4814=self.value;var $4815=self.errors;var $4816 = Kind$Check$result$($4814,List$concat$($4810,$4815));var $4813 = $4816;break;};var $4811 = $4813;break;case 'Maybe.none':var $4817 = Kind$Check$result$(Maybe$none,$4810);var $4811 = $4817;break;};var $4808 = $4811;break;};var $4805 = $4808;break;case 'Kind.Term.hol':var $4818=self.path;var $4819 = Kind$Term$equal$hole$($4818,_a$1);var $4805 = $4819;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4820 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4805 = $4820;break;};var $4767 = $4805;break;case 'Kind.Term.app':var $4821=self.func;var $4822=self.argm;var self = _b1$9;switch(self._){case 'Kind.Term.app':var $4824=self.func;var $4825=self.argm;var _seen$17 = BitsSet$mut$set$(_id$12,_seen$5);var self = Kind$Term$equal$($4821,$4824,_defs$3,_lv$4,_seen$17);switch(self._){case 'Kind.Check.result':var $4827=self.value;var $4828=self.errors;var self = $4827;switch(self._){case 'Maybe.some':var $4830=self.value;var self = Kind$Term$equal$($4822,$4825,_defs$3,_lv$4,_seen$17);switch(self._){case 'Kind.Check.result':var $4832=self.value;var $4833=self.errors;var self = $4832;switch(self._){case 'Maybe.some':var $4835=self.value;var self = Kind$Check$result$(Maybe$some$(($4830&&$4835)),List$nil);switch(self._){case 'Kind.Check.result':var $4837=self.value;var $4838=self.errors;var $4839 = Kind$Check$result$($4837,List$concat$($4833,$4838));var $4836 = $4839;break;};var $4834 = $4836;break;case 'Maybe.none':var $4840 = Kind$Check$result$(Maybe$none,$4833);var $4834 = $4840;break;};var self = $4834;break;};switch(self._){case 'Kind.Check.result':var $4841=self.value;var $4842=self.errors;var $4843 = Kind$Check$result$($4841,List$concat$($4828,$4842));var $4831 = $4843;break;};var $4829 = $4831;break;case 'Maybe.none':var $4844 = Kind$Check$result$(Maybe$none,$4828);var $4829 = $4844;break;};var $4826 = $4829;break;};var $4823 = $4826;break;case 'Kind.Term.hol':var $4845=self.path;var $4846 = Kind$Term$equal$hole$($4845,_a$1);var $4823 = $4846;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4847 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4823 = $4847;break;};var $4767 = $4823;break;case 'Kind.Term.let':var $4848=self.name;var $4849=self.expr;var $4850=self.body;var self = _b1$9;switch(self._){case 'Kind.Term.let':var $4852=self.name;var $4853=self.expr;var $4854=self.body;var _seen$19 = BitsSet$mut$set$(_id$12,_seen$5);var _a1_body$20 = $4850(Kind$Term$var$($4848,_lv$4));var _b1_body$21 = $4854(Kind$Term$var$($4852,_lv$4));var self = Kind$Term$equal$($4849,$4853,_defs$3,_lv$4,_seen$19);switch(self._){case 'Kind.Check.result':var $4856=self.value;var $4857=self.errors;var self = $4856;switch(self._){case 'Maybe.some':var $4859=self.value;var self = Kind$Term$equal$(_a1_body$20,_b1_body$21,_defs$3,Nat$succ$(_lv$4),_seen$19);switch(self._){case 'Kind.Check.result':var $4861=self.value;var $4862=self.errors;var self = $4861;switch(self._){case 'Maybe.some':var $4864=self.value;var self = Kind$Check$result$(Maybe$some$(($4859&&$4864)),List$nil);switch(self._){case 'Kind.Check.result':var $4866=self.value;var $4867=self.errors;var $4868 = Kind$Check$result$($4866,List$concat$($4862,$4867));var $4865 = $4868;break;};var $4863 = $4865;break;case 'Maybe.none':var $4869 = Kind$Check$result$(Maybe$none,$4862);var $4863 = $4869;break;};var self = $4863;break;};switch(self._){case 'Kind.Check.result':var $4870=self.value;var $4871=self.errors;var $4872 = Kind$Check$result$($4870,List$concat$($4857,$4871));var $4860 = $4872;break;};var $4858 = $4860;break;case 'Maybe.none':var $4873 = Kind$Check$result$(Maybe$none,$4857);var $4858 = $4873;break;};var $4855 = $4858;break;};var $4851 = $4855;break;case 'Kind.Term.hol':var $4874=self.path;var $4875 = Kind$Term$equal$hole$($4874,_a$1);var $4851 = $4875;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4876 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4851 = $4876;break;};var $4767 = $4851;break;case 'Kind.Term.hol':var $4877=self.path;var $4878 = Kind$Term$equal$hole$($4877,_b$2);var $4767 = $4878;break;case 'Kind.Term.var':case 'Kind.Term.ori':var self = _b1$9;switch(self._){case 'Kind.Term.hol':var $4880=self.path;var $4881 = Kind$Term$equal$hole$($4880,_a$1);var $4879 = $4881;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4882 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4879 = $4882;break;};var $4767 = $4879;break;case 'Kind.Term.ref':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var self = _b1$9;switch(self._){case 'Kind.Term.hol':var $4884=self.path;var $4885 = Kind$Term$equal$hole$($4884,_a$1);var $4883 = $4885;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4886 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4883 = $4886;break;};var $4767 = $4883;break;case 'Kind.Term.typ':var self = _b1$9;switch(self._){case 'Kind.Term.hol':var $4888=self.path;var $4889 = Kind$Term$equal$hole$($4888,_a$1);var $4887 = $4889;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4890 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4887 = $4890;break;};var $4767 = $4887;break;case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var self = _b1$9;switch(self._){case 'Kind.Term.hol':var $4892=self.path;var $4893 = Kind$Term$equal$hole$($4892,_a$1);var $4891 = $4893;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4894 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4891 = $4894;break;};var $4767 = $4891;break;case 'Kind.Term.cse':var self = _b1$9;switch(self._){case 'Kind.Term.hol':var $4896=self.path;var $4897 = Kind$Term$equal$hole$($4896,_a$1);var $4895 = $4897;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $4898 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $4895 = $4898;break;};var $4767 = $4895;break;};var $4757 = $4767;};var $4755 = $4757;};var $4753 = $4755;};return $4753;};
 const Kind$Term$equal = x0=>x1=>x2=>x3=>x4=>Kind$Term$equal$(x0,x1,x2,x3,x4); const BitsSet$new = BitsMap$new;
function BitsSet$mut$new$(_a$1){var $4899 = BitsSet$new;return $4899;};
 const BitsSet$mut$new = x0=>BitsSet$mut$new$(x0);function Kind$Term$check$(_term$1,_type$2,_defs$3,_ctx$4,_path$5,_orig$6){var self = _term$1;switch(self._){case 'Kind.Term.var':var $4901=self.name;var $4902=self.indx;var self = List$at_last$($4902,_ctx$4);switch(self._){case 'Maybe.some':var $4904=self.value;var $4905 = Kind$Check$result$(Maybe$some$((()=>{var self = $4904;switch(self._){case 'Pair.new':var $4906=self.snd;var $4907 = $4906;return $4907;};})()),List$nil);var $4903 = $4905;break;case 'Maybe.none':var $4908 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$undefined_reference$(_orig$6,$4901),List$nil));var $4903 = $4908;break;};var self = $4903;break;case 'Kind.Term.ref':var $4909=self.name;var self = Kind$Map$get$($4909,_defs$3);switch(self._){case 'Maybe.some':var $4911=self.value;var self = $4911;switch(self._){case 'Kind.Def.new':var $4913=self.name;var $4914=self.term;var $4915=self.type;var $4916=self.stat;var _ref_name$18 = $4913;var _ref_type$19 = $4915;var _ref_term$20 = $4914;var _ref_stat$21 = $4916;var self = _ref_stat$21;switch(self._){case 'Kind.Status.init':var $4918 = Kind$Check$result$(Maybe$some$(_ref_type$19),List$cons$(Kind$Error$waiting$(_ref_name$18),List$nil));var $4917 = $4918;break;case 'Kind.Status.wait':case 'Kind.Status.done':var $4919 = Kind$Check$result$(Maybe$some$(_ref_type$19),List$nil);var $4917 = $4919;break;case 'Kind.Status.fail':var $4920 = Kind$Check$result$(Maybe$some$(_ref_type$19),List$cons$(Kind$Error$indirect$(_ref_name$18),List$nil));var $4917 = $4920;break;};var $4912 = $4917;break;};var $4910 = $4912;break;case 'Maybe.none':var $4921 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$undefined_reference$(_orig$6,$4909),List$nil));var $4910 = $4921;break;};var self = $4910;break;case 'Kind.Term.all':var $4922=self.self;var $4923=self.name;var $4924=self.xtyp;var $4925=self.body;var _ctx_size$12 = (list_length(_ctx$4));var _self_var$13 = Kind$Term$var$($4922,_ctx_size$12);var _body_var$14 = Kind$Term$var$($4923,Nat$succ$(_ctx_size$12));var _body_ctx$15 = List$cons$(Pair$new$($4923,$4924),List$cons$(Pair$new$($4922,_term$1),_ctx$4));var self = Kind$Term$check$($4924,Maybe$some$(Kind$Term$typ),_defs$3,_ctx$4,Kind$MPath$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $4927=self.value;var $4928=self.errors;var self = $4927;switch(self._){case 'Maybe.none':var $4930 = Kind$Check$result$(Maybe$none,$4928);var $4929 = $4930;break;case 'Maybe.some':var self = Kind$Term$check$($4925(_self_var$13)(_body_var$14),Maybe$some$(Kind$Term$typ),_defs$3,_body_ctx$15,Kind$MPath$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $4932=self.value;var $4933=self.errors;var self = $4932;switch(self._){case 'Maybe.none':var $4935 = Kind$Check$result$(Maybe$none,$4933);var $4934 = $4935;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ),List$nil);switch(self._){case 'Kind.Check.result':var $4937=self.value;var $4938=self.errors;var $4939 = Kind$Check$result$($4937,List$concat$($4933,$4938));var $4936 = $4939;break;};var $4934 = $4936;break;};var self = $4934;break;};switch(self._){case 'Kind.Check.result':var $4940=self.value;var $4941=self.errors;var $4942 = Kind$Check$result$($4940,List$concat$($4928,$4941));var $4931 = $4942;break;};var $4929 = $4931;break;};var $4926 = $4929;break;};var self = $4926;break;case 'Kind.Term.lam':var $4943=self.name;var $4944=self.body;var self = _type$2;switch(self._){case 'Maybe.some':var $4946=self.value;var _typv$10 = Kind$Term$reduce$($4946,_defs$3);var self = _typv$10;switch(self._){case 'Kind.Term.all':var $4948=self.xtyp;var $4949=self.body;var _ctx_size$16 = (list_length(_ctx$4));var _self_var$17 = _term$1;var _body_var$18 = Kind$Term$var$($4943,_ctx_size$16);var _body_typ$19 = $4949(_self_var$17)(_body_var$18);var _body_ctx$20 = List$cons$(Pair$new$($4943,$4948),_ctx$4);var self = Kind$Term$check$($4944(_body_var$18),Maybe$some$(_body_typ$19),_defs$3,_body_ctx$20,Kind$MPath$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $4951=self.value;var $4952=self.errors;var self = $4951;switch(self._){case 'Maybe.none':var $4954 = Kind$Check$result$(Maybe$none,$4952);var $4953 = $4954;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$($4946),List$nil);switch(self._){case 'Kind.Check.result':var $4956=self.value;var $4957=self.errors;var $4958 = Kind$Check$result$($4956,List$concat$($4952,$4957));var $4955 = $4958;break;};var $4953 = $4955;break;};var $4950 = $4953;break;};var $4947 = $4950;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.ori':var _expected$13 = Either$left$("(function type)");var _detected$14 = Either$right$($4946);var $4959 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$13,_detected$14,_ctx$4),List$nil));var $4947 = $4959;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var _expected$12 = Either$left$("(function type)");var _detected$13 = Either$right$($4946);var $4960 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$12,_detected$13,_ctx$4),List$nil));var $4947 = $4960;break;case 'Kind.Term.typ':var _expected$11 = Either$left$("(function type)");var _detected$12 = Either$right$($4946);var $4961 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$11,_detected$12,_ctx$4),List$nil));var $4947 = $4961;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var _expected$14 = Either$left$("(function type)");var _detected$15 = Either$right$($4946);var $4962 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$14,_detected$15,_ctx$4),List$nil));var $4947 = $4962;break;case 'Kind.Term.cse':var _expected$17 = Either$left$("(function type)");var _detected$18 = Either$right$($4946);var $4963 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$17,_detected$18,_ctx$4),List$nil));var $4947 = $4963;break;};var $4945 = $4947;break;case 'Maybe.none':var _lam_type$9 = Kind$Term$hol$(Bits$e);var _lam_term$10 = Kind$Term$ann$(Bool$false,_term$1,_lam_type$9);var $4964 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5),_lam_term$10),List$nil));var $4945 = $4964;break;};var self = $4945;break;case 'Kind.Term.app':var $4965=self.func;var $4966=self.argm;var self = Kind$Term$check$($4965,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $4968=self.value;var $4969=self.errors;var self = $4968;switch(self._){case 'Maybe.some':var $4971=self.value;var _func_typ$12 = Kind$Term$reduce$($4971,_defs$3);var self = _func_typ$12;switch(self._){case 'Kind.Term.all':var $4973=self.xtyp;var $4974=self.body;var self = Kind$Term$check$($4966,Maybe$some$($4973),_defs$3,_ctx$4,Kind$MPath$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $4976=self.value;var $4977=self.errors;var self = $4976;switch(self._){case 'Maybe.none':var $4979 = Kind$Check$result$(Maybe$none,$4977);var $4978 = $4979;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$($4974($4965)($4966)),List$nil);switch(self._){case 'Kind.Check.result':var $4981=self.value;var $4982=self.errors;var $4983 = Kind$Check$result$($4981,List$concat$($4977,$4982));var $4980 = $4983;break;};var $4978 = $4980;break;};var $4975 = $4978;break;};var self = $4975;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.ori':var _expected$15 = Either$left$("(function type)");var _detected$16 = Either$right$(_func_typ$12);var $4984 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$15,_detected$16,_ctx$4),List$nil));var self = $4984;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var _expected$14 = Either$left$("(function type)");var _detected$15 = Either$right$(_func_typ$12);var $4985 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$14,_detected$15,_ctx$4),List$nil));var self = $4985;break;case 'Kind.Term.typ':var _expected$13 = Either$left$("(function type)");var _detected$14 = Either$right$(_func_typ$12);var $4986 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$13,_detected$14,_ctx$4),List$nil));var self = $4986;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var _expected$16 = Either$left$("(function type)");var _detected$17 = Either$right$(_func_typ$12);var $4987 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$16,_detected$17,_ctx$4),List$nil));var self = $4987;break;case 'Kind.Term.cse':var _expected$19 = Either$left$("(function type)");var _detected$20 = Either$right$(_func_typ$12);var $4988 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$19,_detected$20,_ctx$4),List$nil));var self = $4988;break;};switch(self._){case 'Kind.Check.result':var $4989=self.value;var $4990=self.errors;var $4991 = Kind$Check$result$($4989,List$concat$($4969,$4990));var $4972 = $4991;break;};var $4970 = $4972;break;case 'Maybe.none':var $4992 = Kind$Check$result$(Maybe$none,$4969);var $4970 = $4992;break;};var $4967 = $4970;break;};var self = $4967;break;case 'Kind.Term.let':var $4993=self.name;var $4994=self.expr;var $4995=self.body;var _ctx_size$10 = (list_length(_ctx$4));var self = Kind$Term$check$($4994,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $4997=self.value;var $4998=self.errors;var self = $4997;switch(self._){case 'Maybe.some':var $5000=self.value;var _body_val$14 = $4995(Kind$Term$var$($4993,_ctx_size$10));var _body_ctx$15 = List$cons$(Pair$new$($4993,$5000),_ctx$4);var self = Kind$Term$check$(_body_val$14,_type$2,_defs$3,_body_ctx$15,Kind$MPath$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $5002=self.value;var $5003=self.errors;var self = $5002;switch(self._){case 'Maybe.some':var $5005=self.value;var self = Kind$Check$result$(Maybe$some$($5005),List$nil);switch(self._){case 'Kind.Check.result':var $5007=self.value;var $5008=self.errors;var $5009 = Kind$Check$result$($5007,List$concat$($5003,$5008));var $5006 = $5009;break;};var $5004 = $5006;break;case 'Maybe.none':var $5010 = Kind$Check$result$(Maybe$none,$5003);var $5004 = $5010;break;};var self = $5004;break;};switch(self._){case 'Kind.Check.result':var $5011=self.value;var $5012=self.errors;var $5013 = Kind$Check$result$($5011,List$concat$($4998,$5012));var $5001 = $5013;break;};var $4999 = $5001;break;case 'Maybe.none':var $5014 = Kind$Check$result$(Maybe$none,$4998);var $4999 = $5014;break;};var $4996 = $4999;break;};var self = $4996;break;case 'Kind.Term.def':var $5015=self.name;var $5016=self.expr;var $5017=self.body;var _ctx_size$10 = (list_length(_ctx$4));var self = Kind$Term$check$($5016,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $5019=self.value;var $5020=self.errors;var self = $5019;switch(self._){case 'Maybe.some':var $5022=self.value;var _body_val$14 = $5017(Kind$Term$ann$(Bool$true,$5016,$5022));var _body_ctx$15 = List$cons$(Pair$new$($5015,$5022),_ctx$4);var self = Kind$Term$check$(_body_val$14,_type$2,_defs$3,_body_ctx$15,Kind$MPath$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $5024=self.value;var $5025=self.errors;var self = $5024;switch(self._){case 'Maybe.some':var $5027=self.value;var self = Kind$Check$result$(Maybe$some$($5027),List$nil);switch(self._){case 'Kind.Check.result':var $5029=self.value;var $5030=self.errors;var $5031 = Kind$Check$result$($5029,List$concat$($5025,$5030));var $5028 = $5031;break;};var $5026 = $5028;break;case 'Maybe.none':var $5032 = Kind$Check$result$(Maybe$none,$5025);var $5026 = $5032;break;};var self = $5026;break;};switch(self._){case 'Kind.Check.result':var $5033=self.value;var $5034=self.errors;var $5035 = Kind$Check$result$($5033,List$concat$($5020,$5034));var $5023 = $5035;break;};var $5021 = $5023;break;case 'Maybe.none':var $5036 = Kind$Check$result$(Maybe$none,$5020);var $5021 = $5036;break;};var $5018 = $5021;break;};var self = $5018;break;case 'Kind.Term.ann':var $5037=self.done;var $5038=self.term;var $5039=self.type;var self = $5037;if (self) {var $5041 = Kind$Check$result$(Maybe$some$($5039),List$nil);var $5040 = $5041;} else {var self = Kind$Term$check$($5038,Maybe$some$($5039),_defs$3,_ctx$4,Kind$MPath$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $5043=self.value;var $5044=self.errors;var self = $5043;switch(self._){case 'Maybe.none':var $5046 = Kind$Check$result$(Maybe$none,$5044);var $5045 = $5046;break;case 'Maybe.some':var self = Kind$Term$check$($5039,Maybe$some$(Kind$Term$typ),_defs$3,_ctx$4,Kind$MPath$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $5048=self.value;var $5049=self.errors;var self = $5048;switch(self._){case 'Maybe.none':var $5051 = Kind$Check$result$(Maybe$none,$5049);var $5050 = $5051;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$($5039),List$nil);switch(self._){case 'Kind.Check.result':var $5053=self.value;var $5054=self.errors;var $5055 = Kind$Check$result$($5053,List$concat$($5049,$5054));var $5052 = $5055;break;};var $5050 = $5052;break;};var self = $5050;break;};switch(self._){case 'Kind.Check.result':var $5056=self.value;var $5057=self.errors;var $5058 = Kind$Check$result$($5056,List$concat$($5044,$5057));var $5047 = $5058;break;};var $5045 = $5047;break;};var $5042 = $5045;break;};var $5040 = $5042;};var self = $5040;break;case 'Kind.Term.gol':var $5059=self.name;var $5060=self.dref;var $5061=self.verb;var $5062 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$show_goal$(_orig$6,$5059,$5060,$5061,_type$2,_ctx$4),List$nil));var self = $5062;break;case 'Kind.Term.cse':var $5063=self.path;var $5064=self.expr;var $5065=self.name;var $5066=self.with;var $5067=self.cses;var $5068=self.moti;var _expr$13 = $5064;var self = Kind$Term$check$(_expr$13,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $5070=self.value;var $5071=self.errors;var self = $5070;switch(self._){case 'Maybe.some':var $5073=self.value;var self = $5068;switch(self._){case 'Maybe.some':var $5075=self.value;var $5076 = Kind$Term$desugar_cse$($5064,$5065,$5066,$5067,$5075,$5073,_defs$3,_ctx$4);var _dsug$17 = $5076;break;case 'Maybe.none':var self = _type$2;switch(self._){case 'Maybe.some':var $5078=self.value;var _size$18 = (list_length(_ctx$4));var _typv$19 = Kind$Term$normalize$($5078,Kind$Map$new);var _moti$20 = Kind$SmartMotive$make$($5065,$5064,$5073,_typv$19,_size$18,_defs$3);var $5079 = _moti$20;var _moti$17 = $5079;break;case 'Maybe.none':var $5080 = Kind$Term$hol$(Bits$e);var _moti$17 = $5080;break;};var $5077 = Maybe$some$(Kind$Term$cse$($5063,$5064,$5065,$5066,$5067,Maybe$some$(_moti$17)));var _dsug$17 = $5077;break;};var self = _dsug$17;switch(self._){case 'Maybe.some':var $5081=self.value;var $5082 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5),$5081),List$nil));var self = $5082;break;case 'Maybe.none':var $5083 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$cant_infer$(_orig$6,_term$1,_ctx$4),List$nil));var self = $5083;break;};switch(self._){case 'Kind.Check.result':var $5084=self.value;var $5085=self.errors;var $5086 = Kind$Check$result$($5084,List$concat$($5071,$5085));var $5074 = $5086;break;};var $5072 = $5074;break;case 'Maybe.none':var $5087 = Kind$Check$result$(Maybe$none,$5071);var $5072 = $5087;break;};var $5069 = $5072;break;};var self = $5069;break;case 'Kind.Term.ori':var $5088=self.orig;var $5089=self.expr;var $5090 = Kind$Term$check$($5089,_type$2,_defs$3,_ctx$4,_path$5,Maybe$some$($5088));var self = $5090;break;case 'Kind.Term.typ':var $5091 = Kind$Check$result$(Maybe$some$(Kind$Term$typ),List$nil);var self = $5091;break;case 'Kind.Term.hol':var $5092 = Kind$Check$result$(_type$2,List$nil);var self = $5092;break;case 'Kind.Term.nat':var $5093 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")),List$nil);var self = $5093;break;case 'Kind.Term.chr':var $5094 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")),List$nil);var self = $5094;break;case 'Kind.Term.str':var $5095 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")),List$nil);var self = $5095;break;};switch(self._){case 'Kind.Check.result':var $5096=self.value;var $5097=self.errors;var self = $5096;switch(self._){case 'Maybe.some':var $5099=self.value;var self = _type$2;switch(self._){case 'Maybe.some':var $5101=self.value;var self = Kind$Term$equal$($5101,$5099,_defs$3,(list_length(_ctx$4)),BitsSet$mut$new$(Unit$new));switch(self._){case 'Kind.Check.result':var $5103=self.value;var $5104=self.errors;var self = $5103;switch(self._){case 'Maybe.some':var $5106=self.value;var self = $5106;if (self) {var $5108 = Kind$Check$result$(Maybe$some$($5101),List$nil);var self = $5108;} else {var $5109 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,Either$right$($5101),Either$right$($5099),_ctx$4),List$nil));var self = $5109;};switch(self._){case 'Kind.Check.result':var $5110=self.value;var $5111=self.errors;var $5112 = Kind$Check$result$($5110,List$concat$($5104,$5111));var $5107 = $5112;break;};var $5105 = $5107;break;case 'Maybe.none':var $5113 = Kind$Check$result$(Maybe$none,$5104);var $5105 = $5113;break;};var $5102 = $5105;break;};var self = $5102;break;case 'Maybe.none':var $5114 = Kind$Check$result$(Maybe$some$($5099),List$nil);var self = $5114;break;};switch(self._){case 'Kind.Check.result':var $5115=self.value;var $5116=self.errors;var $5117 = Kind$Check$result$($5115,List$concat$($5097,$5116));var $5100 = $5117;break;};var $5098 = $5100;break;case 'Maybe.none':var $5118 = Kind$Check$result$(Maybe$none,$5097);var $5098 = $5118;break;};var $4900 = $5098;break;};return $4900;};
 const Kind$Term$check = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Term$check$(x0,x1,x2,x3,x4,x5);function Kind$Path$nil$(_x$1){var $5119 = _x$1;return $5119;};
 const Kind$Path$nil = x0=>Kind$Path$nil$(x0); const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);
function List$is_empty$(_list$2){var self = _list$2;switch(self._){case 'List.nil':var $5121 = Bool$true;var $5120 = $5121;break;case 'List.cons':var $5122 = Bool$false;var $5120 = $5122;break;};return $5120;};
 const List$is_empty = x0=>List$is_empty$(x0);function Kind$Term$patch_at$(_path$1,_term$2,_fn$3){var self = _term$2;switch(self._){case 'Kind.Term.all':var $5124=self.eras;var $5125=self.self;var $5126=self.name;var $5127=self.xtyp;var $5128=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5130=self.slice(0,-1);var $5131 = Kind$Term$all$($5124,$5125,$5126,Kind$Term$patch_at$($5130,$5127,_fn$3),$5128);var $5129 = $5131;break;case 'i':var $5132=self.slice(0,-1);var $5133 = Kind$Term$all$($5124,$5125,$5126,$5127,(_s$10=>_x$11=>{var $5134 = Kind$Term$patch_at$($5132,$5128(_s$10)(_x$11),_fn$3);return $5134;}));var $5129 = $5133;break;case 'e':var $5135 = _fn$3(_term$2);var $5129 = $5135;break;};var $5123 = $5129;break;case 'Kind.Term.lam':var $5136=self.name;var $5137=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $5139 = _fn$3(_term$2);var $5138 = $5139;break;case 'o':case 'i':var $5140 = Kind$Term$lam$($5136,(_x$7=>{var $5141 = Kind$Term$patch_at$(Bits$tail$(_path$1),$5137(_x$7),_fn$3);return $5141;}));var $5138 = $5140;break;};var $5123 = $5138;break;case 'Kind.Term.app':var $5142=self.func;var $5143=self.argm;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5145=self.slice(0,-1);var $5146 = Kind$Term$app$(Kind$Term$patch_at$($5145,$5142,_fn$3),$5143);var $5144 = $5146;break;case 'i':var $5147=self.slice(0,-1);var $5148 = Kind$Term$app$($5142,Kind$Term$patch_at$($5147,$5143,_fn$3));var $5144 = $5148;break;case 'e':var $5149 = _fn$3(_term$2);var $5144 = $5149;break;};var $5123 = $5144;break;case 'Kind.Term.let':var $5150=self.name;var $5151=self.expr;var $5152=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5154=self.slice(0,-1);var $5155 = Kind$Term$let$($5150,Kind$Term$patch_at$($5154,$5151,_fn$3),$5152);var $5153 = $5155;break;case 'i':var $5156=self.slice(0,-1);var $5157 = Kind$Term$let$($5150,$5151,(_x$8=>{var $5158 = Kind$Term$patch_at$($5156,$5152(_x$8),_fn$3);return $5158;}));var $5153 = $5157;break;case 'e':var $5159 = _fn$3(_term$2);var $5153 = $5159;break;};var $5123 = $5153;break;case 'Kind.Term.def':var $5160=self.name;var $5161=self.expr;var $5162=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5164=self.slice(0,-1);var $5165 = Kind$Term$def$($5160,Kind$Term$patch_at$($5164,$5161,_fn$3),$5162);var $5163 = $5165;break;case 'i':var $5166=self.slice(0,-1);var $5167 = Kind$Term$def$($5160,$5161,(_x$8=>{var $5168 = Kind$Term$patch_at$($5166,$5162(_x$8),_fn$3);return $5168;}));var $5163 = $5167;break;case 'e':var $5169 = _fn$3(_term$2);var $5163 = $5169;break;};var $5123 = $5163;break;case 'Kind.Term.ann':var $5170=self.done;var $5171=self.term;var $5172=self.type;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5174=self.slice(0,-1);var $5175 = Kind$Term$ann$($5170,Kind$Term$patch_at$($5174,$5171,_fn$3),$5172);var $5173 = $5175;break;case 'i':var $5176=self.slice(0,-1);var $5177 = Kind$Term$ann$($5170,$5171,Kind$Term$patch_at$($5176,$5172,_fn$3));var $5173 = $5177;break;case 'e':var $5178 = _fn$3(_term$2);var $5173 = $5178;break;};var $5123 = $5173;break;case 'Kind.Term.ori':var $5179=self.orig;var $5180=self.expr;var $5181 = Kind$Term$ori$($5179,Kind$Term$patch_at$(_path$1,$5180,_fn$3));var $5123 = $5181;break;case 'Kind.Term.var':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $5183 = _fn$3(_term$2);var $5182 = $5183;break;case 'o':case 'i':var $5184 = _term$2;var $5182 = $5184;break;};var $5123 = $5182;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $5186 = _fn$3(_term$2);var $5185 = $5186;break;case 'o':case 'i':var $5187 = _term$2;var $5185 = $5187;break;};var $5123 = $5185;break;case 'Kind.Term.typ':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $5189 = _fn$3(_term$2);var $5188 = $5189;break;case 'o':case 'i':var $5190 = _term$2;var $5188 = $5190;break;};var $5123 = $5188;break;case 'Kind.Term.gol':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $5192 = _fn$3(_term$2);var $5191 = $5192;break;case 'o':case 'i':var $5193 = _term$2;var $5191 = $5193;break;};var $5123 = $5191;break;case 'Kind.Term.cse':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $5195 = _fn$3(_term$2);var $5194 = $5195;break;case 'o':case 'i':var $5196 = _term$2;var $5194 = $5196;break;};var $5123 = $5194;break;};return $5123;};
 const Kind$Term$patch_at = x0=>x1=>x2=>Kind$Term$patch_at$(x0,x1,x2);function Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,_errs$10,_fixd$11){var self = _errs$10;switch(self._){case 'List.cons':var $5198=self.head;var $5199=self.tail;var self = $5198;switch(self._){case 'Kind.Error.waiting':var $5201=self.name;var $5202 = IO$monad$((_m$bind$15=>_m$pure$16=>{var $5203 = _m$bind$15;return $5203;}))(Kind$Synth$one$($5201,_defs$9))((_new_defs$15=>{var self = _new_defs$15;switch(self._){case 'Maybe.some':var $5205=self.value;var $5206 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,$5205,$5199,Bool$true);var $5204 = $5206;break;case 'Maybe.none':var $5207 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,$5199,_fixd$11);var $5204 = $5207;break;};return $5204;}));var $5200 = $5202;break;case 'Kind.Error.patch':var $5208=self.path;var $5209=self.term;var self = $5208;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5211=self.slice(0,-1);var _term$17 = Kind$Term$patch_at$($5211,_term$5,(_x$17=>{var $5213 = $5209;return $5213;}));var $5212 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$17,_type$6,_isct$7,_arit$8,_defs$9,$5199,Bool$true);var $5210 = $5212;break;case 'i':var $5214=self.slice(0,-1);var _type$17 = Kind$Term$patch_at$($5214,_type$6,(_x$17=>{var $5216 = $5209;return $5216;}));var $5215 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$17,_isct$7,_arit$8,_defs$9,$5199,Bool$true);var $5210 = $5215;break;case 'e':var $5217 = IO$monad$((_m$bind$16=>_m$pure$17=>{var $5218 = _m$pure$17;return $5218;}))(Maybe$none);var $5210 = $5217;break;};var $5200 = $5210;break;case 'Kind.Error.undefined_reference':var $5219=self.name;var $5220 = IO$monad$((_m$bind$16=>_m$pure$17=>{var $5221 = _m$bind$16;return $5221;}))(Kind$Synth$one$($5219,_defs$9))((_new_defs$16=>{var self = _new_defs$16;switch(self._){case 'Maybe.some':var $5223=self.value;var $5224 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,$5223,$5199,Bool$true);var $5222 = $5224;break;case 'Maybe.none':var $5225 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,$5199,_fixd$11);var $5222 = $5225;break;};return $5222;}));var $5200 = $5220;break;case 'Kind.Error.type_mismatch':case 'Kind.Error.show_goal':case 'Kind.Error.indirect':case 'Kind.Error.cant_infer':var $5226 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,$5199,_fixd$11);var $5200 = $5226;break;};var $5197 = $5200;break;case 'List.nil':var self = _fixd$11;if (self) {var _type$12 = Kind$Term$bind$(List$nil,(_x$12=>{var $5229 = (_x$12+'1');return $5229;}),_type$6);var _term$13 = Kind$Term$bind$(List$nil,(_x$13=>{var $5230 = (_x$13+'0');return $5230;}),_term$5);var _defs$14 = Kind$Map$set$(_name$4,Kind$Def$new$(_file$1,_code$2,_orig$3,_name$4,_term$13,_type$12,_isct$7,_arit$8,Kind$Status$init),_defs$9);var $5228 = IO$monad$((_m$bind$15=>_m$pure$16=>{var $5231 = _m$pure$16;return $5231;}))(Maybe$some$(_defs$14));var $5227 = $5228;} else {var $5232 = IO$monad$((_m$bind$12=>_m$pure$13=>{var $5233 = _m$pure$13;return $5233;}))(Maybe$none);var $5227 = $5232;};var $5197 = $5227;break;};return $5197;};
 const Kind$Synth$fix = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>x9=>x10=>Kind$Synth$fix$(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10);function Kind$Status$fail$(_errors$1){var $5234 = ({_:'Kind.Status.fail','errors':_errors$1});return $5234;};
 const Kind$Status$fail = x0=>Kind$Status$fail$(x0);function Kind$Synth$one$(_name$1,_defs$2){var self = Kind$Map$get$(_name$1,_defs$2);switch(self._){case 'Maybe.some':var $5236=self.value;var self = $5236;switch(self._){case 'Kind.Def.new':var $5238=self.file;var $5239=self.code;var $5240=self.orig;var $5241=self.name;var $5242=self.term;var $5243=self.type;var $5244=self.isct;var $5245=self.arit;var $5246=self.stat;var _file$13 = $5238;var _code$14 = $5239;var _orig$15 = $5240;var _name$16 = $5241;var _term$17 = $5242;var _type$18 = $5243;var _isct$19 = $5244;var _arit$20 = $5245;var _stat$21 = $5246;var self = _stat$21;switch(self._){case 'Kind.Status.init':var _defs$22 = Kind$Map$set$(_name$16,Kind$Def$new$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,Kind$Status$wait),_defs$2);var self = Kind$Term$check$(_type$18,Maybe$some$(Kind$Term$typ),_defs$22,List$nil,Kind$MPath$i$(Kind$MPath$nil),Maybe$none);switch(self._){case 'Kind.Check.result':var $5249=self.value;var $5250=self.errors;var self = $5249;switch(self._){case 'Maybe.none':var $5252 = Kind$Check$result$(Maybe$none,$5250);var $5251 = $5252;break;case 'Maybe.some':var self = Kind$Term$check$(_term$17,Maybe$some$(_type$18),_defs$22,List$nil,Kind$MPath$o$(Kind$MPath$nil),Maybe$none);switch(self._){case 'Kind.Check.result':var $5254=self.value;var $5255=self.errors;var self = $5254;switch(self._){case 'Maybe.none':var $5257 = Kind$Check$result$(Maybe$none,$5255);var $5256 = $5257;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $5259=self.value;var $5260=self.errors;var $5261 = Kind$Check$result$($5259,List$concat$($5255,$5260));var $5258 = $5261;break;};var $5256 = $5258;break;};var self = $5256;break;};switch(self._){case 'Kind.Check.result':var $5262=self.value;var $5263=self.errors;var $5264 = Kind$Check$result$($5262,List$concat$($5250,$5263));var $5253 = $5264;break;};var $5251 = $5253;break;};var _checked$23 = $5251;break;};var self = _checked$23;switch(self._){case 'Kind.Check.result':var $5265=self.errors;var self = List$is_empty$($5265);if (self) {var _defs$26 = Kind$define$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,Bool$true,_defs$22);var $5267 = IO$monad$((_m$bind$27=>_m$pure$28=>{var $5268 = _m$pure$28;return $5268;}))(Maybe$some$(_defs$26));var $5266 = $5267;} else {var $5269 = IO$monad$((_m$bind$26=>_m$pure$27=>{var $5270 = _m$bind$26;return $5270;}))(Kind$Synth$fix$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,_defs$22,$5265,Bool$false))((_fixed$26=>{var self = _fixed$26;switch(self._){case 'Maybe.some':var $5272=self.value;var $5273 = Kind$Synth$one$(_name$16,$5272);var $5271 = $5273;break;case 'Maybe.none':var _stat$27 = Kind$Status$fail$($5265);var _defs$28 = Kind$Map$set$(_name$16,Kind$Def$new$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,_stat$27),_defs$22);var $5274 = IO$monad$((_m$bind$29=>_m$pure$30=>{var $5275 = _m$pure$30;return $5275;}))(Maybe$some$(_defs$28));var $5271 = $5274;break;};return $5271;}));var $5266 = $5269;};var $5248 = $5266;break;};var $5247 = $5248;break;case 'Kind.Status.wait':case 'Kind.Status.done':var $5276 = IO$monad$((_m$bind$22=>_m$pure$23=>{var $5277 = _m$pure$23;return $5277;}))(Maybe$some$(_defs$2));var $5247 = $5276;break;case 'Kind.Status.fail':var $5278 = IO$monad$((_m$bind$23=>_m$pure$24=>{var $5279 = _m$pure$24;return $5279;}))(Maybe$some$(_defs$2));var $5247 = $5278;break;};var $5237 = $5247;break;};var $5235 = $5237;break;case 'Maybe.none':var $5280 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $5281 = _m$bind$3;return $5281;}))(Kind$Synth$load$(_name$1,_defs$2))((_loaded$3=>{var self = _loaded$3;switch(self._){case 'Maybe.some':var $5283=self.value;var $5284 = Kind$Synth$one$(_name$1,$5283);var $5282 = $5284;break;case 'Maybe.none':var $5285 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $5286 = _m$pure$5;return $5286;}))(Maybe$none);var $5282 = $5285;break;};return $5282;}));var $5235 = $5280;break;};return $5235;};
 const Kind$Synth$one = x0=>x1=>Kind$Synth$one$(x0,x1);function BitsMap$map$(_fn$3,_map$4){var self = _map$4;switch(self._){case 'BitsMap.tie':var $5288=self.val;var $5289=self.lft;var $5290=self.rgt;var self = $5288;switch(self._){case 'Maybe.some':var $5292=self.value;var $5293 = Maybe$some$(_fn$3($5292));var _val$8 = $5293;break;case 'Maybe.none':var $5294 = Maybe$none;var _val$8 = $5294;break;};var _lft$9 = BitsMap$map$(_fn$3,$5289);var _rgt$10 = BitsMap$map$(_fn$3,$5290);var $5291 = BitsMap$tie$(_val$8,_lft$9,_rgt$10);var $5287 = $5291;break;case 'BitsMap.new':var $5295 = BitsMap$new;var $5287 = $5295;break;};return $5287;};
 const BitsMap$map = x0=>x1=>BitsMap$map$(x0,x1); const Kind$Term$inline$names = (()=>{var _inl$1 = List$cons$("Monad.pure",List$cons$("Monad.bind",List$cons$("Monad.new",List$cons$("Parser.monad",List$cons$("Parser.bind",List$cons$("Parser.pure",List$cons$("Kind.Check.pure",List$cons$("Kind.Check.bind",List$cons$("Kind.Check.monad",List$cons$("Kind.Check.value",List$cons$("Kind.Check.none",List$nil)))))))))));var _kvs$2 = List$mapped$(_inl$1,(_x$2=>{var $5297 = Pair$new$((kind_name_to_bits(_x$2)),Unit$new);return $5297;}));var $5296 = BitsMap$from_list$(_kvs$2);return $5296;})();
function Kind$Term$inline$reduce$(_term$1,_defs$2){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $5299=self.name;var _inli$4 = BitsSet$has$((kind_name_to_bits($5299)),Kind$Term$inline$names);var self = _inli$4;if (self) {var self = Kind$Map$get$($5299,_defs$2);switch(self._){case 'Maybe.some':var $5302=self.value;var self = $5302;switch(self._){case 'Kind.Def.new':var $5304=self.term;var $5305 = Kind$Term$inline$reduce$($5304,_defs$2);var $5303 = $5305;break;};var $5301 = $5303;break;case 'Maybe.none':var $5306 = Kind$Term$ref$($5299);var $5301 = $5306;break;};var $5300 = $5301;} else {var $5307 = _term$1;var $5300 = $5307;};var $5298 = $5300;break;case 'Kind.Term.app':var $5308=self.func;var $5309=self.argm;var _func$5 = Kind$Term$inline$reduce$($5308,_defs$2);var self = _func$5;switch(self._){case 'Kind.Term.lam':var $5311=self.body;var $5312 = Kind$Term$inline$reduce$($5311($5309),_defs$2);var $5310 = $5312;break;case 'Kind.Term.let':var $5313=self.name;var $5314=self.expr;var $5315=self.body;var $5316 = Kind$Term$let$($5313,$5314,(_x$9=>{var $5317 = Kind$Term$inline$reduce$(Kind$Term$app$($5315(_x$9),$5309),_defs$2);return $5317;}));var $5310 = $5316;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.app':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $5318 = _term$1;var $5310 = $5318;break;};var $5298 = $5310;break;case 'Kind.Term.ori':var $5319=self.expr;var $5320 = Kind$Term$inline$reduce$($5319,_defs$2);var $5298 = $5320;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $5321 = _term$1;var $5298 = $5321;break;};return $5298;};
 const Kind$Term$inline$reduce = x0=>x1=>Kind$Term$inline$reduce$(x0,x1);function Kind$Term$inline$(_term$1,_defs$2){var self = Kind$Term$inline$reduce$(_term$1,_defs$2);switch(self._){case 'Kind.Term.var':var $5323=self.name;var $5324=self.indx;var $5325 = Kind$Term$var$($5323,$5324);var $5322 = $5325;break;case 'Kind.Term.ref':var $5326=self.name;var $5327 = Kind$Term$ref$($5326);var $5322 = $5327;break;case 'Kind.Term.all':var $5328=self.eras;var $5329=self.self;var $5330=self.name;var $5331=self.xtyp;var $5332=self.body;var $5333 = Kind$Term$all$($5328,$5329,$5330,Kind$Term$inline$($5331,_defs$2),(_s$8=>_x$9=>{var $5334 = Kind$Term$inline$($5332(_s$8)(_x$9),_defs$2);return $5334;}));var $5322 = $5333;break;case 'Kind.Term.lam':var $5335=self.name;var $5336=self.body;var $5337 = Kind$Term$lam$($5335,(_x$5=>{var $5338 = Kind$Term$inline$($5336(_x$5),_defs$2);return $5338;}));var $5322 = $5337;break;case 'Kind.Term.app':var $5339=self.func;var $5340=self.argm;var $5341 = Kind$Term$app$(Kind$Term$inline$($5339,_defs$2),Kind$Term$inline$($5340,_defs$2));var $5322 = $5341;break;case 'Kind.Term.let':var $5342=self.name;var $5343=self.expr;var $5344=self.body;var $5345 = Kind$Term$let$($5342,Kind$Term$inline$($5343,_defs$2),(_x$6=>{var $5346 = Kind$Term$inline$($5344(_x$6),_defs$2);return $5346;}));var $5322 = $5345;break;case 'Kind.Term.def':var $5347=self.name;var $5348=self.expr;var $5349=self.body;var $5350 = Kind$Term$def$($5347,Kind$Term$inline$($5348,_defs$2),(_x$6=>{var $5351 = Kind$Term$inline$($5349(_x$6),_defs$2);return $5351;}));var $5322 = $5350;break;case 'Kind.Term.ann':var $5352=self.done;var $5353=self.term;var $5354=self.type;var $5355 = Kind$Term$ann$($5352,Kind$Term$inline$($5353,_defs$2),Kind$Term$inline$($5354,_defs$2));var $5322 = $5355;break;case 'Kind.Term.gol':var $5356=self.name;var $5357=self.dref;var $5358=self.verb;var $5359 = Kind$Term$gol$($5356,$5357,$5358);var $5322 = $5359;break;case 'Kind.Term.hol':var $5360=self.path;var $5361 = Kind$Term$hol$($5360);var $5322 = $5361;break;case 'Kind.Term.nat':var $5362=self.natx;var $5363 = Kind$Term$nat$($5362);var $5322 = $5363;break;case 'Kind.Term.chr':var $5364=self.chrx;var $5365 = Kind$Term$chr$($5364);var $5322 = $5365;break;case 'Kind.Term.str':var $5366=self.strx;var $5367 = Kind$Term$str$($5366);var $5322 = $5367;break;case 'Kind.Term.ori':var $5368=self.expr;var $5369 = Kind$Term$inline$($5368,_defs$2);var $5322 = $5369;break;case 'Kind.Term.typ':var $5370 = Kind$Term$typ;var $5322 = $5370;break;case 'Kind.Term.cse':var $5371 = _term$1;var $5322 = $5371;break;};return $5322;};
 const Kind$Term$inline = x0=>x1=>Kind$Term$inline$(x0,x1);function BitsMap$values$go$(_xs$2,_list$3){var self = _xs$2;switch(self._){case 'BitsMap.tie':var $5373=self.val;var $5374=self.lft;var $5375=self.rgt;var self = $5373;switch(self._){case 'Maybe.some':var $5377=self.value;var $5378 = List$cons$($5377,_list$3);var _list0$7 = $5378;break;case 'Maybe.none':var $5379 = _list$3;var _list0$7 = $5379;break;};var _list1$8 = BitsMap$values$go$($5374,_list0$7);var _list2$9 = BitsMap$values$go$($5375,_list1$8);var $5376 = _list2$9;var $5372 = $5376;break;case 'BitsMap.new':var $5380 = _list$3;var $5372 = $5380;break;};return $5372;};
 const BitsMap$values$go = x0=>x1=>BitsMap$values$go$(x0,x1);function BitsMap$values$(_xs$2){var $5381 = BitsMap$values$go$(_xs$2,List$nil);return $5381;};
 const BitsMap$values = x0=>BitsMap$values$(x0);function Kind$Core$var_name$(_indx$1,_name$2,_brui$3,_vars$4){var Kind$Core$var_name$=(_indx$1,_name$2,_brui$3,_vars$4)=>({ctr:'TCO',arg:[_indx$1,_name$2,_brui$3,_vars$4]});var Kind$Core$var_name=_indx$1=>_name$2=>_brui$3=>_vars$4=>Kind$Core$var_name$(_indx$1,_name$2,_brui$3,_vars$4);var arg=[_indx$1,_name$2,_brui$3,_vars$4];while(true){let [_indx$1,_name$2,_brui$3,_vars$4]=arg;var R=(()=>{var self = _indx$1;if (self===0n) {var self = _brui$3;if (self===0n) {var $5383 = _name$2;var $5382 = $5383;} else {var $5384=(self-1n);var $5385 = (_name$2+("^"+Nat$show$(_brui$3)));var $5382 = $5385;};return $5382;} else {var $5386=(self-1n);var self = _vars$4;switch(self._){case 'List.cons':var $5388=self.head;var $5389=self.tail;var self = (_name$2===$5388);if (self) {var $5391 = Nat$succ$(_brui$3);var _brui$8 = $5391;} else {var $5392 = _brui$3;var _brui$8 = $5392;};var $5390 = Kind$Core$var_name$($5386,_name$2,_brui$8,$5389);var $5387 = $5390;break;case 'List.nil':var $5393 = "unbound";var $5387 = $5393;break;};return $5387;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$Core$var_name = x0=>x1=>x2=>x3=>Kind$Core$var_name$(x0,x1,x2,x3);function Kind$Name$show$(_name$1){var $5394 = _name$1;return $5394;};
 const Kind$Name$show = x0=>Kind$Name$show$(x0);function Bits$to_nat$(_b$1){var self = _b$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5396=self.slice(0,-1);var $5397 = (2n*Bits$to_nat$($5396));var $5395 = $5397;break;case 'i':var $5398=self.slice(0,-1);var $5399 = Nat$succ$((2n*Bits$to_nat$($5398)));var $5395 = $5399;break;case 'e':var $5400 = 0n;var $5395 = $5400;break;};return $5395;};
 const Bits$to_nat = x0=>Bits$to_nat$(x0);function U16$show_hex$(_a$1){var self = _a$1;switch('u16'){case 'u16':var $5402=u16_to_word(self);var $5403 = Nat$to_string_base$(16n,Bits$to_nat$(Word$to_bits$($5402)));var $5401 = $5403;break;};return $5401;};
 const U16$show_hex = x0=>U16$show_hex$(x0);function Kind$escape$char$(_chr$1){var self = (_chr$1===Kind$backslash);if (self) {var $5405 = String$cons$(Kind$backslash,String$cons$(_chr$1,String$nil));var $5404 = $5405;} else {var self = (_chr$1===34);if (self) {var $5407 = String$cons$(Kind$backslash,String$cons$(_chr$1,String$nil));var $5406 = $5407;} else {var self = (_chr$1===39);if (self) {var $5409 = String$cons$(Kind$backslash,String$cons$(_chr$1,String$nil));var $5408 = $5409;} else {var self = U16$btw$(32,_chr$1,126);if (self) {var $5411 = String$cons$(_chr$1,String$nil);var $5410 = $5411;} else {var $5412 = (String$cons$(Kind$backslash,String$nil)+("u{"+(U16$show_hex$(_chr$1)+"}")));var $5410 = $5412;};var $5408 = $5410;};var $5406 = $5408;};var $5404 = $5406;};return $5404;};
 const Kind$escape$char = x0=>Kind$escape$char$(x0);function Kind$escape$go$(_str$1,_result$2){var Kind$escape$go$=(_str$1,_result$2)=>({ctr:'TCO',arg:[_str$1,_result$2]});var Kind$escape$go=_str$1=>_result$2=>Kind$escape$go$(_str$1,_result$2);var arg=[_str$1,_result$2];while(true){let [_str$1,_result$2]=arg;var R=(()=>{var self = _str$1;if (self.length===0) {var $5413 = String$reverse$(_result$2);return $5413;} else {var $5414=self.charCodeAt(0);var $5415=self.slice(1);var $5416 = Kind$escape$go$($5415,(String$reverse$(Kind$escape$char$($5414))+_result$2));return $5416;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$escape$go = x0=>x1=>Kind$escape$go$(x0,x1);function Kind$escape$(_str$1){var $5417 = Kind$escape$go$(_str$1,"");return $5417;};
 const Kind$escape = x0=>Kind$escape$(x0);function Kind$Core$show$(_term$1,_indx$2,_vars$3){var self = _term$1;switch(self._){case 'Kind.Term.var':var $5419=self.name;var $5420=self.indx;var $5421 = Kind$Core$var_name$(Nat$pred$((_indx$2-$5420<=0n?0n:_indx$2-$5420)),$5419,0n,_vars$3);var $5418 = $5421;break;case 'Kind.Term.ref':var $5422=self.name;var $5423 = Kind$Name$show$($5422);var $5418 = $5423;break;case 'Kind.Term.all':var $5424=self.eras;var $5425=self.self;var $5426=self.name;var $5427=self.xtyp;var $5428=self.body;var _eras$9 = $5424;var self = _eras$9;if (self) {var $5430 = "%";var _init$10 = $5430;} else {var $5431 = "@";var _init$10 = $5431;};var _self$11 = Kind$Name$show$($5425);var _name$12 = Kind$Name$show$($5426);var _xtyp$13 = Kind$Core$show$($5427,_indx$2,_vars$3);var _body$14 = Kind$Core$show$($5428(Kind$Term$var$($5425,_indx$2))(Kind$Term$var$($5426,Nat$succ$(_indx$2))),Nat$succ$(Nat$succ$(_indx$2)),List$cons$($5426,List$cons$($5425,_vars$3)));var $5429 = String$flatten$(List$cons$(_init$10,List$cons$(_self$11,List$cons$("(",List$cons$(_name$12,List$cons$(":",List$cons$(_xtyp$13,List$cons$(") ",List$cons$(_body$14,List$nil)))))))));var $5418 = $5429;break;case 'Kind.Term.lam':var $5432=self.name;var $5433=self.body;var _name$6 = Kind$Name$show$($5432);var _body$7 = Kind$Core$show$($5433(Kind$Term$var$($5432,_indx$2)),Nat$succ$(_indx$2),List$cons$($5432,_vars$3));var $5434 = String$flatten$(List$cons$("#",List$cons$(_name$6,List$cons$(" ",List$cons$(_body$7,List$nil)))));var $5418 = $5434;break;case 'Kind.Term.app':var $5435=self.func;var $5436=self.argm;var _func$6 = Kind$Core$show$($5435,_indx$2,_vars$3);var _argm$7 = Kind$Core$show$($5436,_indx$2,_vars$3);var $5437 = String$flatten$(List$cons$("(",List$cons$(_func$6,List$cons$(" ",List$cons$(_argm$7,List$cons$(")",List$nil))))));var $5418 = $5437;break;case 'Kind.Term.let':var $5438=self.name;var $5439=self.expr;var $5440=self.body;var _name$7 = Kind$Name$show$($5438);var _expr$8 = Kind$Core$show$($5439,_indx$2,_vars$3);var _body$9 = Kind$Core$show$($5440(Kind$Term$var$($5438,_indx$2)),Nat$succ$(_indx$2),List$cons$($5438,_vars$3));var $5441 = String$flatten$(List$cons$("!",List$cons$(_name$7,List$cons$(" = ",List$cons$(_expr$8,List$cons$("; ",List$cons$(_body$9,List$nil)))))));var $5418 = $5441;break;case 'Kind.Term.def':var $5442=self.name;var $5443=self.expr;var $5444=self.body;var _name$7 = Kind$Name$show$($5442);var _expr$8 = Kind$Core$show$($5443,_indx$2,_vars$3);var _body$9 = Kind$Core$show$($5444(Kind$Term$var$($5442,_indx$2)),Nat$succ$(_indx$2),List$cons$($5442,_vars$3));var $5445 = String$flatten$(List$cons$("$",List$cons$(_name$7,List$cons$(" = ",List$cons$(_expr$8,List$cons$("; ",List$cons$(_body$9,List$nil)))))));var $5418 = $5445;break;case 'Kind.Term.ann':var $5446=self.term;var $5447=self.type;var _term$7 = Kind$Core$show$($5446,_indx$2,_vars$3);var _type$8 = Kind$Core$show$($5447,_indx$2,_vars$3);var $5448 = String$flatten$(List$cons$("{",List$cons$(_term$7,List$cons$(":",List$cons$(_type$8,List$cons$("}",List$nil))))));var $5418 = $5448;break;case 'Kind.Term.nat':var $5449=self.natx;var $5450 = String$flatten$(List$cons$("+",List$cons$(Nat$show$($5449),List$nil)));var $5418 = $5450;break;case 'Kind.Term.chr':var $5451=self.chrx;var $5452 = String$flatten$(List$cons$("\'",List$cons$(Kind$escape$char$($5451),List$cons$("\'",List$nil))));var $5418 = $5452;break;case 'Kind.Term.str':var $5453=self.strx;var $5454 = String$flatten$(List$cons$("\"",List$cons$(Kind$escape$($5453),List$cons$("\"",List$nil))));var $5418 = $5454;break;case 'Kind.Term.ori':var $5455=self.expr;var $5456 = Kind$Core$show$($5455,_indx$2,_vars$3);var $5418 = $5456;break;case 'Kind.Term.typ':var $5457 = "*";var $5418 = $5457;break;case 'Kind.Term.gol':var $5458 = "<GOL>";var $5418 = $5458;break;case 'Kind.Term.hol':var $5459 = "<HOL>";var $5418 = $5459;break;case 'Kind.Term.cse':var $5460 = "<CSE>";var $5418 = $5460;break;};return $5418;};
 const Kind$Core$show = x0=>x1=>x2=>Kind$Core$show$(x0,x1,x2);function Kind$Defs$core$(_defs$1){var _result$2 = "";var _result$3 = (()=>{var $5463 = _result$2;var $5464 = BitsMap$values$(_defs$1);let _result$4=$5463;let _defn$3;while ($5464._==='List.cons') {_defn$3=$5464.head;var self = _defn$3;switch(self._){case 'Kind.Def.new':var $5465=self.name;var $5466=self.term;var $5467=self.type;var $5468=self.stat;var self = $5468;switch(self._){case 'Kind.Status.init':case 'Kind.Status.wait':case 'Kind.Status.fail':var $5470 = _result$4;var $5469 = $5470;break;case 'Kind.Status.done':var _name$14 = $5465;var _term$15 = Kind$Core$show$($5466,0n,List$nil);var _type$16 = Kind$Core$show$($5467,0n,List$nil);var $5471 = String$flatten$(List$cons$(_result$4,List$cons$(_name$14,List$cons$(" : ",List$cons$(_type$16,List$cons$(" = ",List$cons$(_term$15,List$cons$(";\u{a}",List$nil))))))));var $5469 = $5471;break;};var $5463 = $5469;break;};_result$4=$5463;$5464=$5464.tail;}return _result$4;})();var $5461 = _result$3;return $5461;};
 const Kind$Defs$core = x0=>Kind$Defs$core$(x0);function Kind$to_core$io$one$(_name$1){var $5472 = IO$monad$((_m$bind$2=>_m$pure$3=>{var $5473 = _m$bind$2;return $5473;}))(Kind$Synth$one$(_name$1,Kind$Map$new))((_new_defs$2=>{var self = _new_defs$2;switch(self._){case 'Maybe.some':var $5475=self.value;var $5476 = $5475;var _defs$3 = $5476;break;case 'Maybe.none':var $5477 = Kind$Map$new;var _defs$3 = $5477;break;};var _defs$4 = BitsMap$map$((_defn$4=>{var self = _defn$4;switch(self._){case 'Kind.Def.new':var $5479=self.file;var $5480=self.code;var $5481=self.orig;var $5482=self.name;var $5483=self.term;var $5484=self.type;var $5485=self.isct;var $5486=self.arit;var $5487=self.stat;var _term$14 = Kind$Term$inline$($5483,_defs$3);var _type$15 = Kind$Term$inline$($5484,_defs$3);var $5488 = Kind$Def$new$($5479,$5480,$5481,$5482,_term$14,_type$15,$5485,$5486,$5487);var $5478 = $5488;break;};return $5478;}),_defs$3);var $5474 = IO$monad$((_m$bind$5=>_m$pure$6=>{var $5489 = _m$pure$6;return $5489;}))(Kind$Defs$core$(_defs$4));return $5474;}));return $5472;};
 const Kind$to_core$io$one = x0=>Kind$to_core$io$one$(x0);function IO$put_string$(_text$1){var $5490 = IO$ask$("put_string",_text$1,(_skip$2=>{var $5491 = IO$end$(Unit$new);return $5491;}));return $5490;};
 const IO$put_string = x0=>IO$put_string$(x0);function IO$print$(_text$1){var $5492 = IO$put_string$((_text$1+"\u{a}"));return $5492;};
 const IO$print = x0=>IO$print$(x0);function Maybe$bind$(_m$3,_f$4){var self = _m$3;switch(self._){case 'Maybe.some':var $5494=self.value;var $5495 = _f$4($5494);var $5493 = $5495;break;case 'Maybe.none':var $5496 = Maybe$none;var $5493 = $5496;break;};return $5493;};
 const Maybe$bind = x0=>x1=>Maybe$bind$(x0,x1);function Maybe$monad$(_new$2){var $5497 = _new$2(Maybe$bind)(Maybe$some);return $5497;};
 const Maybe$monad = x0=>Maybe$monad$(x0);function Kind$Term$show$as_nat$go$(_term$1){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $5499=self.name;var self = ($5499==="Nat.zero");if (self) {var $5501 = Maybe$some$(0n);var $5500 = $5501;} else {var $5502 = Maybe$none;var $5500 = $5502;};var $5498 = $5500;break;case 'Kind.Term.app':var $5503=self.func;var $5504=self.argm;var self = $5503;switch(self._){case 'Kind.Term.ref':var $5506=self.name;var self = ($5506==="Nat.succ");if (self) {var $5508 = Maybe$monad$((_m$bind$5=>_m$pure$6=>{var $5509 = _m$bind$5;return $5509;}))(Kind$Term$show$as_nat$go$($5504))((_pred$5=>{var $5510 = Maybe$monad$((_m$bind$6=>_m$pure$7=>{var $5511 = _m$pure$7;return $5511;}))(Nat$succ$(_pred$5));return $5510;}));var $5507 = $5508;} else {var $5512 = Maybe$none;var $5507 = $5512;};var $5505 = $5507;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $5513 = Maybe$none;var $5505 = $5513;break;};var $5498 = $5505;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $5514 = Maybe$none;var $5498 = $5514;break;};return $5498;};
 const Kind$Term$show$as_nat$go = x0=>Kind$Term$show$as_nat$go$(x0);function Kind$Term$show$as_nat$(_term$1){var $5515 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1),Nat$show);return $5515;};
 const Kind$Term$show$as_nat = x0=>Kind$Term$show$as_nat$(x0);function Kind$Term$show$is_ref$(_term$1,_name$2){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $5517=self.name;var $5518 = (_name$2===$5517);var $5516 = $5518;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $5519 = Bool$false;var $5516 = $5519;break;};return $5516;};
 const Kind$Term$show$is_ref = x0=>x1=>Kind$Term$show$is_ref$(x0,x1);function Kind$Term$show$app$done$(_term$1,_path$2,_args$3){var _arity$4 = (list_length(_args$3));var self = (Kind$Term$show$is_ref$(_term$1,"Equal")&&(_arity$4===3n));if (self) {var _func$5 = Kind$Term$show$go$(_term$1,_path$2);var _eq_lft$6 = Maybe$default$("?",List$at$(1n,_args$3));var _eq_rgt$7 = Maybe$default$("?",List$at$(2n,_args$3));var $5521 = String$flatten$(List$cons$(_eq_lft$6,List$cons$(" == ",List$cons$(_eq_rgt$7,List$nil))));var $5520 = $5521;} else {var _func$5 = Kind$Term$show$go$(_term$1,_path$2);var self = _func$5;if (self.length===0) {var $5523 = Bool$false;var _wrap$6 = $5523;} else {var $5524=self.charCodeAt(0);var $5525=self.slice(1);var $5526 = ($5524===40);var _wrap$6 = $5526;};var _args$7 = String$join$(",",_args$3);var self = _wrap$6;if (self) {var $5527 = String$flatten$(List$cons$("(",List$cons$(_func$5,List$cons$(")",List$nil))));var _func$8 = $5527;} else {var $5528 = _func$5;var _func$8 = $5528;};var $5522 = String$flatten$(List$cons$(_func$8,List$cons$("(",List$cons$(_args$7,List$cons$(")",List$nil)))));var $5520 = $5522;};return $5520;};
 const Kind$Term$show$app$done = x0=>x1=>x2=>Kind$Term$show$app$done$(x0,x1,x2);function Kind$Term$show$app$(_term$1,_path$2,_args$3){var Kind$Term$show$app$=(_term$1,_path$2,_args$3)=>({ctr:'TCO',arg:[_term$1,_path$2,_args$3]});var Kind$Term$show$app=_term$1=>_path$2=>_args$3=>Kind$Term$show$app$(_term$1,_path$2,_args$3);var arg=[_term$1,_path$2,_args$3];while(true){let [_term$1,_path$2,_args$3]=arg;var R=(()=>{var self = _term$1;switch(self._){case 'Kind.Term.app':var $5529=self.func;var $5530=self.argm;var $5531 = Kind$Term$show$app$($5529,Kind$MPath$o$(_path$2),List$cons$(Kind$Term$show$go$($5530,Kind$MPath$i$(_path$2)),_args$3));return $5531;case 'Kind.Term.ori':var $5532=self.expr;var $5533 = Kind$Term$show$app$($5532,_path$2,_args$3);return $5533;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':var $5534 = Kind$Term$show$app$done$(_term$1,_path$2,_args$3);return $5534;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Kind$Term$show$app = x0=>x1=>x2=>Kind$Term$show$app$(x0,x1,x2);function BitsMap$to_list$go$(_xs$2,_key$3,_list$4){var self = _xs$2;switch(self._){case 'BitsMap.tie':var $5536=self.val;var $5537=self.lft;var $5538=self.rgt;var self = $5536;switch(self._){case 'Maybe.some':var $5540=self.value;var $5541 = List$cons$(Pair$new$(Bits$reverse$(_key$3),$5540),_list$4);var _list0$8 = $5541;break;case 'Maybe.none':var $5542 = _list$4;var _list0$8 = $5542;break;};var _list1$9 = BitsMap$to_list$go$($5537,(_key$3+'0'),_list0$8);var _list2$10 = BitsMap$to_list$go$($5538,(_key$3+'1'),_list1$9);var $5539 = _list2$10;var $5535 = $5539;break;case 'BitsMap.new':var $5543 = _list$4;var $5535 = $5543;break;};return $5535;};
 const BitsMap$to_list$go = x0=>x1=>x2=>BitsMap$to_list$go$(x0,x1,x2);function BitsMap$to_list$(_xs$2){var $5544 = List$reverse$(BitsMap$to_list$go$(_xs$2,Bits$e,List$nil));return $5544;};
 const BitsMap$to_list = x0=>BitsMap$to_list$(x0);function Bits$chunks_of$go$(_len$1,_bits$2,_need$3,_chunk$4){var self = _bits$2;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5546=self.slice(0,-1);var self = _need$3;if (self===0n) {var _head$6 = Bits$reverse$(_chunk$4);var _tail$7 = Bits$chunks_of$go$(_len$1,_bits$2,_len$1,Bits$e);var $5548 = List$cons$(_head$6,_tail$7);var $5547 = $5548;} else {var $5549=(self-1n);var _chunk$7 = (_chunk$4+'0');var $5550 = Bits$chunks_of$go$(_len$1,$5546,$5549,_chunk$7);var $5547 = $5550;};var $5545 = $5547;break;case 'i':var $5551=self.slice(0,-1);var self = _need$3;if (self===0n) {var _head$6 = Bits$reverse$(_chunk$4);var _tail$7 = Bits$chunks_of$go$(_len$1,_bits$2,_len$1,Bits$e);var $5553 = List$cons$(_head$6,_tail$7);var $5552 = $5553;} else {var $5554=(self-1n);var _chunk$7 = (_chunk$4+'1');var $5555 = Bits$chunks_of$go$(_len$1,$5551,$5554,_chunk$7);var $5552 = $5555;};var $5545 = $5552;break;case 'e':var $5556 = List$cons$(Bits$reverse$(_chunk$4),List$nil);var $5545 = $5556;break;};return $5545;};
 const Bits$chunks_of$go = x0=>x1=>x2=>x3=>Bits$chunks_of$go$(x0,x1,x2,x3);function Bits$chunks_of$(_len$1,_bits$2){var $5557 = Bits$chunks_of$go$(_len$1,_bits$2,_len$1,Bits$e);return $5557;};
 const Bits$chunks_of = x0=>x1=>Bits$chunks_of$(x0,x1);function Word$from_bits$(_size$1,_bits$2){var self = _size$1;if (self===0n) {var $5559 = Word$e;var $5558 = $5559;} else {var $5560=(self-1n);var self = _bits$2;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5562=self.slice(0,-1);var $5563 = Word$o$(Word$from_bits$($5560,$5562));var $5561 = $5563;break;case 'i':var $5564=self.slice(0,-1);var $5565 = Word$i$(Word$from_bits$($5560,$5564));var $5561 = $5565;break;case 'e':var $5566 = Word$o$(Word$from_bits$($5560,Bits$e));var $5561 = $5566;break;};var $5558 = $5561;};return $5558;};
 const Word$from_bits = x0=>x1=>Word$from_bits$(x0,x1);function Kind$Name$from_bits$(_bits$1){var _list$2 = Bits$chunks_of$(6n,_bits$1);var _name$3 = List$fold$(_list$2,String$nil,(_bts$3=>_name$4=>{var _u16$5 = U16$new$(Word$from_bits$(16n,Bits$reverse$(_bts$3)));var self = U16$btw$(0,_u16$5,25);if (self) {var $5569 = ((_u16$5+65)&0xFFFF);var _chr$6 = $5569;} else {var self = U16$btw$(26,_u16$5,51);if (self) {var $5571 = ((_u16$5+71)&0xFFFF);var $5570 = $5571;} else {var self = U16$btw$(52,_u16$5,61);if (self) {var $5573 = (Math.max(_u16$5-4,0));var $5572 = $5573;} else {var self = (62===_u16$5);if (self) {var $5575 = 46;var $5574 = $5575;} else {var $5576 = 95;var $5574 = $5576;};var $5572 = $5574;};var $5570 = $5572;};var _chr$6 = $5570;};var $5568 = String$cons$(_chr$6,_name$4);return $5568;}));var $5567 = _name$3;return $5567;};
 const Kind$Name$from_bits = x0=>Kind$Name$from_bits$(x0);function Pair$fst$(_pair$3){var self = _pair$3;switch(self._){case 'Pair.new':var $5578=self.fst;var $5579 = $5578;var $5577 = $5579;break;};return $5577;};
 const Pair$fst = x0=>Pair$fst$(x0);function Kind$Term$show$go$(_term$1,_path$2){var self = Kind$Term$show$as_nat$(_term$1);switch(self._){case 'Maybe.some':var $5581=self.value;var $5582 = $5581;var $5580 = $5582;break;case 'Maybe.none':var self = _term$1;switch(self._){case 'Kind.Term.var':var $5584=self.name;var $5585 = Kind$Name$show$($5584);var $5583 = $5585;break;case 'Kind.Term.ref':var $5586=self.name;var _name$4 = Kind$Name$show$($5586);var self = _path$2;switch(self._){case 'Maybe.some':var $5588=self.value;var _path_val$6 = ((Bits$e+'1')+Kind$Path$to_bits$($5588));var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));var $5589 = String$flatten$(List$cons$(_name$4,List$cons$(Kind$color$("2",("-"+_path_str$7)),List$nil)));var $5587 = $5589;break;case 'Maybe.none':var $5590 = _name$4;var $5587 = $5590;break;};var $5583 = $5587;break;case 'Kind.Term.all':var $5591=self.eras;var $5592=self.self;var $5593=self.name;var $5594=self.xtyp;var $5595=self.body;var _eras$8 = $5591;var _self$9 = Kind$Name$show$($5592);var _name$10 = Kind$Name$show$($5593);var _type$11 = Kind$Term$show$go$($5594,Kind$MPath$o$(_path$2));var self = _eras$8;if (self) {var $5597 = "<";var _open$12 = $5597;} else {var $5598 = "(";var _open$12 = $5598;};var self = _eras$8;if (self) {var $5599 = ">";var _clos$13 = $5599;} else {var $5600 = ")";var _clos$13 = $5600;};var _body$14 = Kind$Term$show$go$($5595(Kind$Term$var$($5592,0n))(Kind$Term$var$($5593,0n)),Kind$MPath$i$(_path$2));var $5596 = String$flatten$(List$cons$(_self$9,List$cons$(_open$12,List$cons$(_name$10,List$cons$(":",List$cons$(_type$11,List$cons$(_clos$13,List$cons$(" ",List$cons$(_body$14,List$nil)))))))));var $5583 = $5596;break;case 'Kind.Term.lam':var $5601=self.name;var $5602=self.body;var _name$5 = Kind$Name$show$($5601);var _body$6 = Kind$Term$show$go$($5602(Kind$Term$var$($5601,0n)),Kind$MPath$o$(_path$2));var $5603 = String$flatten$(List$cons$("(",List$cons$(_name$5,List$cons$(") ",List$cons$(_body$6,List$nil)))));var $5583 = $5603;break;case 'Kind.Term.let':var $5604=self.name;var $5605=self.expr;var $5606=self.body;var _name$6 = Kind$Name$show$($5604);var _expr$7 = Kind$Term$show$go$($5605,Kind$MPath$o$(_path$2));var _body$8 = Kind$Term$show$go$($5606(Kind$Term$var$($5604,0n)),Kind$MPath$i$(_path$2));var $5607 = String$flatten$(List$cons$("let ",List$cons$(_name$6,List$cons$(" = ",List$cons$(_expr$7,List$cons$("; ",List$cons$(_body$8,List$nil)))))));var $5583 = $5607;break;case 'Kind.Term.def':var $5608=self.name;var $5609=self.expr;var $5610=self.body;var _name$6 = Kind$Name$show$($5608);var _expr$7 = Kind$Term$show$go$($5609,Kind$MPath$o$(_path$2));var _body$8 = Kind$Term$show$go$($5610(Kind$Term$var$($5608,0n)),Kind$MPath$i$(_path$2));var $5611 = String$flatten$(List$cons$("def ",List$cons$(_name$6,List$cons$(" = ",List$cons$(_expr$7,List$cons$("; ",List$cons$(_body$8,List$nil)))))));var $5583 = $5611;break;case 'Kind.Term.ann':var $5612=self.term;var $5613=self.type;var _term$6 = Kind$Term$show$go$($5612,Kind$MPath$o$(_path$2));var _type$7 = Kind$Term$show$go$($5613,Kind$MPath$i$(_path$2));var $5614 = String$flatten$(List$cons$(_term$6,List$cons$("::",List$cons$(_type$7,List$nil))));var $5583 = $5614;break;case 'Kind.Term.gol':var $5615=self.name;var _name$6 = Kind$Name$show$($5615);var $5616 = String$flatten$(List$cons$("?",List$cons$(_name$6,List$nil)));var $5583 = $5616;break;case 'Kind.Term.nat':var $5617=self.natx;var $5618 = String$flatten$(List$cons$(Nat$show$($5617),List$nil));var $5583 = $5618;break;case 'Kind.Term.chr':var $5619=self.chrx;var $5620 = String$flatten$(List$cons$("\'",List$cons$(Kind$escape$char$($5619),List$cons$("\'",List$nil))));var $5583 = $5620;break;case 'Kind.Term.str':var $5621=self.strx;var $5622 = String$flatten$(List$cons$("\"",List$cons$(Kind$escape$($5621),List$cons$("\"",List$nil))));var $5583 = $5622;break;case 'Kind.Term.cse':var $5623=self.expr;var $5624=self.name;var $5625=self.with;var $5626=self.cses;var $5627=self.moti;var _expr$9 = Kind$Term$show$go$($5623,Kind$MPath$o$(_path$2));var _name$10 = Kind$Name$show$($5624);var _wyth$11 = String$join$("",List$mapped$($5625,(_defn$11=>{var self = _defn$11;switch(self._){case 'Kind.Def.new':var $5630=self.name;var $5631=self.term;var $5632=self.type;var _name$21 = Kind$Name$show$($5630);var _type$22 = Kind$Term$show$go$($5632,Maybe$none);var _term$23 = Kind$Term$show$go$($5631,Maybe$none);var $5633 = String$flatten$(List$cons$(_name$21,List$cons$(": ",List$cons$(_type$22,List$cons$(" = ",List$cons$(_term$23,List$cons$(";",List$nil)))))));var $5629 = $5633;break;};return $5629;})));var _cses$12 = BitsMap$to_list$($5626);var _cses$13 = String$join$("",List$mapped$(_cses$12,(_x$13=>{var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13),Maybe$none);var $5634 = String$flatten$(List$cons$(_name$14,List$cons$(": ",List$cons$(_term$15,List$cons$("; ",List$nil)))));return $5634;})));var self = $5627;switch(self._){case 'Maybe.some':var $5635=self.value;var $5636 = String$flatten$(List$cons$(": ",List$cons$(Kind$Term$show$go$($5635,Maybe$none),List$nil)));var _moti$14 = $5636;break;case 'Maybe.none':var $5637 = "";var _moti$14 = $5637;break;};var $5628 = String$flatten$(List$cons$("case ",List$cons$(_expr$9,List$cons$(" as ",List$cons$(_name$10,List$cons$(_wyth$11,List$cons$(" { ",List$cons$(_cses$13,List$cons$("}",List$cons$(_moti$14,List$nil))))))))));var $5583 = $5628;break;case 'Kind.Term.ori':var $5638=self.expr;var $5639 = Kind$Term$show$go$($5638,_path$2);var $5583 = $5639;break;case 'Kind.Term.typ':var $5640 = "Type";var $5583 = $5640;break;case 'Kind.Term.app':var $5641 = Kind$Term$show$app$(_term$1,_path$2,List$nil);var $5583 = $5641;break;case 'Kind.Term.hol':var $5642 = "_";var $5583 = $5642;break;};var $5580 = $5583;break;};return $5580;};
 const Kind$Term$show$go = x0=>x1=>Kind$Term$show$go$(x0,x1);function Kind$Term$show$(_term$1){var $5643 = Kind$Term$show$go$(_term$1,Maybe$none);return $5643;};
 const Kind$Term$show = x0=>Kind$Term$show$(x0);function Kind$Defs$report$types$(_defs$1,_names$2){var _types$3 = "";var _types$4 = (()=>{var $5646 = _types$3;var $5647 = _names$2;let _types$5=$5646;let _name$4;while ($5647._==='List.cons') {_name$4=$5647.head;var self = Kind$Map$get$(_name$4,_defs$1);switch(self._){case 'Maybe.some':var $5648=self.value;var self = $5648;switch(self._){case 'Kind.Def.new':var $5650=self.type;var $5651 = (_types$5+(_name$4+(": "+(Kind$Term$show$($5650)+"\u{a}"))));var $5649 = $5651;break;};var $5646 = $5649;break;case 'Maybe.none':var $5652 = _types$5;var $5646 = $5652;break;};_types$5=$5646;$5647=$5647.tail;}return _types$5;})();var $5644 = _types$4;return $5644;};
 const Kind$Defs$report$types = x0=>x1=>Kind$Defs$report$types$(x0,x1);function BitsMap$keys$go$(_xs$2,_key$3,_list$4){var self = _xs$2;switch(self._){case 'BitsMap.tie':var $5654=self.val;var $5655=self.lft;var $5656=self.rgt;var self = $5654;switch(self._){case 'Maybe.none':var $5658 = _list$4;var _list0$8 = $5658;break;case 'Maybe.some':var $5659 = List$cons$(Bits$reverse$(_key$3),_list$4);var _list0$8 = $5659;break;};var _list1$9 = BitsMap$keys$go$($5655,(_key$3+'0'),_list0$8);var _list2$10 = BitsMap$keys$go$($5656,(_key$3+'1'),_list1$9);var $5657 = _list2$10;var $5653 = $5657;break;case 'BitsMap.new':var $5660 = _list$4;var $5653 = $5660;break;};return $5653;};
 const BitsMap$keys$go = x0=>x1=>x2=>BitsMap$keys$go$(x0,x1,x2);function BitsMap$keys$(_xs$2){var $5661 = List$reverse$(BitsMap$keys$go$(_xs$2,Bits$e,List$nil));return $5661;};
 const BitsMap$keys = x0=>BitsMap$keys$(x0);function Kind$Error$relevant$(_errors$1,_got$2){var self = _errors$1;switch(self._){case 'List.cons':var $5663=self.head;var $5664=self.tail;var self = $5663;switch(self._){case 'Kind.Error.type_mismatch':case 'Kind.Error.undefined_reference':case 'Kind.Error.cant_infer':var $5666 = (!_got$2);var _keep$5 = $5666;break;case 'Kind.Error.show_goal':var $5667 = Bool$true;var _keep$5 = $5667;break;case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':var $5668 = Bool$false;var _keep$5 = $5668;break;};var self = $5663;switch(self._){case 'Kind.Error.type_mismatch':case 'Kind.Error.undefined_reference':var $5669 = Bool$true;var _got$6 = $5669;break;case 'Kind.Error.show_goal':case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':case 'Kind.Error.cant_infer':var $5670 = _got$2;var _got$6 = $5670;break;};var _tail$7 = Kind$Error$relevant$($5664,_got$6);var self = _keep$5;if (self) {var $5671 = List$cons$($5663,_tail$7);var $5665 = $5671;} else {var $5672 = _tail$7;var $5665 = $5672;};var $5662 = $5665;break;case 'List.nil':var $5673 = List$nil;var $5662 = $5673;break;};return $5662;};
 const Kind$Error$relevant = x0=>x1=>Kind$Error$relevant$(x0,x1);function Map$(_V$1){var $5674 = null;return $5674;};
 const Map = x0=>Map$(x0);function String$to_bits$(_str$1){var self = _str$1;if (self.length===0) {var $5676 = Bits$e;var $5675 = $5676;} else {var $5677=self.charCodeAt(0);var $5678=self.slice(1);var $5679 = (String$to_bits$($5678)+(u16_to_bits($5677)));var $5675 = $5679;};return $5675;};
 const String$to_bits = x0=>String$to_bits$(x0);function Map$from_list$(_xs$2){var self = _xs$2;switch(self._){case 'List.cons':var $5681=self.head;var $5682=self.tail;var self = $5681;switch(self._){case 'Pair.new':var $5684=self.fst;var $5685=self.snd;var $5686 = BitsMap$set$(String$to_bits$($5684),$5685,Map$from_list$($5682));var $5683 = $5686;break;};var $5680 = $5683;break;case 'List.nil':var $5687 = BitsMap$new;var $5680 = $5687;break;};return $5680;};
 const Map$from_list = x0=>Map$from_list$(x0);function Kind$Context$show$(_context$1){var self = _context$1;switch(self._){case 'List.cons':var $5689=self.head;var $5690=self.tail;var self = $5689;switch(self._){case 'Pair.new':var $5692=self.fst;var $5693=self.snd;var _name$6 = Kind$Name$show$($5692);var _type$7 = Kind$Term$show$(Kind$Term$normalize$($5693,Kind$Map$new));var _rest$8 = Kind$Context$show$($5690);var $5694 = (_rest$8+("- "+(_name$6+(": "+(_type$7+"\u{a}")))));var $5691 = $5694;break;};var $5688 = $5691;break;case 'List.nil':var $5695 = "";var $5688 = $5695;break;};return $5688;};
 const Kind$Context$show = x0=>Kind$Context$show$(x0);function Kind$Term$expand_at$(_path$1,_term$2,_defs$3){var $5696 = Kind$Term$patch_at$(_path$1,_term$2,(_term$4=>{var self = _term$4;switch(self._){case 'Kind.Term.ref':var $5698=self.name;var self = Kind$Map$get$($5698,_defs$3);switch(self._){case 'Maybe.some':var $5700=self.value;var self = $5700;switch(self._){case 'Kind.Def.new':var $5702=self.term;var $5703 = $5702;var $5701 = $5703;break;};var $5699 = $5701;break;case 'Maybe.none':var $5704 = Kind$Term$ref$($5698);var $5699 = $5704;break;};var $5697 = $5699;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.cse':case 'Kind.Term.ori':var $5705 = _term$4;var $5697 = $5705;break;};return $5697;}));return $5696;};
 const Kind$Term$expand_at = x0=>x1=>x2=>Kind$Term$expand_at$(x0,x1,x2);function Kind$Term$expand_ct$(_term$1,_defs$2,_arity$3){var self = _term$1;switch(self._){case 'Kind.Term.var':var $5707=self.name;var $5708=self.indx;var $5709 = Kind$Term$var$($5707,$5708);var $5706 = $5709;break;case 'Kind.Term.ref':var $5710=self.name;var self = Kind$Map$get$($5710,_defs$2);switch(self._){case 'Maybe.some':var $5712=self.value;var self = $5712;switch(self._){case 'Kind.Def.new':var $5714=self.term;var $5715=self.isct;var $5716=self.arit;var self = ($5715&&(_arity$3>$5716));if (self) {var $5718 = $5714;var $5717 = $5718;} else {var $5719 = Kind$Term$ref$($5710);var $5717 = $5719;};var $5713 = $5717;break;};var $5711 = $5713;break;case 'Maybe.none':var $5720 = Kind$Term$ref$($5710);var $5711 = $5720;break;};var $5706 = $5711;break;case 'Kind.Term.all':var $5721=self.eras;var $5722=self.self;var $5723=self.name;var $5724=self.xtyp;var $5725=self.body;var $5726 = Kind$Term$all$($5721,$5722,$5723,Kind$Term$expand_ct$($5724,_defs$2,0n),(_s$9=>_x$10=>{var $5727 = Kind$Term$expand_ct$($5725(_s$9)(_x$10),_defs$2,0n);return $5727;}));var $5706 = $5726;break;case 'Kind.Term.lam':var $5728=self.name;var $5729=self.body;var $5730 = Kind$Term$lam$($5728,(_x$6=>{var $5731 = Kind$Term$expand_ct$($5729(_x$6),_defs$2,0n);return $5731;}));var $5706 = $5730;break;case 'Kind.Term.app':var $5732=self.func;var $5733=self.argm;var $5734 = Kind$Term$app$(Kind$Term$expand_ct$($5732,_defs$2,Nat$succ$(_arity$3)),Kind$Term$expand_ct$($5733,_defs$2,0n));var $5706 = $5734;break;case 'Kind.Term.let':var $5735=self.name;var $5736=self.expr;var $5737=self.body;var $5738 = Kind$Term$let$($5735,Kind$Term$expand_ct$($5736,_defs$2,0n),(_x$7=>{var $5739 = Kind$Term$expand_ct$($5737(_x$7),_defs$2,0n);return $5739;}));var $5706 = $5738;break;case 'Kind.Term.def':var $5740=self.name;var $5741=self.expr;var $5742=self.body;var $5743 = Kind$Term$def$($5740,Kind$Term$expand_ct$($5741,_defs$2,0n),(_x$7=>{var $5744 = Kind$Term$expand_ct$($5742(_x$7),_defs$2,0n);return $5744;}));var $5706 = $5743;break;case 'Kind.Term.ann':var $5745=self.done;var $5746=self.term;var $5747=self.type;var $5748 = Kind$Term$ann$($5745,Kind$Term$expand_ct$($5746,_defs$2,0n),Kind$Term$expand_ct$($5747,_defs$2,0n));var $5706 = $5748;break;case 'Kind.Term.gol':var $5749=self.name;var $5750=self.dref;var $5751=self.verb;var $5752 = Kind$Term$gol$($5749,$5750,$5751);var $5706 = $5752;break;case 'Kind.Term.hol':var $5753=self.path;var $5754 = Kind$Term$hol$($5753);var $5706 = $5754;break;case 'Kind.Term.nat':var $5755=self.natx;var $5756 = Kind$Term$nat$($5755);var $5706 = $5756;break;case 'Kind.Term.chr':var $5757=self.chrx;var $5758 = Kind$Term$chr$($5757);var $5706 = $5758;break;case 'Kind.Term.str':var $5759=self.strx;var $5760 = Kind$Term$str$($5759);var $5706 = $5760;break;case 'Kind.Term.ori':var $5761=self.orig;var $5762=self.expr;var $5763 = Kind$Term$ori$($5761,$5762);var $5706 = $5763;break;case 'Kind.Term.typ':var $5764 = Kind$Term$typ;var $5706 = $5764;break;case 'Kind.Term.cse':var $5765 = _term$1;var $5706 = $5765;break;};return $5706;};
 const Kind$Term$expand_ct = x0=>x1=>x2=>Kind$Term$expand_ct$(x0,x1,x2);function Kind$Term$expand$(_dref$1,_term$2,_defs$3){var _term$4 = Kind$Term$normalize$(_term$2,Kind$Map$new);var _term$5 = (()=>{var $5768 = _term$4;var $5769 = _dref$1;let _term$6=$5768;let _path$5;while ($5769._==='List.cons') {_path$5=$5769.head;var _term$7 = Kind$Term$expand_at$(_path$5,_term$6,_defs$3);var _term$8 = Kind$Term$normalize$(_term$7,Kind$Map$new);var _term$9 = Kind$Term$expand_ct$(_term$8,_defs$3,0n);var _term$10 = Kind$Term$normalize$(_term$9,Kind$Map$new);var $5768 = _term$10;_term$6=$5768;$5769=$5769.tail;}return _term$6;})();var $5766 = _term$5;return $5766;};
 const Kind$Term$expand = x0=>x1=>x2=>Kind$Term$expand$(x0,x1,x2);function Kind$Error$show$(_error$1,_defs$2){var self = _error$1;switch(self._){case 'Kind.Error.type_mismatch':var $5771=self.expected;var $5772=self.detected;var $5773=self.context;var self = $5771;switch(self._){case 'Either.left':var $5775=self.value;var $5776 = $5775;var _expected$7 = $5776;break;case 'Either.right':var $5777=self.value;var $5778 = Kind$Term$show$(Kind$Term$normalize$($5777,Map$from_list$(List$nil)));var _expected$7 = $5778;break;};var self = $5772;switch(self._){case 'Either.left':var $5779=self.value;var $5780 = $5779;var _detected$8 = $5780;break;case 'Either.right':var $5781=self.value;var $5782 = Kind$Term$show$(Kind$Term$normalize$($5781,Map$from_list$(List$nil)));var _detected$8 = $5782;break;};var $5774 = ("Type mismatch.\u{a}"+("- Expected: "+(_expected$7+("\u{a}"+("- Detected: "+(_detected$8+("\u{a}"+(()=>{var self = $5773;switch(self._){case 'List.nil':var $5783 = "";return $5783;case 'List.cons':var $5784 = ("With context:\u{a}"+Kind$Context$show$($5773));return $5784;};})())))))));var $5770 = $5774;break;case 'Kind.Error.show_goal':var $5785=self.name;var $5786=self.dref;var $5787=self.verb;var $5788=self.goal;var $5789=self.context;var _goal_name$9 = ("Goal ?"+(Kind$Name$show$($5785)+":\u{a}"));var self = $5788;switch(self._){case 'Maybe.some':var $5791=self.value;var _goal$11 = Kind$Term$expand$($5786,$5791,_defs$2);var $5792 = ("With type: "+((()=>{var self = $5787;if (self) {var $5793 = Kind$Term$show$go$(_goal$11,Maybe$some$((_x$12=>{var $5794 = _x$12;return $5794;})));return $5793;} else {var $5795 = Kind$Term$show$(_goal$11);return $5795;};})()+"\u{a}"));var _with_type$10 = $5792;break;case 'Maybe.none':var $5796 = "";var _with_type$10 = $5796;break;};var self = $5789;switch(self._){case 'List.nil':var $5797 = "";var _with_ctxt$11 = $5797;break;case 'List.cons':var $5798 = ("With ctxt:\u{a}"+Kind$Context$show$($5789));var _with_ctxt$11 = $5798;break;};var $5790 = String$flatten$(List$cons$(_goal_name$9,List$cons$(_with_type$10,List$cons$(_with_ctxt$11,List$nil))));var $5770 = $5790;break;case 'Kind.Error.waiting':var $5799=self.name;var $5800 = ("Waiting for \'"+($5799+"\'."));var $5770 = $5800;break;case 'Kind.Error.indirect':var $5801=self.name;var $5802 = ("Error on dependency \'"+($5801+"\'."));var $5770 = $5802;break;case 'Kind.Error.patch':var $5803=self.term;var $5804 = ("Patching: "+Kind$Term$show$($5803));var $5770 = $5804;break;case 'Kind.Error.undefined_reference':var $5805=self.name;var $5806 = ("Undefined reference: "+(Kind$Name$show$($5805)+"\u{a}"));var $5770 = $5806;break;case 'Kind.Error.cant_infer':var $5807=self.term;var $5808=self.context;var _term$6 = Kind$Term$show$($5807);var _context$7 = Kind$Context$show$($5808);var $5809 = ("Can\'t infer type of: "+(_term$6+("\u{a}"+("With ctxt:\u{a}"+_context$7))));var $5770 = $5809;break;};return $5770;};
 const Kind$Error$show = x0=>x1=>Kind$Error$show$(x0,x1);function Kind$Error$origin$(_error$1){var self = _error$1;switch(self._){case 'Kind.Error.type_mismatch':var $5811=self.origin;var $5812 = $5811;var $5810 = $5812;break;case 'Kind.Error.show_goal':var $5813=self.origin;var $5814 = $5813;var $5810 = $5814;break;case 'Kind.Error.undefined_reference':var $5815=self.origin;var $5816 = $5815;var $5810 = $5816;break;case 'Kind.Error.cant_infer':var $5817=self.origin;var $5818 = $5817;var $5810 = $5818;break;case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':var $5819 = Maybe$none;var $5810 = $5819;break;};return $5810;};
 const Kind$Error$origin = x0=>Kind$Error$origin$(x0);function Kind$Defs$report$errors$(_defs$1){var _errors$2 = "";var _errors$3 = (()=>{var $5822 = _errors$2;var $5823 = BitsMap$keys$(_defs$1);let _errors$4=$5822;let _key$3;while ($5823._==='List.cons') {_key$3=$5823.head;var _name$5 = Kind$Name$from_bits$(_key$3);var _defn$6 = Kind$Map$get$(_name$5,_defs$1);var self = _defn$6;switch(self._){case 'Maybe.some':var $5824=self.value;var self = $5824;switch(self._){case 'Kind.Def.new':var $5826=self.file;var $5827=self.code;var $5828=self.name;var $5829=self.stat;var self = $5829;switch(self._){case 'Kind.Status.fail':var $5831=self.errors;var self = $5831;switch(self._){case 'List.nil':var $5833 = _errors$4;var $5832 = $5833;break;case 'List.cons':var _name_str$20 = $5828;var _rel_errs$21 = Kind$Error$relevant$($5831,Bool$false);var _errors$22 = (()=>{var $5836 = _errors$4;var $5837 = _rel_errs$21;let _errors$23=$5836;let _err$22;while ($5837._==='List.cons') {_err$22=$5837.head;var _err_msg$24 = Kind$Error$show$(_err$22,_defs$1);var _ori_val$25 = Kind$Error$origin$(_err$22);var self = _ori_val$25;switch(self._){case 'Maybe.some':var $5838=self.value;var self = $5838;switch(self._){case 'Pair.new':var $5840=self.fst;var $5841=self.snd;var _inside$29 = ("Inside \'"+($5826+"\':\u{a}"));var _source$30 = Kind$highlight$($5827,$5840,$5841);var $5842 = (_errors$23+(_err_msg$24+(_inside$29+(_source$30+("\u{a}"+"\u{a}")))));var $5839 = $5842;break;};var $5836 = $5839;break;case 'Maybe.none':var $5843 = (_errors$23+(_err_msg$24+"\u{a}"));var $5836 = $5843;break;};_errors$23=$5836;$5837=$5837.tail;}return _errors$23;})();var $5834 = _errors$22;var $5832 = $5834;break;};var $5830 = $5832;break;case 'Kind.Status.init':case 'Kind.Status.wait':case 'Kind.Status.done':var $5844 = _errors$4;var $5830 = $5844;break;};var $5825 = $5830;break;};var $5822 = $5825;break;case 'Maybe.none':var $5845 = _errors$4;var $5822 = $5845;break;};_errors$4=$5822;$5823=$5823.tail;}return _errors$4;})();var $5820 = _errors$3;return $5820;};
 const Kind$Defs$report$errors = x0=>Kind$Defs$report$errors$(x0);function Kind$Defs$report$(_defs$1,_names$2){var _types$3 = Kind$Defs$report$types$(_defs$1,_names$2);var _errors$4 = Kind$Defs$report$errors$(_defs$1);var self = _errors$4;if (self.length===0) {var $5847 = "All terms check.";var _errors$5 = $5847;} else {var $5848=self.charCodeAt(0);var $5849=self.slice(1);var $5850 = _errors$4;var _errors$5 = $5850;};var $5846 = (_types$3+("\u{a}"+_errors$5));return $5846;};
 const Kind$Defs$report = x0=>x1=>Kind$Defs$report$(x0,x1);function Kind$checker$io$one$(_name$1){var $5851 = IO$monad$((_m$bind$2=>_m$pure$3=>{var $5852 = _m$bind$2;return $5852;}))(Kind$Synth$one$(_name$1,Kind$Map$new))((_new_defs$2=>{var self = _new_defs$2;switch(self._){case 'Maybe.some':var $5854=self.value;var $5855 = IO$print$(Kind$Defs$report$($5854,List$cons$(_name$1,List$nil)));var $5853 = $5855;break;case 'Maybe.none':var _notfound$3 = ("Term not found: \'"+(_name$1+"\'."));var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1),(_x$4=>{var $5857 = ("\'"+(_x$4+"\'"));return $5857;}));var _searched$5 = ("Searched on: "+(String$join$(", ",_filelist$4)+"."));var $5856 = IO$print$((_notfound$3+("\u{a}"+_searched$5)));var $5853 = $5856;break;};return $5853;}));return $5851;};
 const Kind$checker$io$one = x0=>Kind$checker$io$one$(x0);function Kind$Synth$many$(_names$1,_defs$2){var self = _names$1;switch(self._){case 'List.cons':var $5859=self.head;var $5860=self.tail;var $5861 = IO$monad$((_m$bind$5=>_m$pure$6=>{var $5862 = _m$bind$5;return $5862;}))(Kind$Synth$one$($5859,_defs$2))((_new_defs$5=>{var self = _new_defs$5;switch(self._){case 'Maybe.some':var $5864=self.value;var $5865 = Kind$Synth$many$($5860,$5864);var $5863 = $5865;break;case 'Maybe.none':var $5866 = Kind$Synth$many$($5860,_defs$2);var $5863 = $5866;break;};return $5863;}));var $5858 = $5861;break;case 'List.nil':var $5867 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $5868 = _m$pure$4;return $5868;}))(_defs$2);var $5858 = $5867;break;};return $5858;};
 const Kind$Synth$many = x0=>x1=>Kind$Synth$many$(x0,x1);function Kind$Synth$file$(_file$1,_defs$2){var $5869 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $5870 = _m$bind$3;return $5870;}))(IO$get_file$(_file$1))((_code$3=>{var _read$4 = Kind$Defs$read$(_file$1,_code$3,_defs$2);var self = _read$4;switch(self._){case 'Either.left':var $5872=self.value;var $5873 = IO$monad$((_m$bind$6=>_m$pure$7=>{var $5874 = _m$pure$7;return $5874;}))(Either$left$($5872));var $5871 = $5873;break;case 'Either.right':var $5875=self.value;var _file_defs$6 = $5875;var _file_keys$7 = BitsMap$keys$(_file_defs$6);var _file_nams$8 = List$mapped$(_file_keys$7,Kind$Name$from_bits);var $5876 = IO$monad$((_m$bind$9=>_m$pure$10=>{var $5877 = _m$bind$9;return $5877;}))(Kind$Synth$many$(_file_nams$8,_file_defs$6))((_defs$9=>{var $5878 = IO$monad$((_m$bind$10=>_m$pure$11=>{var $5879 = _m$pure$11;return $5879;}))(Either$right$(Pair$new$(_file_nams$8,_defs$9)));return $5878;}));var $5871 = $5876;break;};return $5871;}));return $5869;};
 const Kind$Synth$file = x0=>x1=>Kind$Synth$file$(x0,x1);function Kind$checker$io$file$(_file$1){var $5880 = IO$monad$((_m$bind$2=>_m$pure$3=>{var $5881 = _m$bind$2;return $5881;}))(Kind$Synth$file$(_file$1,Kind$Map$new))((_loaded$2=>{var self = _loaded$2;switch(self._){case 'Either.left':var $5883=self.value;var $5884 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $5885 = _m$bind$4;return $5885;}))(IO$print$(String$flatten$(List$cons$("On \'",List$cons$(_file$1,List$cons$("\':",List$nil))))))((_$4=>{var $5886 = IO$print$($5883);return $5886;}));var $5882 = $5884;break;case 'Either.right':var $5887=self.value;var self = $5887;switch(self._){case 'Pair.new':var $5889=self.fst;var $5890=self.snd;var _nams$6 = $5889;var _defs$7 = $5890;var self = _nams$6;switch(self._){case 'List.nil':var $5892 = IO$print$(("File not found or empty: \'"+(_file$1+"\'.")));var $5891 = $5892;break;case 'List.cons':var $5893 = IO$print$(Kind$Defs$report$(_defs$7,_nams$6));var $5891 = $5893;break;};var $5888 = $5891;break;};var $5882 = $5888;break;};return $5882;}));return $5880;};
 const Kind$checker$io$file = x0=>Kind$checker$io$file$(x0);function IO$purify$(_io$2){var IO$purify$=(_io$2)=>({ctr:'TCO',arg:[_io$2]});var IO$purify=_io$2=>IO$purify$(_io$2);var arg=[_io$2];while(true){let [_io$2]=arg;var R=(()=>{var self = _io$2;switch(self._){case 'IO.end':var $5894=self.value;var $5895 = $5894;return $5895;case 'IO.ask':var $5896=self.then;var $5897 = IO$purify$($5896(""));return $5897;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const IO$purify = x0=>IO$purify$(x0);function Kind$checker$code$(_code$1){var self = Kind$Defs$read$("Main.kind",_code$1,Kind$Map$new);switch(self._){case 'Either.left':var $5899=self.value;var $5900 = $5899;var $5898 = $5900;break;case 'Either.right':var $5901=self.value;var $5902 = IO$purify$((()=>{var _defs$3 = $5901;var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3),Kind$Name$from_bits);var $5903 = IO$monad$((_m$bind$5=>_m$pure$6=>{var $5904 = _m$bind$5;return $5904;}))(Kind$Synth$many$(_nams$4,_defs$3))((_defs$5=>{var $5905 = IO$monad$((_m$bind$6=>_m$pure$7=>{var $5906 = _m$pure$7;return $5906;}))(Kind$Defs$report$(_defs$5,_nams$4));return $5905;}));return $5903;})());var $5898 = $5902;break;};return $5898;};
 const Kind$checker$code = x0=>Kind$checker$code$(x0);function Kind$Term$read$(_code$1){var self = Kind$Parser$term$(0n,_code$1);switch(self._){case 'Parser.Reply.value':var $5908=self.val;var $5909 = Maybe$some$($5908);var $5907 = $5909;break;case 'Parser.Reply.error':var $5910 = Maybe$none;var $5907 = $5910;break;};return $5907;};
 const Kind$Term$read = x0=>Kind$Term$read$(x0);function Lsp$Report$new$(_types$1,_errors$2){var $5911 = ({_:'Lsp.Report.new','types':_types$1,'errors':_errors$2});return $5911;};
 const Lsp$Report$new = x0=>x1=>Lsp$Report$new$(x0,x1);function List$pure$(_x$2){var $5912 = List$cons$(_x$2,List$nil);return $5912;};
 const List$pure = x0=>List$pure$(x0);function List$append$(_as$2,_a$3){var self = _as$2;switch(self._){case 'List.cons':var $5914=self.head;var $5915=self.tail;var $5916 = List$cons$($5914,List$append$($5915,_a$3));var $5913 = $5916;break;case 'List.nil':var $5917 = List$pure$(_a$3);var $5913 = $5917;break;};return $5913;};
 const List$append = x0=>x1=>List$append$(x0,x1);function List$map$(_f$3,_as$4){var self = _as$4;switch(self._){case 'List.cons':var $5919=self.head;var $5920=self.tail;var $5921 = List$cons$(_f$3($5919),List$map$(_f$3,$5920));var $5918 = $5921;break;case 'List.nil':var $5922 = List$nil;var $5918 = $5922;break;};return $5918;};
 const List$map = x0=>x1=>List$map$(x0,x1);function Lsp$diagnostics$make_report$go$(_defs$1,_names$2,_errs$3,_typs$4){var Lsp$diagnostics$make_report$go$=(_defs$1,_names$2,_errs$3,_typs$4)=>({ctr:'TCO',arg:[_defs$1,_names$2,_errs$3,_typs$4]});var Lsp$diagnostics$make_report$go=_defs$1=>_names$2=>_errs$3=>_typs$4=>Lsp$diagnostics$make_report$go$(_defs$1,_names$2,_errs$3,_typs$4);var arg=[_defs$1,_names$2,_errs$3,_typs$4];while(true){let [_defs$1,_names$2,_errs$3,_typs$4]=arg;var R=(()=>{var self = _names$2;switch(self._){case 'List.cons':var $5923=self.head;var $5924=self.tail;var _name$7 = $5923;var self = Kind$Map$get$(_name$7,_defs$1);switch(self._){case 'Maybe.some':var $5926=self.value;var self = $5926;switch(self._){case 'Kind.Def.new':var $5928=self.file;var $5929=self.type;var $5930=self.stat;var _typs$18 = List$append$(_typs$4,Pair$new$(_name$7,$5929));var self = $5930;switch(self._){case 'Kind.Status.fail':var $5932=self.errors;var self = $5932;switch(self._){case 'List.nil':var $5934 = Lsp$diagnostics$make_report$go$(_defs$1,$5924,_errs$3,_typs$18);var $5933 = $5934;break;case 'List.cons':var _rel_errs$22 = Kind$Error$relevant$($5932,Bool$false);var self = _rel_errs$22;switch(self._){case 'List.nil':var $5936 = Lsp$diagnostics$make_report$go$(_defs$1,$5924,_errs$3,_typs$18);var $5935 = $5936;break;case 'List.cons':var _added_errs$25 = List$concat$(_errs$3,List$map$((_e$25=>{var $5938 = Pair$new$($5928,_e$25);return $5938;}),_rel_errs$22));var $5937 = Lsp$diagnostics$make_report$go$(_defs$1,$5924,_added_errs$25,_typs$18);var $5935 = $5937;break;};var $5933 = $5935;break;};var $5931 = $5933;break;case 'Kind.Status.init':case 'Kind.Status.wait':case 'Kind.Status.done':var $5939 = Lsp$diagnostics$make_report$go$(_defs$1,$5924,_errs$3,_typs$18);var $5931 = $5939;break;};var $5927 = $5931;break;};var $5925 = $5927;break;case 'Maybe.none':var $5940 = Lsp$diagnostics$make_report$go$(_defs$1,$5924,_errs$3,_typs$4);var $5925 = $5940;break;};return $5925;case 'List.nil':var $5941 = Lsp$Report$new$(_typs$4,_errs$3);return $5941;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Lsp$diagnostics$make_report$go = x0=>x1=>x2=>x3=>Lsp$diagnostics$make_report$go$(x0,x1,x2,x3);function Lsp$diagnostics$make_report$(_defs$1,_names$2){var $5942 = Lsp$diagnostics$make_report$go$(_defs$1,_names$2,List$nil,List$nil);return $5942;};
 const Lsp$diagnostics$make_report = x0=>x1=>Lsp$diagnostics$make_report$(x0,x1);function Lsp$Diagnostic$new$(_message$1,_severity$2,_file$3,_from$4,_upto$5){var $5943 = ({_:'Lsp.Diagnostic.new','message':_message$1,'severity':_severity$2,'file':_file$3,'from':_from$4,'upto':_upto$5});return $5943;};
 const Lsp$Diagnostic$new = x0=>x1=>x2=>x3=>x4=>Lsp$Diagnostic$new$(x0,x1,x2,x3,x4);function U32$new$(_value$1){var $5944 = word_to_u32(_value$1);return $5944;};
 const U32$new = x0=>U32$new$(x0);function U32$inc$(_a$1){var self = _a$1;switch('u32'){case 'u32':var $5946=u32_to_word(self);var $5947 = U32$new$(Word$inc$($5946));var $5945 = $5947;break;};return $5945;};
 const U32$inc = x0=>U32$inc$(x0); const U32$zero = U32$new$(Word$zero$(32n));
  const Nat$to_u32 = a0=>(Number(a0));
 const Lsp$DiagnosticSeverity$Error = 1;
 const Lsp$DiagnosticSeverity$Warning = 2;
 const Lsp$DiagnosticSeverity$Information = 3;
function Lsp$severity$(_err$1){var self = _err$1;switch(self._){case 'Kind.Error.type_mismatch':case 'Kind.Error.undefined_reference':case 'Kind.Error.cant_infer':var $5949 = Lsp$DiagnosticSeverity$Error;var $5948 = $5949;break;case 'Kind.Error.show_goal':var $5950 = Lsp$DiagnosticSeverity$Warning;var $5948 = $5950;break;case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':var $5951 = Lsp$DiagnosticSeverity$Information;var $5948 = $5951;break;};return $5948;};
 const Lsp$severity = x0=>Lsp$severity$(x0);function Lsp$diagnostics$(_defs$1){var _names$2 = List$mapped$(BitsMap$keys$(_defs$1),Kind$Name$from_bits);var self = Lsp$diagnostics$make_report$(_defs$1,_names$2);switch(self._){case 'Lsp.Report.new':var $5953=self.errors;var $5954 = List$mapped$($5953,(_pair$5=>{var self = _pair$5;switch(self._){case 'Pair.new':var $5956=self.fst;var $5957=self.snd;var _uri$8 = $5956;var _err$9 = $5957;var self = Kind$Error$origin$(_err$9);switch(self._){case 'Maybe.some':var $5959=self.value;var self = $5959;switch(self._){case 'Pair.new':var $5961=self.fst;var $5962=self.snd;var _from$13 = (Number($5961));var _upto$14 = (Number($5962));var $5963 = Lsp$Diagnostic$new$(Kind$Error$show$(_err$9,_defs$1),Lsp$severity$(_err$9),_uri$8,_from$13,_upto$14);var $5960 = $5963;break;};var $5958 = $5960;break;case 'Maybe.none':var $5964 = Lsp$Diagnostic$new$(Kind$Error$show$(_err$9,_defs$1),Lsp$severity$(_err$9),_uri$8,0,0);var $5958 = $5964;break;};var $5955 = $5958;break;};return $5955;}));var $5952 = $5954;break;};return $5952;};
 const Lsp$diagnostics = x0=>Lsp$diagnostics$(x0);function List$filter$(_f$2,_xs$3){var self = _xs$3;switch(self._){case 'List.cons':var $5966=self.head;var $5967=self.tail;var self = _f$2($5966);if (self) {var $5969 = List$cons$($5966,List$filter$(_f$2,$5967));var $5968 = $5969;} else {var $5970 = List$filter$(_f$2,$5967);var $5968 = $5970;};var $5965 = $5968;break;case 'List.nil':var $5971 = List$nil;var $5965 = $5971;break;};return $5965;};
 const List$filter = x0=>x1=>List$filter$(x0,x1);function Lsp$defs$(_defs$1,_uri$2){var $5972 = List$filter$((_d$3=>{var self = _d$3;switch(self._){case 'Kind.Def.new':var $5974=self.file;var $5975 = ($5974===_uri$2);var $5973 = $5975;break;};return $5973;}),BitsMap$values$(_defs$1));return $5972;};
 const Lsp$defs = x0=>x1=>Lsp$defs$(x0,x1);function BitsMap$delete$(_key$2,_map$3){var self = _map$3;switch(self._){case 'BitsMap.tie':var $5977=self.val;var $5978=self.lft;var $5979=self.rgt;var self = _key$2;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $5981=self.slice(0,-1);var $5982 = BitsMap$tie$($5977,BitsMap$delete$($5981,$5978),$5979);var $5980 = $5982;break;case 'i':var $5983=self.slice(0,-1);var $5984 = BitsMap$tie$($5977,$5978,BitsMap$delete$($5983,$5979));var $5980 = $5984;break;case 'e':var $5985 = BitsMap$tie$(Maybe$none,$5978,$5979);var $5980 = $5985;break;};var $5976 = $5980;break;case 'BitsMap.new':var $5986 = BitsMap$new;var $5976 = $5986;break;};return $5976;};
 const BitsMap$delete = x0=>x1=>BitsMap$delete$(x0,x1);function BitsMap$union$(_a$2,_b$3){var self = _a$2;switch(self._){case 'BitsMap.tie':var $5988=self.val;var $5989=self.lft;var $5990=self.rgt;var self = _b$3;switch(self._){case 'BitsMap.tie':var $5992=self.val;var $5993=self.lft;var $5994=self.rgt;var self = $5988;switch(self._){case 'Maybe.none':var $5996 = BitsMap$tie$($5992,BitsMap$union$($5989,$5993),BitsMap$union$($5990,$5994));var $5995 = $5996;break;case 'Maybe.some':var $5997 = BitsMap$tie$($5988,BitsMap$union$($5989,$5993),BitsMap$union$($5990,$5994));var $5995 = $5997;break;};var $5991 = $5995;break;case 'BitsMap.new':var $5998 = _a$2;var $5991 = $5998;break;};var $5987 = $5991;break;case 'BitsMap.new':var $5999 = _b$3;var $5987 = $5999;break;};return $5987;};
 const BitsMap$union = x0=>x1=>BitsMap$union$(x0,x1);function List$foldr$(_b$3,_f$4,_xs$5){var $6000 = List$fold$(_xs$5,_b$3,_f$4);return $6000;};
 const List$foldr = x0=>x1=>x2=>List$foldr$(x0,x1,x2);function GSet$(_A$1){var $6001 = null;return $6001;};
 const GSet = x0=>GSet$(x0); const GSet$tip = ({_:'GSet.tip'});
function GSet$bin$(_size$2,_val$3,_left$4,_right$5){var $6002 = ({_:'GSet.bin','size':_size$2,'val':_val$3,'left':_left$4,'right':_right$5});return $6002;};
 const GSet$bin = x0=>x1=>x2=>x3=>GSet$bin$(x0,x1,x2,x3);function GSet$singleton$(_a$2){var $6003 = GSet$bin$(1n,_a$2,GSet$tip,GSet$tip);return $6003;};
 const GSet$singleton = x0=>GSet$singleton$(x0);function GSet$size$(_set$2){var self = _set$2;switch(self._){case 'GSet.bin':var $6005=self.size;var $6006 = $6005;var $6004 = $6006;break;case 'GSet.tip':var $6007 = 0n;var $6004 = $6007;break;};return $6004;};
 const GSet$size = x0=>GSet$size$(x0); const GSet$w = 3n;
  const Nat$ltn = a0=>a1=>(a0<a1);
function List$sum$go$(_xs$1,_n$2){var List$sum$go$=(_xs$1,_n$2)=>({ctr:'TCO',arg:[_xs$1,_n$2]});var List$sum$go=_xs$1=>_n$2=>List$sum$go$(_xs$1,_n$2);var arg=[_xs$1,_n$2];while(true){let [_xs$1,_n$2]=arg;var R=(()=>{var self = _xs$1;switch(self._){case 'List.cons':var $6008=self.head;var $6009=self.tail;var $6010 = List$sum$go$($6009,($6008+_n$2));return $6010;case 'List.nil':var $6011 = _n$2;return $6011;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const List$sum$go = x0=>x1=>List$sum$go$(x0,x1);function List$sum$(_xs$1){var $6012 = List$sum$go$(_xs$1,Nat$zero);return $6012;};
 const List$sum = x0=>List$sum$(x0);function GSet$node$(_val$2,_left$3,_right$4){var _size_left$5 = GSet$size$(_left$3);var _size_right$6 = GSet$size$(_right$4);var _new_size$7 = List$sum$(List$cons$(1n,List$cons$(_size_left$5,List$cons$(_size_right$6,List$nil))));var $6013 = GSet$bin$(_new_size$7,_val$2,_left$3,_right$4);return $6013;};
 const GSet$node = x0=>x1=>x2=>GSet$node$(x0,x1,x2);function GSet$balance$(_a$2,_l$3,_r$4){var _size_l$5 = GSet$size$(_l$3);var _size_r$6 = GSet$size$(_r$4);var _size_l_plus_size_r$7 = (_size_l$5+_size_r$6);var _w_x_size_l$8 = (GSet$w*_size_l$5);var _w_x_size_r$9 = (GSet$w*_size_r$6);var self = (_size_l_plus_size_r$7<2n);if (self) {var $6015 = GSet$node$(_a$2,_l$3,_r$4);var $6014 = $6015;} else {var self = (_size_r$6>_w_x_size_l$8);if (self) {var self = _r$4;switch(self._){case 'GSet.bin':var $6018=self.val;var $6019=self.left;var $6020=self.right;var _size_rl$14 = GSet$size$($6019);var _size_rr$15 = GSet$size$($6020);var self = (_size_rl$14<_size_rr$15);if (self) {var _new_l$16 = GSet$node$(_a$2,_l$3,$6019);var $6022 = GSet$node$($6018,_new_l$16,$6020);var $6021 = $6022;} else {var self = $6019;switch(self._){case 'GSet.bin':var $6024=self.val;var $6025=self.left;var $6026=self.right;var _new_val$20 = $6024;var _new_left$21 = GSet$node$(_a$2,_l$3,$6025);var _new_right$22 = GSet$node$($6018,$6026,$6020);var $6027 = GSet$node$(_new_val$20,_new_left$21,_new_right$22);var $6023 = $6027;break;case 'GSet.tip':var $6028 = GSet$node$(_a$2,_l$3,_r$4);var $6023 = $6028;break;};var $6021 = $6023;};var $6017 = $6021;break;case 'GSet.tip':var $6029 = GSet$node$(_a$2,_l$3,_r$4);var $6017 = $6029;break;};var $6016 = $6017;} else {var self = (_size_l$5>_w_x_size_r$9);if (self) {var self = _l$3;switch(self._){case 'GSet.bin':var $6032=self.val;var $6033=self.left;var $6034=self.right;var _size_ll$14 = GSet$size$($6033);var _size_lr$15 = GSet$size$($6034);var self = (_size_lr$15<_size_ll$14);if (self) {var _new_left$16 = $6033;var _new_right$17 = GSet$node$(_a$2,$6034,_r$4);var $6036 = GSet$node$($6032,_new_left$16,_new_right$17);var $6035 = $6036;} else {var self = $6034;switch(self._){case 'GSet.bin':var $6038=self.val;var $6039=self.left;var $6040=self.right;var _new_val$20 = $6038;var _new_left$21 = GSet$node$($6032,$6033,$6039);var _new_right$22 = GSet$node$(_a$2,$6040,_r$4);var $6041 = GSet$node$(_new_val$20,_new_left$21,_new_right$22);var $6037 = $6041;break;case 'GSet.tip':var $6042 = GSet$node$(_a$2,_l$3,_r$4);var $6037 = $6042;break;};var $6035 = $6037;};var $6031 = $6035;break;case 'GSet.tip':var $6043 = GSet$node$(_a$2,_l$3,_r$4);var $6031 = $6043;break;};var $6030 = $6031;} else {var $6044 = GSet$node$(_a$2,_l$3,_r$4);var $6030 = $6044;};var $6016 = $6030;};var $6014 = $6016;};return $6014;};
 const GSet$balance = x0=>x1=>x2=>GSet$balance$(x0,x1,x2);function GSet$insert$(_cmp$2,_a$3,_set$4){var self = _set$4;switch(self._){case 'GSet.bin':var $6046=self.val;var $6047=self.left;var $6048=self.right;var self = _cmp$2(_a$3)($6046);switch(self._){case 'Cmp.ltn':var _new_left$9 = GSet$insert$(_cmp$2,_a$3,$6047);var $6050 = GSet$balance$($6046,_new_left$9,$6048);var $6049 = $6050;break;case 'Cmp.eql':var $6051 = GSet$node$(_a$3,$6047,$6048);var $6049 = $6051;break;case 'Cmp.gtn':var _new_right$9 = GSet$insert$(_cmp$2,_a$3,$6048);var $6052 = GSet$balance$($6046,$6047,_new_right$9);var $6049 = $6052;break;};var $6045 = $6049;break;case 'GSet.tip':var $6053 = GSet$singleton$(_a$3);var $6045 = $6053;break;};return $6045;};
 const GSet$insert = x0=>x1=>x2=>GSet$insert$(x0,x1,x2);function GSet$from_list$(_cmp$2,_xs$3){var $6054 = List$foldr$(GSet$tip,GSet$insert(_cmp$2),_xs$3);return $6054;};
 const GSet$from_list = x0=>x1=>GSet$from_list$(x0,x1);function U16$cmp$(_a$1,_b$2){var self = _a$1;switch('u16'){case 'u16':var $6056=u16_to_word(self);var self = _b$2;switch('u16'){case 'u16':var $6058=u16_to_word(self);var $6059 = Word$cmp$($6056,$6058);var $6057 = $6059;break;};var $6055 = $6057;break;};return $6055;};
 const U16$cmp = x0=>x1=>U16$cmp$(x0,x1);function String$cmp$(_a$1,_b$2){var String$cmp$=(_a$1,_b$2)=>({ctr:'TCO',arg:[_a$1,_b$2]});var String$cmp=_a$1=>_b$2=>String$cmp$(_a$1,_b$2);var arg=[_a$1,_b$2];while(true){let [_a$1,_b$2]=arg;var R=(()=>{var self = _a$1;if (self.length===0) {var self = _b$2;if (self.length===0) {var $6061 = Cmp$eql;var $6060 = $6061;} else {var $6062=self.charCodeAt(0);var $6063=self.slice(1);var $6064 = Cmp$ltn;var $6060 = $6064;};return $6060;} else {var $6065=self.charCodeAt(0);var $6066=self.slice(1);var self = _b$2;if (self.length===0) {var $6068 = Cmp$gtn;var $6067 = $6068;} else {var $6069=self.charCodeAt(0);var $6070=self.slice(1);var self = U16$cmp$($6065,$6069);switch(self._){case 'Cmp.ltn':var $6072 = Cmp$ltn;var $6071 = $6072;break;case 'Cmp.eql':var $6073 = String$cmp$($6066,$6070);var $6071 = $6073;break;case 'Cmp.gtn':var $6074 = Cmp$gtn;var $6071 = $6074;break;};var $6067 = $6071;};return $6067;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const String$cmp = x0=>x1=>String$cmp$(x0,x1);function List$any$(_cond$2,_list$3){var List$any$=(_cond$2,_list$3)=>({ctr:'TCO',arg:[_cond$2,_list$3]});var List$any=_cond$2=>_list$3=>List$any$(_cond$2,_list$3);var arg=[_cond$2,_list$3];while(true){let [_cond$2,_list$3]=arg;var R=(()=>{var self = _list$3;switch(self._){case 'List.cons':var $6075=self.head;var $6076=self.tail;var self = _cond$2($6075);if (self) {var $6078 = Bool$true;var $6077 = $6078;} else {var $6079 = List$any$(_cond$2,$6076);var $6077 = $6079;};return $6077;case 'List.nil':var $6080 = Bool$false;return $6080;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const List$any = x0=>x1=>List$any$(x0,x1);function GSet$member$(_cmp$2,_a$3,_set$4){var GSet$member$=(_cmp$2,_a$3,_set$4)=>({ctr:'TCO',arg:[_cmp$2,_a$3,_set$4]});var GSet$member=_cmp$2=>_a$3=>_set$4=>GSet$member$(_cmp$2,_a$3,_set$4);var arg=[_cmp$2,_a$3,_set$4];while(true){let [_cmp$2,_a$3,_set$4]=arg;var R=(()=>{var self = _set$4;switch(self._){case 'GSet.bin':var $6081=self.val;var $6082=self.left;var $6083=self.right;var self = _cmp$2(_a$3)($6081);switch(self._){case 'Cmp.ltn':var $6085 = GSet$member$(_cmp$2,_a$3,$6082);var $6084 = $6085;break;case 'Cmp.eql':var $6086 = Bool$true;var $6084 = $6086;break;case 'Cmp.gtn':var $6087 = GSet$member$(_cmp$2,_a$3,$6083);var $6084 = $6087;break;};return $6084;case 'GSet.tip':var $6088 = Bool$false;return $6088;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const GSet$member = x0=>x1=>x2=>GSet$member$(x0,x1,x2);function Lsp$Ref$new$(_range$1,_name$2){var $6089 = ({_:'Lsp.Ref.new','range':_range$1,'name':_name$2});return $6089;};
 const Lsp$Ref$new = x0=>x1=>Lsp$Ref$new$(x0,x1);function Bits$to_string$(_bits$1){var self = _bits$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $6091=self.slice(0,-1);var $6092 = ("0"+Bits$to_string$($6091));var $6090 = $6092;break;case 'i':var $6093=self.slice(0,-1);var $6094 = ("1"+Bits$to_string$($6093));var $6090 = $6094;break;case 'e':var $6095 = "";var $6090 = $6095;break;};return $6090;};
 const Bits$to_string = x0=>Bits$to_string$(x0);function Map$to_list$(_xs$2){var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2,Bits$e,List$nil));var $6096 = List$mapped$(_kvs$3,(_kv$4=>{var self = _kv$4;switch(self._){case 'Pair.new':var $6098=self.fst;var $6099=self.snd;var $6100 = Pair$new$(Bits$to_string$($6098),$6099);var $6097 = $6100;break;};return $6097;}));return $6096;};
 const Map$to_list = x0=>Map$to_list$(x0);function Lsp$refs$go$(_term$1,_start$2,_end$3){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $6102=self.name;var $6103 = List$cons$(Lsp$Ref$new$(Pair$new$(_start$2,_end$3),Kind$Name$show$($6102)),List$nil);var $6101 = $6103;break;case 'Kind.Term.all':var $6104=self.self;var $6105=self.name;var $6106=self.xtyp;var $6107=self.body;var _type$9 = Lsp$refs$go$($6106,0n,0n);var _body$10 = Lsp$refs$go$($6107(Kind$Term$var$($6104,0n))(Kind$Term$var$($6105,0n)),0n,0n);var $6108 = List$concat$(_type$9,_body$10);var $6101 = $6108;break;case 'Kind.Term.lam':var $6109=self.name;var $6110=self.body;var $6111 = Lsp$refs$go$($6110(Kind$Term$var$($6109,0n)),0n,0n);var $6101 = $6111;break;case 'Kind.Term.app':var $6112=self.func;var $6113=self.argm;var _func$6 = Lsp$refs$go$($6112,0n,0n);var _argm$7 = Lsp$refs$go$($6113,0n,0n);var $6114 = List$concat$(_func$6,_argm$7);var $6101 = $6114;break;case 'Kind.Term.let':var $6115=self.name;var $6116=self.expr;var $6117=self.body;var _expr$7 = Lsp$refs$go$($6116,0n,0n);var _body$8 = Lsp$refs$go$($6117(Kind$Term$var$($6115,0n)),0n,0n);var $6118 = List$concat$(_expr$7,_body$8);var $6101 = $6118;break;case 'Kind.Term.def':var $6119=self.name;var $6120=self.expr;var $6121=self.body;var _expr$7 = Lsp$refs$go$($6120,0n,0n);var _body$8 = Lsp$refs$go$($6121(Kind$Term$var$($6119,0n)),0n,0n);var $6122 = List$concat$(_expr$7,_body$8);var $6101 = $6122;break;case 'Kind.Term.ann':var $6123=self.term;var $6124=self.type;var _term$7 = Lsp$refs$go$($6123,0n,0n);var _type$8 = Lsp$refs$go$($6124,0n,0n);var $6125 = List$concat$(_term$7,_type$8);var $6101 = $6125;break;case 'Kind.Term.cse':var $6126=self.expr;var $6127=self.with;var $6128=self.cses;var $6129=self.moti;var _wyth$10 = List$flatten$(List$mapped$($6127,(_defn$10=>{var self = _defn$10;switch(self._){case 'Kind.Def.new':var $6132=self.term;var $6133=self.type;var _type$20 = Lsp$refs$go$($6133,0n,0n);var _term$21 = Lsp$refs$go$($6132,0n,0n);var $6134 = List$concat$(_term$21,_type$20);var $6131 = $6134;break;};return $6131;})));var _cses$11 = Map$to_list$($6128);var _cses$12 = List$flatten$(List$mapped$(_cses$11,(_x$12=>{var $6135 = Lsp$refs$go$(Pair$snd$(_x$12),0n,0n);return $6135;})));var self = $6129;switch(self._){case 'Maybe.some':var $6136=self.value;var $6137 = Lsp$refs$go$($6136,0n,0n);var _moti$13 = $6137;break;case 'Maybe.none':var $6138 = List$nil;var _moti$13 = $6138;break;};var _expr$14 = Lsp$refs$go$($6126,0n,0n);var $6130 = List$concat$(_wyth$10,List$concat$(_cses$12,List$concat$(_moti$13,_expr$14)));var $6101 = $6130;break;case 'Kind.Term.ori':var $6139=self.orig;var $6140=self.expr;var $6141 = Lsp$refs$go$($6140,Pair$fst$($6139),Pair$snd$($6139));var $6101 = $6141;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var $6142 = List$nil;var $6101 = $6142;break;};return $6101;};
 const Lsp$refs$go = x0=>x1=>x2=>Lsp$refs$go$(x0,x1,x2);function Lsp$refs$(_d$1){var self = _d$1;switch(self._){case 'Kind.Def.new':var $6144=self.term;var $6145=self.type;var $6146 = List$concat$(Lsp$refs$go$($6144,0n,0n),Lsp$refs$go$($6145,0n,0n));var $6143 = $6146;break;};return $6143;};
 const Lsp$refs = x0=>Lsp$refs$(x0);function Lsp$contains_ref$(_names$1,_p$2){var $6147 = List$any$((_ref$3=>{var self = _ref$3;switch(self._){case 'Lsp.Ref.new':var $6149=self.name;var $6150 = GSet$member$(String$cmp,$6149,_names$1);var $6148 = $6150;break;};return $6148;}),Lsp$refs$(_p$2));return $6147;};
 const Lsp$contains_ref = x0=>x1=>Lsp$contains_ref$(x0,x1);function Lsp$mark_as_init$(_names$1,_defs$2){var Lsp$mark_as_init$=(_names$1,_defs$2)=>({ctr:'TCO',arg:[_names$1,_defs$2]});var Lsp$mark_as_init=_names$1=>_defs$2=>Lsp$mark_as_init$(_names$1,_defs$2);var arg=[_names$1,_defs$2];while(true){let [_names$1,_defs$2]=arg;var R=(()=>{var self = _names$1;switch(self._){case 'List.cons':var $6151=self.head;var $6152=self.tail;var self = Kind$Map$get$($6151,_defs$2);switch(self._){case 'Maybe.some':var $6154=self.value;var self = $6154;switch(self._){case 'Kind.Def.new':var $6156=self.file;var $6157=self.code;var $6158=self.orig;var $6159=self.name;var $6160=self.term;var $6161=self.type;var $6162=self.isct;var $6163=self.arit;var _defs$15 = Kind$Map$set$($6159,Kind$Def$new$($6156,$6157,$6158,$6159,$6160,$6161,$6162,$6163,Kind$Status$init),_defs$2);var $6164 = Lsp$mark_as_init$($6152,_defs$15);var $6155 = $6164;break;};var $6153 = $6155;break;case 'Maybe.none':var $6165 = Lsp$mark_as_init$($6152,_defs$2);var $6153 = $6165;break;};return $6153;case 'List.nil':var $6166 = _defs$2;return $6166;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
 const Lsp$mark_as_init = x0=>x1=>Lsp$mark_as_init$(x0,x1);function Lsp$on_change$(_uri$1,_content$2,_defs$3){var _parsed$4 = Kind$Parser$file$(_uri$1,_content$2,Kind$Map$new,0n,_content$2);var self = _parsed$4;switch(self._){case 'Parser.Reply.error':var $6168=self.idx;var $6169=self.err;var _diagnostics$8 = List$cons$(Lsp$Diagnostic$new$($6169,Lsp$DiagnosticSeverity$Error,_uri$1,(Number($6168)),(Number($6168))),List$nil);var $6170 = Pair$new$(_defs$3,_diagnostics$8);var $6167 = $6170;break;case 'Parser.Reply.value':var $6171=self.val;var _existingDefs$8 = Lsp$defs$(_defs$3,_uri$1);var _namesToDelete$9 = List$map$((_x$9=>{var self = _x$9;switch(self._){case 'Kind.Def.new':var $6174=self.name;var $6175 = $6174;var $6173 = $6175;break;};return $6173;}),_existingDefs$8);var _otherDefs$10 = (()=>{var $6177 = _defs$3;var $6178 = _namesToDelete$9;let _m$11=$6177;let _d$10;while ($6178._==='List.cons') {_d$10=$6178.head;var $6177 = BitsMap$delete$((kind_name_to_bits(_d$10)),_m$11);_m$11=$6177;$6178=$6178.tail;}return _m$11;})();var _currentDefs$11 = BitsMap$union$($6171,_otherDefs$10);var _defsToCheck$12 = List$mapped$(BitsMap$keys$($6171),Kind$Name$from_bits);var _affectedNames$13 = GSet$from_list$(String$cmp,List$concat$(_namesToDelete$9,_defsToCheck$12));var _rdepTerms$14 = List$filter$(Lsp$contains_ref(_affectedNames$13),BitsMap$values$(_otherDefs$10));var _rdeps$15 = List$map$((_x$15=>{var self = _x$15;switch(self._){case 'Kind.Def.new':var $6180=self.name;var $6181 = $6180;var $6179 = $6181;break;};return $6179;}),_rdepTerms$14);var _checkNames$16 = List$concat$(_defsToCheck$12,_rdeps$15);var _checked$17 = IO$purify$(Kind$Synth$many$(_checkNames$16,Lsp$mark_as_init$(_rdeps$15,_currentDefs$11)));var $6172 = Pair$new$(_checked$17,Lsp$diagnostics$(_checked$17));var $6167 = $6172;break;};return $6167;};
 const Lsp$on_change = x0=>x1=>x2=>Lsp$on_change$(x0,x1,x2);function Lsp$definition$(_uri$1,_offset$2,_defs$3){var _ds$4 = Lsp$defs$(_defs$3,_uri$1);var _references$5 = List$flatten$(List$map$((_x$5=>{var $6183 = Lsp$refs$(_x$5);return $6183;}),_ds$4));var _matches$6 = List$filter$((_x$6=>{var self = _x$6;switch(self._){case 'Lsp.Ref.new':var $6185=self.range;var $6186 = ((_offset$2>=Pair$fst$($6185))&&(_offset$2<=Pair$snd$($6185)));var $6184 = $6186;break;};return $6184;}),_references$5);var self = _matches$6;switch(self._){case 'List.cons':var $6187=self.head;var self = $6187;switch(self._){case 'Lsp.Ref.new':var $6189=self.name;var $6190 = Kind$Map$get$(Kind$Name$read$($6189),_defs$3);var $6188 = $6190;break;};var $6182 = $6188;break;case 'List.nil':var $6191 = Maybe$none;var $6182 = $6191;break;};return $6182;};
 const Lsp$definition = x0=>x1=>x2=>Lsp$definition$(x0,x1,x2);function Lsp$Completion$new$(_label$1,_kind$2,_data$3){var $6192 = ({_:'Lsp.Completion.new','label':_label$1,'kind':_kind$2,'data':_data$3});return $6192;};
 const Lsp$Completion$new = x0=>x1=>x2=>Lsp$Completion$new$(x0,x1,x2); const CompletionItemKind$Function = 3;
function Lsp$on_completions$(_uri$1,_position$2,_defs$3){var _names$4 = List$map$(Kind$Name$from_bits,BitsMap$keys$(_defs$3));var $6193 = List$map$((_x$5=>{var $6194 = Lsp$Completion$new$(_x$5,CompletionItemKind$Function,_x$5);return $6194;}),_names$4);return $6193;};
 const Lsp$on_completions = x0=>x1=>x2=>Lsp$on_completions$(x0,x1,x2);function maybe_with_result$(_type$1,_result$2){var self = _type$1;switch(self._){case 'Maybe.some':var $6196=self.value;var $6197 = Maybe$some$(Pair$new$($6196,_result$2));var $6195 = $6197;break;case 'Maybe.none':var $6198 = Maybe$none;var $6195 = $6198;break;};return $6195;};
 const maybe_with_result = x0=>x1=>maybe_with_result$(x0,x1);function Lsp$HoverRef$new$(_range$1,_term$2,_type$3){var $6199 = ({_:'Lsp.HoverRef.new','range':_range$1,'term':_term$2,'type':_type$3});return $6199;};
 const Lsp$HoverRef$new = x0=>x1=>x2=>Lsp$HoverRef$new$(x0,x1,x2);function check$(_term$1,_type$2,_defs$3,_ctx$4,_path$5,_orig$6,_offset$7,_result$8){var self = _term$1;switch(self._){case 'Kind.Term.var':var $6201=self.name;var $6202=self.indx;var self = List$at_last$($6202,_ctx$4);switch(self._){case 'Maybe.some':var $6204=self.value;var $6205 = Kind$Check$result$(Maybe$some$((()=>{var self = $6204;switch(self._){case 'Pair.new':var $6206=self.snd;var $6207 = Pair$new$($6206,List$append$(_result$8,Lsp$HoverRef$new$(_orig$6,_term$1,Maybe$some$($6206))));return $6207;};})()),List$nil);var $6203 = $6205;break;case 'Maybe.none':var $6208 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$undefined_reference$(_orig$6,$6201),List$nil));var $6203 = $6208;break;};var $6200 = $6203;break;case 'Kind.Term.ref':var $6209=self.name;var self = Kind$Map$get$($6209,_defs$3);switch(self._){case 'Maybe.some':var $6211=self.value;var self = $6211;switch(self._){case 'Kind.Def.new':var $6213=self.name;var $6214=self.term;var $6215=self.type;var $6216=self.stat;var _ref_name$20 = $6213;var _ref_type$21 = $6215;var _ref_term$22 = $6214;var _ref_stat$23 = $6216;var _hover$24 = List$append$(_result$8,Lsp$HoverRef$new$(_orig$6,_term$1,Maybe$some$(_ref_type$21)));var self = _ref_stat$23;switch(self._){case 'Kind.Status.init':var $6218 = Kind$Check$result$(Maybe$some$(Pair$new$(_ref_type$21,_hover$24)),List$cons$(Kind$Error$waiting$(_ref_name$20),List$nil));var $6217 = $6218;break;case 'Kind.Status.wait':case 'Kind.Status.done':var $6219 = Kind$Check$result$(Maybe$some$(Pair$new$(_ref_type$21,_hover$24)),List$nil);var $6217 = $6219;break;case 'Kind.Status.fail':var $6220 = Kind$Check$result$(Maybe$some$(Pair$new$(_ref_type$21,_hover$24)),List$cons$(Kind$Error$indirect$(_ref_name$20),List$nil));var $6217 = $6220;break;};var $6212 = $6217;break;};var $6210 = $6212;break;case 'Maybe.none':var $6221 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$undefined_reference$(_orig$6,$6209),List$nil));var $6210 = $6221;break;};var $6200 = $6210;break;case 'Kind.Term.all':var $6222=self.self;var $6223=self.name;var $6224=self.xtyp;var $6225=self.body;var _ctx_size$14 = (list_length(_ctx$4));var _self_var$15 = Kind$Term$var$($6222,_ctx_size$14);var _body_var$16 = Kind$Term$var$($6223,Nat$succ$(_ctx_size$14));var _body_ctx$17 = List$cons$(Pair$new$($6223,$6224),List$cons$(Pair$new$($6222,_term$1),_ctx$4));var self = check$($6224,Maybe$some$(Kind$Term$typ),_defs$3,_ctx$4,Kind$MPath$o$(_path$5),Maybe$none,_offset$7,_result$8);switch(self._){case 'Kind.Check.result':var $6227=self.value;var $6228=self.errors;var self = $6227;switch(self._){case 'Maybe.some':var $6230=self.value;var self = check$($6225(_self_var$15)(_body_var$16),Maybe$some$(Kind$Term$typ),_defs$3,_body_ctx$17,Kind$MPath$i$(_path$5),Maybe$none,_offset$7,Pair$snd$($6230));switch(self._){case 'Kind.Check.result':var $6232=self.value;var $6233=self.errors;var self = $6232;switch(self._){case 'Maybe.some':var $6235=self.value;var self = Kind$Check$result$(Maybe$some$(Pair$new$(Kind$Term$typ,Pair$snd$($6235))),List$nil);switch(self._){case 'Kind.Check.result':var $6237=self.value;var $6238=self.errors;var $6239 = Kind$Check$result$($6237,List$concat$($6233,$6238));var $6236 = $6239;break;};var $6234 = $6236;break;case 'Maybe.none':var $6240 = Kind$Check$result$(Maybe$none,$6233);var $6234 = $6240;break;};var self = $6234;break;};switch(self._){case 'Kind.Check.result':var $6241=self.value;var $6242=self.errors;var $6243 = Kind$Check$result$($6241,List$concat$($6228,$6242));var $6231 = $6243;break;};var $6229 = $6231;break;case 'Maybe.none':var $6244 = Kind$Check$result$(Maybe$none,$6228);var $6229 = $6244;break;};var $6226 = $6229;break;};var $6200 = $6226;break;case 'Kind.Term.lam':var $6245=self.name;var $6246=self.body;var self = _type$2;switch(self._){case 'Maybe.some':var $6248=self.value;var _typv$12 = Kind$Term$reduce$($6248,_defs$3);var self = _typv$12;switch(self._){case 'Kind.Term.all':var $6250=self.xtyp;var $6251=self.body;var _ctx_size$18 = (list_length(_ctx$4));var _self_var$19 = _term$1;var _body_var$20 = Kind$Term$var$($6245,_ctx_size$18);var _body_typ$21 = $6251(_self_var$19)(_body_var$20);var _body_ctx$22 = List$cons$(Pair$new$($6245,$6250),_ctx$4);var self = check$($6246(_body_var$20),Maybe$some$(_body_typ$21),_defs$3,_body_ctx$22,Kind$MPath$o$(_path$5),Maybe$none,_offset$7,_result$8);switch(self._){case 'Kind.Check.result':var $6253=self.value;var $6254=self.errors;var self = $6253;switch(self._){case 'Maybe.some':var $6256=self.value;var self = Kind$Check$result$(Maybe$some$(Pair$new$($6248,Pair$snd$($6256))),List$nil);switch(self._){case 'Kind.Check.result':var $6258=self.value;var $6259=self.errors;var $6260 = Kind$Check$result$($6258,List$concat$($6254,$6259));var $6257 = $6260;break;};var $6255 = $6257;break;case 'Maybe.none':var $6261 = Kind$Check$result$(Maybe$none,$6254);var $6255 = $6261;break;};var $6252 = $6255;break;};var $6249 = $6252;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.ori':var _expected$15 = Either$left$("(function type)");var _detected$16 = Either$right$($6248);var $6262 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$15,_detected$16,_ctx$4),List$nil));var $6249 = $6262;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var _expected$14 = Either$left$("(function type)");var _detected$15 = Either$right$($6248);var $6263 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$14,_detected$15,_ctx$4),List$nil));var $6249 = $6263;break;case 'Kind.Term.typ':var _expected$13 = Either$left$("(function type)");var _detected$14 = Either$right$($6248);var $6264 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$13,_detected$14,_ctx$4),List$nil));var $6249 = $6264;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var _expected$16 = Either$left$("(function type)");var _detected$17 = Either$right$($6248);var $6265 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$16,_detected$17,_ctx$4),List$nil));var $6249 = $6265;break;case 'Kind.Term.cse':var _expected$19 = Either$left$("(function type)");var _detected$20 = Either$right$($6248);var $6266 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$19,_detected$20,_ctx$4),List$nil));var $6249 = $6266;break;};var $6247 = $6249;break;case 'Maybe.none':var _lam_type$11 = Kind$Term$hol$(Bits$e);var _lam_term$12 = Kind$Term$ann$(Bool$false,_term$1,_lam_type$11);var $6267 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5),_lam_term$12),List$nil));var $6247 = $6267;break;};var $6200 = $6247;break;case 'Kind.Term.app':var $6268=self.func;var $6269=self.argm;var self = check$($6268,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),Maybe$none,_offset$7,_result$8);switch(self._){case 'Kind.Check.result':var $6271=self.value;var $6272=self.errors;var self = $6271;switch(self._){case 'Maybe.some':var $6274=self.value;var _func_typ$14 = Kind$Term$reduce$(Pair$fst$($6274),_defs$3);var self = _func_typ$14;switch(self._){case 'Kind.Term.all':var $6276=self.xtyp;var $6277=self.body;var self = check$($6269,Maybe$some$($6276),_defs$3,_ctx$4,Kind$MPath$i$(_path$5),Maybe$none,_offset$7,Pair$snd$($6274));switch(self._){case 'Kind.Check.result':var $6279=self.value;var $6280=self.errors;var self = $6279;switch(self._){case 'Maybe.some':var $6282=self.value;var _body_typ$23 = $6277($6268)($6269);var self = Kind$Check$result$(Maybe$some$(Pair$new$(_body_typ$23,List$append$(Pair$snd$($6282),Lsp$HoverRef$new$(_orig$6,_term$1,Maybe$some$(Pair$fst$($6282)))))),List$nil);switch(self._){case 'Kind.Check.result':var $6284=self.value;var $6285=self.errors;var $6286 = Kind$Check$result$($6284,List$concat$($6280,$6285));var $6283 = $6286;break;};var $6281 = $6283;break;case 'Maybe.none':var $6287 = Kind$Check$result$(Maybe$none,$6280);var $6281 = $6287;break;};var $6278 = $6281;break;};var self = $6278;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.ori':var _expected$17 = Either$left$("(function type)");var _detected$18 = Either$right$(_func_typ$14);var $6288 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$17,_detected$18,_ctx$4),List$nil));var self = $6288;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var _expected$16 = Either$left$("(function type)");var _detected$17 = Either$right$(_func_typ$14);var $6289 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$16,_detected$17,_ctx$4),List$nil));var self = $6289;break;case 'Kind.Term.typ':var _expected$15 = Either$left$("(function type)");var _detected$16 = Either$right$(_func_typ$14);var $6290 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$15,_detected$16,_ctx$4),List$nil));var self = $6290;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':var _expected$18 = Either$left$("(function type)");var _detected$19 = Either$right$(_func_typ$14);var $6291 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$18,_detected$19,_ctx$4),List$nil));var self = $6291;break;case 'Kind.Term.cse':var _expected$21 = Either$left$("(function type)");var _detected$22 = Either$right$(_func_typ$14);var $6292 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$21,_detected$22,_ctx$4),List$nil));var self = $6292;break;};switch(self._){case 'Kind.Check.result':var $6293=self.value;var $6294=self.errors;var $6295 = Kind$Check$result$($6293,List$concat$($6272,$6294));var $6275 = $6295;break;};var $6273 = $6275;break;case 'Maybe.none':var $6296 = Kind$Check$result$(Maybe$none,$6272);var $6273 = $6296;break;};var $6270 = $6273;break;};var $6200 = $6270;break;case 'Kind.Term.let':var $6297=self.name;var $6298=self.expr;var $6299=self.body;var _ctx_size$12 = (list_length(_ctx$4));var self = check$($6298,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),Maybe$none,_offset$7,_result$8);switch(self._){case 'Kind.Check.result':var $6301=self.value;var $6302=self.errors;var self = $6301;switch(self._){case 'Maybe.some':var $6304=self.value;var _body_val$16 = $6299(Kind$Term$var$($6297,_ctx_size$12));var _body_ctx$17 = List$cons$(Pair$new$($6297,Pair$fst$($6304)),_ctx$4);var self = check$(_body_val$16,_type$2,_defs$3,_body_ctx$17,Kind$MPath$i$(_path$5),Maybe$none,_offset$7,Pair$snd$($6304));switch(self._){case 'Kind.Check.result':var $6306=self.value;var $6307=self.errors;var self = $6306;switch(self._){case 'Maybe.some':var $6309=self.value;var self = Kind$Check$result$(Maybe$some$(Pair$new$(Pair$fst$($6309),Pair$snd$($6309))),List$nil);switch(self._){case 'Kind.Check.result':var $6311=self.value;var $6312=self.errors;var $6313 = Kind$Check$result$($6311,List$concat$($6307,$6312));var $6310 = $6313;break;};var $6308 = $6310;break;case 'Maybe.none':var $6314 = Kind$Check$result$(Maybe$none,$6307);var $6308 = $6314;break;};var self = $6308;break;};switch(self._){case 'Kind.Check.result':var $6315=self.value;var $6316=self.errors;var $6317 = Kind$Check$result$($6315,List$concat$($6302,$6316));var $6305 = $6317;break;};var $6303 = $6305;break;case 'Maybe.none':var $6318 = Kind$Check$result$(Maybe$none,$6302);var $6303 = $6318;break;};var $6300 = $6303;break;};var $6200 = $6300;break;case 'Kind.Term.def':var $6319=self.name;var $6320=self.expr;var $6321=self.body;var _ctx_size$12 = (list_length(_ctx$4));var self = check$($6320,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),Maybe$none,_offset$7,_result$8);switch(self._){case 'Kind.Check.result':var $6323=self.value;var $6324=self.errors;var self = $6323;switch(self._){case 'Maybe.some':var $6326=self.value;var _body_val$16 = $6321(Kind$Term$ann$(Bool$true,$6320,Pair$fst$($6326)));var _body_ctx$17 = List$cons$(Pair$new$($6319,Pair$fst$($6326)),_ctx$4);var self = check$(_body_val$16,_type$2,_defs$3,_body_ctx$17,Kind$MPath$i$(_path$5),Maybe$none,_offset$7,Pair$snd$($6326));switch(self._){case 'Kind.Check.result':var $6328=self.value;var $6329=self.errors;var self = $6328;switch(self._){case 'Maybe.some':var $6331=self.value;var self = Kind$Check$result$(Maybe$some$(Pair$new$(Pair$fst$($6331),Pair$snd$($6331))),List$nil);switch(self._){case 'Kind.Check.result':var $6333=self.value;var $6334=self.errors;var $6335 = Kind$Check$result$($6333,List$concat$($6329,$6334));var $6332 = $6335;break;};var $6330 = $6332;break;case 'Maybe.none':var $6336 = Kind$Check$result$(Maybe$none,$6329);var $6330 = $6336;break;};var self = $6330;break;};switch(self._){case 'Kind.Check.result':var $6337=self.value;var $6338=self.errors;var $6339 = Kind$Check$result$($6337,List$concat$($6324,$6338));var $6327 = $6339;break;};var $6325 = $6327;break;case 'Maybe.none':var $6340 = Kind$Check$result$(Maybe$none,$6324);var $6325 = $6340;break;};var $6322 = $6325;break;};var $6200 = $6322;break;case 'Kind.Term.ann':var $6341=self.done;var $6342=self.term;var $6343=self.type;var self = $6341;if (self) {var $6345 = Kind$Check$result$(Maybe$some$(Pair$new$($6343,_result$8)),List$nil);var $6344 = $6345;} else {var self = check$($6342,Maybe$some$($6343),_defs$3,_ctx$4,Kind$MPath$o$(_path$5),Maybe$none,_offset$7,_result$8);switch(self._){case 'Kind.Check.result':var $6347=self.value;var $6348=self.errors;var self = $6347;switch(self._){case 'Maybe.some':var $6350=self.value;var self = check$($6343,Maybe$some$(Kind$Term$typ),_defs$3,_ctx$4,Kind$MPath$i$(_path$5),Maybe$none,_offset$7,Pair$snd$($6350));switch(self._){case 'Kind.Check.result':var $6352=self.value;var $6353=self.errors;var self = $6352;switch(self._){case 'Maybe.some':var $6355=self.value;var self = Kind$Check$result$(Maybe$some$(Pair$new$($6343,Pair$snd$($6355))),List$nil);switch(self._){case 'Kind.Check.result':var $6357=self.value;var $6358=self.errors;var $6359 = Kind$Check$result$($6357,List$concat$($6353,$6358));var $6356 = $6359;break;};var $6354 = $6356;break;case 'Maybe.none':var $6360 = Kind$Check$result$(Maybe$none,$6353);var $6354 = $6360;break;};var self = $6354;break;};switch(self._){case 'Kind.Check.result':var $6361=self.value;var $6362=self.errors;var $6363 = Kind$Check$result$($6361,List$concat$($6348,$6362));var $6351 = $6363;break;};var $6349 = $6351;break;case 'Maybe.none':var $6364 = Kind$Check$result$(Maybe$none,$6348);var $6349 = $6364;break;};var $6346 = $6349;break;};var $6344 = $6346;};var $6200 = $6344;break;case 'Kind.Term.gol':var $6365=self.name;var $6366=self.dref;var $6367=self.verb;var $6368 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$show_goal$(_orig$6,$6365,$6366,$6367,_type$2,_ctx$4),List$nil));var $6200 = $6368;break;case 'Kind.Term.cse':var $6369=self.path;var $6370=self.expr;var $6371=self.name;var $6372=self.with;var $6373=self.cses;var $6374=self.moti;var _expr$15 = $6370;var self = check$(_expr$15,Maybe$none,_defs$3,_ctx$4,Kind$MPath$o$(_path$5),Maybe$none,_offset$7,_result$8);switch(self._){case 'Kind.Check.result':var $6376=self.value;var $6377=self.errors;var self = $6376;switch(self._){case 'Maybe.some':var $6379=self.value;var self = $6374;switch(self._){case 'Maybe.some':var $6381=self.value;var $6382 = Kind$Term$desugar_cse$($6370,$6371,$6372,$6373,$6381,Pair$fst$($6379),_defs$3,_ctx$4);var _dsug$19 = $6382;break;case 'Maybe.none':var self = _type$2;switch(self._){case 'Maybe.some':var $6384=self.value;var _size$20 = (list_length(_ctx$4));var _typv$21 = Kind$Term$normalize$($6384,BitsMap$new);var _moti$22 = Kind$SmartMotive$make$($6371,$6370,Pair$fst$($6379),_typv$21,_size$20,_defs$3);var $6385 = _moti$22;var _moti$19 = $6385;break;case 'Maybe.none':var $6386 = Kind$Term$hol$(Bits$e);var _moti$19 = $6386;break;};var $6383 = Maybe$some$(Kind$Term$cse$($6369,$6370,$6371,$6372,$6373,Maybe$some$(_moti$19)));var _dsug$19 = $6383;break;};var self = _dsug$19;switch(self._){case 'Maybe.some':var $6387=self.value;var $6388 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5),$6387),List$nil));var self = $6388;break;case 'Maybe.none':var $6389 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$cons$(Kind$Error$cant_infer$(_orig$6,_term$1,_ctx$4),List$nil));var self = $6389;break;};switch(self._){case 'Kind.Check.result':var $6390=self.value;var $6391=self.errors;var $6392 = Kind$Check$result$($6390,List$concat$($6377,$6391));var $6380 = $6392;break;};var $6378 = $6380;break;case 'Maybe.none':var $6393 = Kind$Check$result$(Maybe$none,$6377);var $6378 = $6393;break;};var $6375 = $6378;break;};var $6200 = $6375;break;case 'Kind.Term.ori':var $6394=self.orig;var $6395=self.expr;var $6396 = check$($6395,_type$2,_defs$3,_ctx$4,_path$5,Maybe$some$($6394),_offset$7,_result$8);var $6200 = $6396;break;case 'Kind.Term.typ':var $6397 = Kind$Check$result$(Maybe$some$(Pair$new$(Kind$Term$typ,List$append$(_result$8,Lsp$HoverRef$new$(_orig$6,_term$1,Maybe$some$(Kind$Term$typ))))),List$nil);var $6200 = $6397;break;case 'Kind.Term.hol':var $6398 = Kind$Check$result$(maybe_with_result$(_type$2,_result$8),List$nil);var $6200 = $6398;break;case 'Kind.Term.nat':var $6399 = Kind$Check$result$(Maybe$some$(Pair$new$(Kind$Term$ref$("Nat"),List$append$(_result$8,Lsp$HoverRef$new$(_orig$6,_term$1,Maybe$some$(Kind$Term$ref$("Nat")))))),List$nil);var $6200 = $6399;break;case 'Kind.Term.chr':var $6400 = Kind$Check$result$(Maybe$some$(Pair$new$(Kind$Term$ref$("Char"),List$append$(_result$8,Lsp$HoverRef$new$(_orig$6,_term$1,Maybe$some$(Kind$Term$ref$("Char")))))),List$nil);var $6200 = $6400;break;case 'Kind.Term.str':var $6401 = Kind$Check$result$(Maybe$some$(Pair$new$(Kind$Term$ref$("String"),List$append$(_result$8,Lsp$HoverRef$new$(_orig$6,_term$1,Maybe$some$(Kind$Term$ref$("String")))))),List$nil);var $6200 = $6401;break;};return $6200;};
 const check = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>check$(x0,x1,x2,x3,x4,x5,x6,x7);function Lsp$hover_info$(_d$1,_defs$2,_offset$3){var self = _d$1;switch(self._){case 'Kind.Def.new':var $6403=self.term;var $6404=self.type;var self = check$($6404,Maybe$some$(Kind$Term$typ),_defs$2,List$nil,Kind$MPath$i$(Kind$MPath$nil),Maybe$none,_offset$3,List$nil);switch(self._){case 'Kind.Check.result':var $6406=self.value;var $6407=self.errors;var self = $6406;switch(self._){case 'Maybe.some':var $6409=self.value;var self = check$($6403,Maybe$some$($6404),_defs$2,List$nil,Kind$MPath$o$(Kind$MPath$nil),Maybe$none,_offset$3,List$nil);switch(self._){case 'Kind.Check.result':var $6411=self.value;var $6412=self.errors;var self = $6411;switch(self._){case 'Maybe.some':var $6414=self.value;var _result$19 = List$concat$(Pair$snd$($6409),Pair$snd$($6414));var self = Kind$Check$result$(Maybe$some$(Pair$new$(Pair$fst$($6409),_result$19)),List$nil);switch(self._){case 'Kind.Check.result':var $6416=self.value;var $6417=self.errors;var $6418 = Kind$Check$result$($6416,List$concat$($6412,$6417));var $6415 = $6418;break;};var $6413 = $6415;break;case 'Maybe.none':var $6419 = Kind$Check$result$(Maybe$none,$6412);var $6413 = $6419;break;};var self = $6413;break;};switch(self._){case 'Kind.Check.result':var $6420=self.value;var $6421=self.errors;var $6422 = Kind$Check$result$($6420,List$concat$($6407,$6421));var $6410 = $6422;break;};var $6408 = $6410;break;case 'Maybe.none':var $6423 = Kind$Check$result$(Maybe$none,$6407);var $6408 = $6423;break;};var _checked$13 = $6408;break;};var self = _checked$13;switch(self._){case 'Kind.Check.result':var $6424=self.value;var self = $6424;switch(self._){case 'Maybe.some':var $6426=self.value;var $6427 = Pair$snd$($6426);var $6425 = $6427;break;case 'Maybe.none':var $6428 = List$nil;var $6425 = $6428;break;};var $6405 = $6425;break;};var $6402 = $6405;break;};return $6402;};
 const Lsp$hover_info = x0=>x1=>x2=>Lsp$hover_info$(x0,x1,x2);function Lsp$on_hover$(_uri$1,_offset$2,_defs$3){var _ds$4 = Lsp$defs$(_defs$3,_uri$1);var $6429 = List$flatten$(List$map$((_x$5=>{var $6430 = Lsp$hover_info$(_x$5,_defs$3,_offset$2);return $6430;}),_ds$4));return $6429;};
 const Lsp$on_hover = x0=>x1=>x2=>Lsp$on_hover$(x0,x1,x2); const Kind = (()=>{var __$1 = Kind$to_core$io$one;var __$2 = Kind$checker$io$one;var __$3 = Kind$checker$io$file;var __$4 = Kind$checker$code;var __$5 = Kind$Term$read;var __$6 = Lsp$diagnostics;var __$7 = Lsp$on_change;var __$8 = Lsp$definition;var __$9 = Lsp$on_completions;var __$10 = Lsp$on_hover;var $6431 = IO$monad$((_m$bind$11=>_m$pure$12=>{var $6432 = _m$pure$12;return $6432;}))(Unit$new);return $6431;})();
  return {
    '$main$': ()=>run(Kind),
    'run': run,
    'IO': IO,
    'IO.ask': IO$ask,
    'IO.bind': IO$bind,
    'IO.end': IO$end,
    'IO.monad': IO$monad,
    'Maybe': Maybe,
    'BitsMap': BitsMap,
    'Maybe.none': Maybe$none,
    'BitsMap.get': BitsMap$get,
    'Bits.e': Bits$e,
    'Bool.false': Bool$false,
    'Bool.and': Bool$and,
    'Bool.true': Bool$true,
    'Cmp.as_lte': Cmp$as_lte,
    'Cmp.ltn': Cmp$ltn,
    'Cmp.gtn': Cmp$gtn,
    'Word.cmp.go': Word$cmp$go,
    'Cmp.eql': Cmp$eql,
    'Word.cmp': Word$cmp,
    'Word.lte': Word$lte,
    'Nat.succ': Nat$succ,
    'Nat.zero': Nat$zero,
    'U16.lte': U16$lte,
    'U16.btw': U16$btw,
    'U16.new': U16$new,
    'Word.e': Word$e,
    'Word': Word,
    'Word.i': Word$i,
    'Word.o': Word$o,
    'Word.subber': Word$subber,
    'Word.sub': Word$sub,
    'U16.sub': U16$sub,
    'Nat.apply': Nat$apply,
    'Word.inc': Word$inc,
    'U16.inc': U16$inc,
    'Word.zero': Word$zero,
    'U16.zero': U16$zero,
    'Nat.to_u16': Nat$to_u16,
    'Word.adder': Word$adder,
    'Word.add': Word$add,
    'U16.add': U16$add,
    'Cmp.as_eql': Cmp$as_eql,
    'Word.eql': Word$eql,
    'U16.eql': U16$eql,
    'Bits.o': Bits$o,
    'Bits.i': Bits$i,
    'Word.to_bits': Word$to_bits,
    'Word.trim': Word$trim,
    'Bits.concat': Bits$concat,
    'Bits.reverse.tco': Bits$reverse$tco,
    'Bits.reverse': Bits$reverse,
    'Kind.Name.to_bits': Kind$Name$to_bits,
    'Kind.Map.get': Kind$Map$get,
    'IO.get_file': IO$get_file,
    'Parser.Reply': Parser$Reply,
    'Parser.Reply.value': Parser$Reply$value,
    'Parser.is_eof': Parser$is_eof,
    'Parser.Reply.error': Parser$Reply$error,
    'Parser': Parser,
    'Maybe.some': Maybe$some,
    'Parser.ErrorAt.new': Parser$ErrorAt$new,
    'Nat.gtn': Nat$gtn,
    'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
    'Parser.first_of.go': Parser$first_of$go,
    'Parser.first_of': Parser$first_of,
    'List.cons': List$cons,
    'List': List,
    'List.nil': List$nil,
    'Parser.many.go': Parser$many$go,
    'Parser.many': Parser$many,
    'Unit.new': Unit$new,
    'String.cons': String$cons,
    'String.concat': String$concat,
    'String.flatten.go': String$flatten$go,
    'String.flatten': String$flatten,
    'String.nil': String$nil,
    'Parser.text.go': Parser$text$go,
    'Parser.text': Parser$text,
    'List.reverse.go': List$reverse$go,
    'List.reverse': List$reverse,
    'Parser.until.go': Parser$until$go,
    'Parser.until': Parser$until,
    'Parser.one': Parser$one,
    'Kind.Parser.spaces': Kind$Parser$spaces,
    'Parser.get_index': Parser$get_index,
    'Kind.Parser.init': Kind$Parser$init,
    'Parser.many1': Parser$many1,
    'Kind.Name.is_letter': Kind$Name$is_letter,
    'Kind.Parser.letter': Kind$Parser$letter,
    'List.fold': List$fold,
    'Kind.Parser.name1': Kind$Parser$name1,
    'Kind.Parser.text': Kind$Parser$text,
    'Parser.until1': Parser$until1,
    'Pair': Pair,
    'Parser.maybe': Parser$maybe,
    'Kind.Parser.item': Kind$Parser$item,
    'Kind.Parser.name': Kind$Parser$name,
    'Kind.Term.all': Kind$Term$all,
    'Pair.new': Pair$new,
    'Kind.Parser.stop': Kind$Parser$stop,
    'Kind.Term.ori': Kind$Term$ori,
    'Kind.Parser.forall': Kind$Parser$forall,
    'Kind.Term.lam': Kind$Term$lam,
    'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
    'Kind.Parser.lambda': Kind$Parser$lambda,
    'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
    'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
    'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
    'Kind.Term.ref': Kind$Term$ref,
    'Kind.Term.app': Kind$Term$app,
    'Kind.Term.hol': Kind$Term$hol,
    'Kind.Term.let': Kind$Term$let,
    'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
    'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
    'Kind.Parser.letforin': Kind$Parser$letforin,
    'Kind.Parser.let': Kind$Parser$let,
    'Kind.Parser.get': Kind$Parser$get,
    'Kind.Term.def': Kind$Term$def,
    'Kind.Parser.def': Kind$Parser$def,
    'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
    'Kind.Parser.if': Kind$Parser$if,
    'List.mapped': List$mapped,
    'Kind.backslash': Kind$backslash,
    'Kind.escapes': Kind$escapes,
    'Kind.Parser.char.single': Kind$Parser$char$single,
    'Kind.Term.chr': Kind$Term$chr,
    'Kind.Parser.char': Kind$Parser$char,
    'String.reverse.go': String$reverse$go,
    'String.reverse': String$reverse,
    'Kind.Parser.string.go': Kind$Parser$string$go,
    'Kind.Term.str': Kind$Term$str,
    'Kind.Parser.string': Kind$Parser$string,
    'Kind.Parser.pair': Kind$Parser$pair,
    'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
    'Kind.Parser.some': Kind$Parser$some,
    'Kind.Parser.apply': Kind$Parser$apply,
    'Kind.Parser.mirror': Kind$Parser$mirror,
    'Kind.Name.read': Kind$Name$read,
    'Kind.Parser.list': Kind$Parser$list,
    'Kind.Parser.map': Kind$Parser$map,
    'Kind.Parser.log': Kind$Parser$log,
    'Kind.Parser.do.statements': Kind$Parser$do$statements,
    'Kind.Parser.do': Kind$Parser$do,
    'Kind.Term.nat': Kind$Term$nat,
    'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
    'U16.to_bits': U16$to_bits,
    'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
    'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
    'Kind.Term.unroll_str': Kind$Term$unroll_str,
    'Kind.Term.reduce': Kind$Term$reduce,
    'BitsMap.new': BitsMap$new,
    'Kind.Map.new': Kind$Map$new,
    'Kind.Def.new': Kind$Def$new,
    'Kind.Status.init': Kind$Status$init,
    'Kind.Parser.case.with': Kind$Parser$case$with,
    'Kind.Parser.case.case': Kind$Parser$case$case,
    'BitsMap.tie': BitsMap$tie,
    'BitsMap.set': BitsMap$set,
    'BitsMap.from_list': BitsMap$from_list,
    'Kind.Term.cse': Kind$Term$cse,
    'Kind.Parser.case': Kind$Parser$case,
    'Kind.Map.set': Kind$Map$set,
    'Kind.Parser.open': Kind$Parser$open,
    'Kind.Parser.without': Kind$Parser$without,
    'Kind.Parser.switch.case': Kind$Parser$switch$case,
    'Kind.Parser.switch': Kind$Parser$switch,
    'Parser.digit': Parser$digit,
    'Nat.add': Nat$add,
    'Nat.mul': Nat$mul,
    'Nat.from_base.go': Nat$from_base$go,
    'Nat.from_base': Nat$from_base,
    'Parser.nat': Parser$nat,
    'Bits.tail': Bits$tail,
    'Bits.inc': Bits$inc,
    'Nat.to_bits': Nat$to_bits,
    'Maybe.to_bool': Maybe$to_bool,
    'Kind.Term.gol': Kind$Term$gol,
    'Kind.Parser.goal': Kind$Parser$goal,
    'Kind.Parser.hole': Kind$Parser$hole,
    'Kind.Parser.u8': Kind$Parser$u8,
    'Kind.Parser.u16': Kind$Parser$u16,
    'Kind.Parser.u32': Kind$Parser$u32,
    'Kind.Parser.u64': Kind$Parser$u64,
    'Kind.Parser.nat': Kind$Parser$nat,
    'String.eql': String$eql,
    'Parser.fail': Parser$fail,
    'Kind.Term.typ': Kind$Term$typ,
    'Kind.Parser.reference': Kind$Parser$reference,
    'List.for': List$for,
    'Kind.Parser.application': Kind$Parser$application,
    'Parser.spaces': Parser$spaces,
    'Parser.spaces_text': Parser$spaces_text,
    'Kind.Parser.application.erased': Kind$Parser$application$erased,
    'Kind.Parser.arrow': Kind$Parser$arrow,
    'Kind.Parser.op': Kind$Parser$op,
    'Kind.Parser.add': Kind$Parser$add,
    'Kind.Parser.sub': Kind$Parser$sub,
    'Kind.Parser.mul': Kind$Parser$mul,
    'Kind.Parser.div': Kind$Parser$div,
    'Kind.Parser.mod': Kind$Parser$mod,
    'Kind.Parser.cons': Kind$Parser$cons,
    'Kind.Parser.concat': Kind$Parser$concat,
    'Kind.Parser.string_concat': Kind$Parser$string_concat,
    'Kind.Parser.sigma': Kind$Parser$sigma,
    'Kind.Parser.equality': Kind$Parser$equality,
    'Kind.Parser.inequality': Kind$Parser$inequality,
    'Kind.Parser.rewrite': Kind$Parser$rewrite,
    'Kind.Term.ann': Kind$Term$ann,
    'Kind.Parser.annotation': Kind$Parser$annotation,
    'Kind.Parser.application.hole': Kind$Parser$application$hole,
    'Kind.Parser.suffix': Kind$Parser$suffix,
    'Kind.Parser.term': Kind$Parser$term,
    'Kind.Parser.name_term': Kind$Parser$name_term,
    'Kind.Binder.new': Kind$Binder$new,
    'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
    'List.concat': List$concat,
    'List.flatten': List$flatten,
    'Kind.Parser.binder': Kind$Parser$binder,
    'List.length': List$length,
    'Kind.Parser.make_forall': Kind$Parser$make_forall,
    'List.at': List$at,
    'List.at_last': List$at_last,
    'Kind.Term.var': Kind$Term$var,
    'Pair.snd': Pair$snd,
    'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
    'Kind.Name.eql': Kind$Name$eql,
    'Kind.Context.find.go': Kind$Context$find$go,
    'Kind.Context.find': Kind$Context$find,
    'Kind.Path.o': Kind$Path$o,
    'Kind.Path.i': Kind$Path$i,
    'Kind.Path.to_bits': Kind$Path$to_bits,
    'Kind.Term.bind': Kind$Term$bind,
    'Kind.Status.done': Kind$Status$done,
    'Kind.define': Kind$define,
    'Kind.Parser.file.def': Kind$Parser$file$def,
    'Maybe.default': Maybe$default,
    'Kind.Constructor.new': Kind$Constructor$new,
    'Kind.Parser.constructor': Kind$Parser$constructor,
    'Kind.Datatype.new': Kind$Datatype$new,
    'Kind.Parser.datatype': Kind$Parser$datatype,
    'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
    'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
    'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
    'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
    'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
    'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
    'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
    'Kind.Datatype.build_term': Kind$Datatype$build_term,
    'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
    'Kind.Datatype.build_type': Kind$Datatype$build_type,
    'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
    'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
    'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
    'Kind.Constructor.build_term': Kind$Constructor$build_term,
    'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
    'Kind.Constructor.build_type': Kind$Constructor$build_type,
    'Kind.Parser.file.adt': Kind$Parser$file$adt,
    'Parser.eof': Parser$eof,
    'Kind.Parser.file.end': Kind$Parser$file$end,
    'Kind.Parser.file': Kind$Parser$file,
    'Either': Either,
    'String.join.go': String$join$go,
    'String.join': String$join,
    'Kind.highlight.end': Kind$highlight$end,
    'Maybe.extract': Maybe$extract,
    'Nat.is_zero': Nat$is_zero,
    'Nat.double': Nat$double,
    'Nat.pred': Nat$pred,
    'String.pad_right': String$pad_right,
    'String.pad_left': String$pad_left,
    'Either.left': Either$left,
    'Either.right': Either$right,
    'Nat.sub_rem': Nat$sub_rem,
    'Nat.div_mod.go': Nat$div_mod$go,
    'Nat.div_mod': Nat$div_mod,
    'Nat.to_base.go': Nat$to_base$go,
    'Nat.to_base': Nat$to_base,
    'Nat.mod.go': Nat$mod$go,
    'Nat.mod': Nat$mod,
    'Nat.lte': Nat$lte,
    'Nat.show_digit': Nat$show_digit,
    'Nat.to_string_base': Nat$to_string_base,
    'Nat.show': Nat$show,
    'Bool.not': Bool$not,
    'Kind.color': Kind$color,
    'Nat.eql': Nat$eql,
    'List.take': List$take,
    'Kind.highlight.go': Kind$highlight$go,
    'Kind.highlight': Kind$highlight,
    'Kind.Defs.read': Kind$Defs$read,
    'Kind.Synth.load.go': Kind$Synth$load$go,
    'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
    'Char.eql': Char$eql,
    'String.starts_with': String$starts_with,
    'String.drop': String$drop,
    'String.length.go': String$length$go,
    'String.length': String$length,
    'String.split.go': String$split$go,
    'String.split': String$split,
    'Kind.Synth.files_of': Kind$Synth$files_of,
    'Kind.Synth.load': Kind$Synth$load,
    'Kind.Status.wait': Kind$Status$wait,
    'Kind.Check': Kind$Check,
    'Kind.Check.result': Kind$Check$result,
    'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
    'Kind.Error.waiting': Kind$Error$waiting,
    'Kind.Error.indirect': Kind$Error$indirect,
    'Maybe.mapped': Maybe$mapped,
    'Kind.MPath.o': Kind$MPath$o,
    'Kind.MPath.i': Kind$MPath$i,
    'Kind.Error.patch': Kind$Error$patch,
    'Kind.MPath.to_bits': Kind$MPath$to_bits,
    'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
    'Kind.Error.show_goal': Kind$Error$show_goal,
    'Kind.Term.normalize': Kind$Term$normalize,
    'List.tail': List$tail,
    'Kind.SmartMotive.vals.cont': Kind$SmartMotive$vals$cont,
    'Kind.SmartMotive.vals': Kind$SmartMotive$vals,
    'Kind.SmartMotive.nams.cont': Kind$SmartMotive$nams$cont,
    'Kind.SmartMotive.nams': Kind$SmartMotive$nams,
    'List.zip': List$zip,
    'Nat.gte': Nat$gte,
    'Nat.sub': Nat$sub,
    'Kind.Term.serialize.name': Kind$Term$serialize$name,
    'Kind.Term.serialize': Kind$Term$serialize,
    'Bits.eql': Bits$eql,
    'Kind.Term.identical': Kind$Term$identical,
    'Kind.SmartMotive.replace': Kind$SmartMotive$replace,
    'Kind.SmartMotive.make': Kind$SmartMotive$make,
    'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
    'String.is_empty': String$is_empty,
    'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
    'Maybe.or': Maybe$or,
    'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
    'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
    'Kind.Error.cant_infer': Kind$Error$cant_infer,
    'BitsSet.has': BitsSet$has,
    'BitsSet.mut.has': BitsSet$mut$has,
    'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
    'Bool.or': Bool$or,
    'Kind.Term.has_holes': Kind$Term$has_holes,
    'Kind.Term.equal.hole': Kind$Term$equal$hole,
    'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
    'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
    'BitsSet.set': BitsSet$set,
    'BitsSet.mut.set': BitsSet$mut$set,
    'Bool.eql': Bool$eql,
    'Kind.Term.equal': Kind$Term$equal,
    'BitsSet.new': BitsSet$new,
    'BitsSet.mut.new': BitsSet$mut$new,
    'Kind.Term.check': Kind$Term$check,
    'Kind.Path.nil': Kind$Path$nil,
    'Kind.MPath.nil': Kind$MPath$nil,
    'List.is_empty': List$is_empty,
    'Kind.Term.patch_at': Kind$Term$patch_at,
    'Kind.Synth.fix': Kind$Synth$fix,
    'Kind.Status.fail': Kind$Status$fail,
    'Kind.Synth.one': Kind$Synth$one,
    'BitsMap.map': BitsMap$map,
    'Kind.Term.inline.names': Kind$Term$inline$names,
    'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
    'Kind.Term.inline': Kind$Term$inline,
    'BitsMap.values.go': BitsMap$values$go,
    'BitsMap.values': BitsMap$values,
    'Kind.Core.var_name': Kind$Core$var_name,
    'Kind.Name.show': Kind$Name$show,
    'Bits.to_nat': Bits$to_nat,
    'U16.show_hex': U16$show_hex,
    'Kind.escape.char': Kind$escape$char,
    'Kind.escape.go': Kind$escape$go,
    'Kind.escape': Kind$escape,
    'Kind.Core.show': Kind$Core$show,
    'Kind.Defs.core': Kind$Defs$core,
    'Kind.to_core.io.one': Kind$to_core$io$one,
    'IO.put_string': IO$put_string,
    'IO.print': IO$print,
    'Maybe.bind': Maybe$bind,
    'Maybe.monad': Maybe$monad,
    'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
    'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
    'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
    'Kind.Term.show.app.done': Kind$Term$show$app$done,
    'Kind.Term.show.app': Kind$Term$show$app,
    'BitsMap.to_list.go': BitsMap$to_list$go,
    'BitsMap.to_list': BitsMap$to_list,
    'Bits.chunks_of.go': Bits$chunks_of$go,
    'Bits.chunks_of': Bits$chunks_of,
    'Word.from_bits': Word$from_bits,
    'Kind.Name.from_bits': Kind$Name$from_bits,
    'Pair.fst': Pair$fst,
    'Kind.Term.show.go': Kind$Term$show$go,
    'Kind.Term.show': Kind$Term$show,
    'Kind.Defs.report.types': Kind$Defs$report$types,
    'BitsMap.keys.go': BitsMap$keys$go,
    'BitsMap.keys': BitsMap$keys,
    'Kind.Error.relevant': Kind$Error$relevant,
    'Map': Map,
    'String.to_bits': String$to_bits,
    'Map.from_list': Map$from_list,
    'Kind.Context.show': Kind$Context$show,
    'Kind.Term.expand_at': Kind$Term$expand_at,
    'Kind.Term.expand_ct': Kind$Term$expand_ct,
    'Kind.Term.expand': Kind$Term$expand,
    'Kind.Error.show': Kind$Error$show,
    'Kind.Error.origin': Kind$Error$origin,
    'Kind.Defs.report.errors': Kind$Defs$report$errors,
    'Kind.Defs.report': Kind$Defs$report,
    'Kind.checker.io.one': Kind$checker$io$one,
    'Kind.Synth.many': Kind$Synth$many,
    'Kind.Synth.file': Kind$Synth$file,
    'Kind.checker.io.file': Kind$checker$io$file,
    'IO.purify': IO$purify,
    'Kind.checker.code': Kind$checker$code,
    'Kind.Term.read': Kind$Term$read,
    'Lsp.Report.new': Lsp$Report$new,
    'List.pure': List$pure,
    'List.append': List$append,
    'List.map': List$map,
    'Lsp.diagnostics.make_report.go': Lsp$diagnostics$make_report$go,
    'Lsp.diagnostics.make_report': Lsp$diagnostics$make_report,
    'Lsp.Diagnostic.new': Lsp$Diagnostic$new,
    'U32.new': U32$new,
    'U32.inc': U32$inc,
    'U32.zero': U32$zero,
    'Nat.to_u32': Nat$to_u32,
    'Lsp.DiagnosticSeverity.Error': Lsp$DiagnosticSeverity$Error,
    'Lsp.DiagnosticSeverity.Warning': Lsp$DiagnosticSeverity$Warning,
    'Lsp.DiagnosticSeverity.Information': Lsp$DiagnosticSeverity$Information,
    'Lsp.severity': Lsp$severity,
    'Lsp.diagnostics': Lsp$diagnostics,
    'List.filter': List$filter,
    'Lsp.defs': Lsp$defs,
    'BitsMap.delete': BitsMap$delete,
    'BitsMap.union': BitsMap$union,
    'List.foldr': List$foldr,
    'GSet': GSet,
    'GSet.tip': GSet$tip,
    'GSet.bin': GSet$bin,
    'GSet.singleton': GSet$singleton,
    'GSet.size': GSet$size,
    'GSet.w': GSet$w,
    'Nat.ltn': Nat$ltn,
    'List.sum.go': List$sum$go,
    'List.sum': List$sum,
    'GSet.node': GSet$node,
    'GSet.balance': GSet$balance,
    'GSet.insert': GSet$insert,
    'GSet.from_list': GSet$from_list,
    'U16.cmp': U16$cmp,
    'String.cmp': String$cmp,
    'List.any': List$any,
    'GSet.member': GSet$member,
    'Lsp.Ref.new': Lsp$Ref$new,
    'Bits.to_string': Bits$to_string,
    'Map.to_list': Map$to_list,
    'Lsp.refs.go': Lsp$refs$go,
    'Lsp.refs': Lsp$refs,
    'Lsp.contains_ref': Lsp$contains_ref,
    'Lsp.mark_as_init': Lsp$mark_as_init,
    'Lsp.on_change': Lsp$on_change,
    'Lsp.definition': Lsp$definition,
    'Lsp.Completion.new': Lsp$Completion$new,
    'CompletionItemKind.Function': CompletionItemKind$Function,
    'Lsp.on_completions': Lsp$on_completions,
    'maybe_with_result': maybe_with_result,
    'Lsp.HoverRef.new': Lsp$HoverRef$new,
    'check': check,
    'Lsp.hover_info': Lsp$hover_info,
    'Lsp.on_hover': Lsp$on_hover,
    'Kind': Kind,
  };
})();
